declare const AddDisk: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["name", "sizeGB", "mountPath", "serviceId"];
        readonly properties: {
            readonly name: {
                readonly type: "string";
            };
            readonly sizeGB: {
                readonly type: "integer";
            };
            readonly mountPath: {
                readonly type: "string";
            };
            readonly serviceId: {
                readonly type: "string";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "sizeGB", "mountPath", "createdAt", "updatedAt"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly pattern: "^dsk-[0-9a-z]{20}$";
                    readonly examples: readonly ["dsk-cph1rs3idesc73a2b2mg"];
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly sizeGB: {
                    readonly type: "integer";
                };
                readonly mountPath: {
                    readonly type: "string";
                };
                readonly serviceId: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly updatedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const AddHeaders: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["path", "name", "value"];
        readonly properties: {
            readonly path: {
                readonly type: "string";
                readonly description: "The request path to add the header to. Wildcards will cause headers to be applied to all matching paths.";
                readonly examples: readonly ["/static/*"];
            };
            readonly name: {
                readonly type: "string";
                readonly description: "Header name";
                readonly examples: readonly ["Cache-Control"];
            };
            readonly value: {
                readonly type: "string";
                readonly description: "Header value";
                readonly examples: readonly ["public, max-age=604800"];
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly serviceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the service";
                };
            };
            readonly required: readonly ["serviceId"];
        }];
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly properties: {
                readonly headers: {
                    readonly type: "object";
                    readonly required: readonly ["id", "path", "name", "value"];
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly path: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly value: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const AddOrUpdateSecretFile: {
    readonly body: {
        readonly properties: {
            readonly content: {
                readonly type: "string";
            };
        };
        readonly type: "object";
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly serviceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the service";
                };
                readonly secretFileName: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The file name of the secret file";
                };
            };
            readonly required: readonly ["serviceId", "secretFileName"];
        }];
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["name", "content"];
            readonly properties: {
                readonly name: {
                    readonly type: "string";
                };
                readonly content: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const AddResourcesToEnvironment: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["resourceIds"];
        readonly properties: {
            readonly resourceIds: {
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                    readonly description: "The ID of an env group, a service, a PostgreSQL database, or a Redis instance";
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly environmentId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["environmentId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "projectId", "databasesIds", "redisIds", "serviceIds", "envGroupIds", "protectedStatus", "networkIsolationEnabled"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly projectId: {
                    readonly type: "string";
                };
                readonly databasesIds: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly redisIds: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly serviceIds: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly envGroupIds: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly protectedStatus: {
                    readonly type: "string";
                    readonly description: "Indicates whether an environment is `unprotected` or `protected`. Only admin users can perform destructive actions in `protected` environments.\n\n`unprotected` `protected`";
                    readonly enum: readonly ["unprotected", "protected"];
                };
                readonly networkIsolationEnabled: {
                    readonly type: "boolean";
                    readonly description: "Indicates whether network connections across environments are allowed.";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const AddRoute: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["type", "source", "destination"];
        readonly properties: {
            readonly type: {
                readonly type: "string";
                readonly enum: readonly ["redirect", "rewrite"];
            };
            readonly source: {
                readonly type: "string";
                readonly examples: readonly ["/:bar/foo"];
            };
            readonly destination: {
                readonly type: "string";
                readonly examples: readonly ["/foo/:bar"];
            };
            readonly priority: {
                readonly type: "integer";
                readonly description: "Redirect and Rewrite Rules are applied in priority order starting at 0. Defaults to last in the priority list.";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly serviceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the service";
                };
            };
            readonly required: readonly ["serviceId"];
        }];
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "type", "source", "destination", "priority"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["redirect", "rewrite"];
                    readonly description: "`redirect` `rewrite`";
                };
                readonly source: {
                    readonly type: "string";
                };
                readonly destination: {
                    readonly type: "string";
                };
                readonly priority: {
                    readonly type: "integer";
                    readonly description: "Redirect and Rewrite Rules are applied in priority order starting at 0";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const AutoscaleService: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["enabled", "min", "max", "criteria"];
        readonly properties: {
            readonly enabled: {
                readonly type: "boolean";
                readonly default: false;
            };
            readonly min: {
                readonly type: "integer";
                readonly description: "The minimum number of instances for the service";
            };
            readonly max: {
                readonly type: "integer";
                readonly description: "The maximum number of instances for the service";
            };
            readonly criteria: {
                readonly type: "object";
                readonly required: readonly ["cpu", "memory"];
                readonly properties: {
                    readonly cpu: {
                        readonly type: "object";
                        readonly required: readonly ["enabled", "percentage"];
                        readonly properties: {
                            readonly enabled: {
                                readonly type: "boolean";
                                readonly default: false;
                            };
                            readonly percentage: {
                                readonly type: "integer";
                                readonly description: "Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.\n";
                            };
                        };
                    };
                    readonly memory: {
                        readonly type: "object";
                        readonly required: readonly ["enabled", "percentage"];
                        readonly properties: {
                            readonly enabled: {
                                readonly type: "boolean";
                                readonly default: false;
                            };
                            readonly percentage: {
                                readonly type: "integer";
                                readonly description: "Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.\n";
                            };
                        };
                    };
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly serviceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the service";
                };
            };
            readonly required: readonly ["serviceId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["enabled", "min", "max", "criteria"];
            readonly properties: {
                readonly enabled: {
                    readonly type: "boolean";
                    readonly default: false;
                };
                readonly min: {
                    readonly type: "integer";
                    readonly description: "The minimum number of instances for the service";
                };
                readonly max: {
                    readonly type: "integer";
                    readonly description: "The maximum number of instances for the service";
                };
                readonly criteria: {
                    readonly type: "object";
                    readonly required: readonly ["cpu", "memory"];
                    readonly properties: {
                        readonly cpu: {
                            readonly type: "object";
                            readonly required: readonly ["enabled", "percentage"];
                            readonly properties: {
                                readonly enabled: {
                                    readonly type: "boolean";
                                    readonly default: false;
                                };
                                readonly percentage: {
                                    readonly type: "integer";
                                    readonly description: "Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.\n";
                                };
                            };
                        };
                        readonly memory: {
                            readonly type: "object";
                            readonly required: readonly ["enabled", "percentage"];
                            readonly properties: {
                                readonly enabled: {
                                    readonly type: "boolean";
                                    readonly default: false;
                                };
                                readonly percentage: {
                                    readonly type: "integer";
                                    readonly description: "Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.\n";
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CancelCronJobRun: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly cronJobId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the cron job";
                };
            };
            readonly required: readonly ["cronJobId"];
        }];
    };
    readonly response: {
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CancelDeploy: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly serviceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the service";
                };
                readonly deployId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the deploy";
                };
            };
            readonly required: readonly ["serviceId", "deployId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly commit: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly message: {
                            readonly type: "string";
                        };
                        readonly createdAt: {
                            readonly type: "string";
                            readonly format: "date-time";
                        };
                    };
                };
                readonly image: {
                    readonly description: "Image information used when creating the deploy. Not present for Git-backed deploys";
                    readonly type: "object";
                    readonly properties: {
                        readonly ref: {
                            readonly description: "Image reference used when creating the deploy";
                            readonly type: "string";
                        };
                        readonly sha: {
                            readonly description: "SHA that the image reference was resolved to when creating the deploy";
                            readonly type: "string";
                        };
                        readonly registryCredential: {
                            readonly description: "Name of credential used to pull the image, if provided";
                            readonly type: "string";
                        };
                    };
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["created", "build_in_progress", "update_in_progress", "live", "deactivated", "build_failed", "update_failed", "canceled", "pre_deploy_in_progress", "pre_deploy_failed"];
                    readonly description: "`created` `build_in_progress` `update_in_progress` `live` `deactivated` `build_failed` `update_failed` `canceled` `pre_deploy_in_progress` `pre_deploy_failed`";
                };
                readonly trigger: {
                    readonly type: "string";
                    readonly enum: readonly ["api", "blueprint_sync", "deploy_hook", "deployed_by_render", "manual", "other", "new_commit", "rollback", "service_resumed", "service_updated"];
                    readonly description: "`api` `blueprint_sync` `deploy_hook` `deployed_by_render` `manual` `other` `new_commit` `rollback` `service_resumed` `service_updated`";
                };
                readonly finishedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly updatedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CancelJob: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly serviceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the service";
                };
                readonly jobId: {
                    readonly type: "string";
                    readonly pattern: "^job-[0-9a-z]{20}$";
                    readonly examples: readonly ["job-cph1rs3idesc73a2b2mg"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the job";
                };
            };
            readonly required: readonly ["serviceId", "jobId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "serviceId", "startCommand", "planId", "createdAt"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly pattern: "^job-[0-9a-z]{20}$";
                    readonly examples: readonly ["job-cph1rs3idesc73a2b2mg"];
                };
                readonly serviceId: {
                    readonly type: "string";
                    readonly examples: readonly ["srv-xxxxx"];
                };
                readonly startCommand: {
                    readonly type: "string";
                    readonly examples: readonly ["echo 'hello world'"];
                };
                readonly planId: {
                    readonly type: "string";
                    readonly examples: readonly ["plan-srv-004"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["succeeded", "failed", "canceled"];
                    readonly description: "`succeeded` `failed` `canceled`";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-07-15T07:20:05.777035-07:00"];
                };
                readonly startedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-07-15T07:20:05.777035-07:00"];
                };
                readonly finishedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-07-15T07:20:05.777035-07:00"];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CreateCustomDomain: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["name"];
        readonly properties: {
            readonly name: {
                readonly type: "string";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly serviceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the service";
                };
            };
            readonly required: readonly ["serviceId"];
        }];
    };
    readonly response: {
        readonly "201": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "name", "domainType", "publicSuffix", "verificationStatus", "createdAt", "redirectForName"];
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                    };
                    readonly name: {
                        readonly type: "string";
                    };
                    readonly domainType: {
                        readonly type: "string";
                        readonly enum: readonly ["apex", "subdomain"];
                        readonly description: "`apex` `subdomain`";
                    };
                    readonly publicSuffix: {
                        readonly type: "string";
                    };
                    readonly redirectForName: {
                        readonly type: "string";
                    };
                    readonly verificationStatus: {
                        readonly type: "string";
                        readonly enum: readonly ["verified", "unverified"];
                        readonly description: "`verified` `unverified`";
                    };
                    readonly createdAt: {
                        readonly type: "string";
                        readonly format: "date-time";
                    };
                    readonly server: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "402": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "409": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CreateDeploy: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly clearCache: {
                readonly type: "string";
                readonly enum: readonly ["clear", "do_not_clear"];
                readonly default: "do_not_clear";
                readonly description: "If `clear`, Render clears the service's build cache before deploying. This can be useful if you're experiencing issues with your build.\n\nDefault: `do_not_clear`";
            };
            readonly commitId: {
                readonly type: "string";
                readonly description: "The SHA of a specific Git commit to deploy for a service. Defaults to the latest commit on the service's connected branch.\n\nNote that deploying a specific commit with this endpoint does not disable autodeploys for the service.\n\nYou can toggle autodeploys for your service with the [Update service](https://api-docs.render.com/reference/update-service) endpoint or in the Render Dashboard.\n\nNot supported for cron jobs.\n";
            };
            readonly imageUrl: {
                readonly type: "string";
                readonly description: "The URL of the image to deploy for an image-backed service.\n\nThe host, repository, and image name all must match the currently configured image for the service.\n";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly serviceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the service";
                };
            };
            readonly required: readonly ["serviceId"];
        }];
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly commit: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly message: {
                            readonly type: "string";
                        };
                        readonly createdAt: {
                            readonly type: "string";
                            readonly format: "date-time";
                        };
                    };
                };
                readonly image: {
                    readonly description: "Image information used when creating the deploy. Not present for Git-backed deploys";
                    readonly type: "object";
                    readonly properties: {
                        readonly ref: {
                            readonly description: "Image reference used when creating the deploy";
                            readonly type: "string";
                        };
                        readonly sha: {
                            readonly description: "SHA that the image reference was resolved to when creating the deploy";
                            readonly type: "string";
                        };
                        readonly registryCredential: {
                            readonly description: "Name of credential used to pull the image, if provided";
                            readonly type: "string";
                        };
                    };
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["created", "build_in_progress", "update_in_progress", "live", "deactivated", "build_failed", "update_failed", "canceled", "pre_deploy_in_progress", "pre_deploy_failed"];
                    readonly description: "`created` `build_in_progress` `update_in_progress` `live` `deactivated` `build_failed` `update_failed` `canceled` `pre_deploy_in_progress` `pre_deploy_failed`";
                };
                readonly trigger: {
                    readonly type: "string";
                    readonly enum: readonly ["api", "blueprint_sync", "deploy_hook", "deployed_by_render", "manual", "other", "new_commit", "rollback", "service_resumed", "service_updated"];
                    readonly description: "`api` `blueprint_sync` `deploy_hook` `deployed_by_render` `manual` `other` `new_commit` `rollback` `service_resumed` `service_updated`";
                };
                readonly finishedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly updatedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "409": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CreateEnvGroup: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["name", "ownerId", "envVars"];
        readonly properties: {
            readonly name: {
                readonly type: "string";
            };
            readonly ownerId: {
                readonly type: "string";
            };
            readonly envVars: {
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly oneOf: readonly [{
                        readonly type: "object";
                        readonly required: readonly ["key", "value"];
                        readonly properties: {
                            readonly key: {
                                readonly type: "string";
                            };
                            readonly value: {
                                readonly type: "string";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly required: readonly ["key", "generateValue"];
                        readonly properties: {
                            readonly key: {
                                readonly type: "string";
                            };
                            readonly generateValue: {
                                readonly type: "boolean";
                            };
                        };
                    }];
                };
            };
            readonly secretFiles: {
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly required: readonly ["name", "content"];
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly content: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly serviceIds: {
                readonly type: "array";
                readonly items: {
                    readonly description: "List of serviceIds to link the envGroup to";
                    readonly type: "string";
                };
            };
            readonly environmentId: {
                readonly type: "string";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["createdAt", "envVars", "id", "name", "ownerId", "secretFiles", "serviceLinks", "updatedAt"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly ownerId: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly updatedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly serviceLinks: {
                    readonly description: "List of serviceIds linked to the envGroup";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["id", "name", "type"];
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["static", "web", "pserv", "worker", "cron"];
                                readonly description: "`static` `web` `pserv` `worker` `cron`";
                            };
                        };
                    };
                };
                readonly environmentId: {
                    readonly type: "string";
                };
                readonly envVars: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["key", "value"];
                        readonly properties: {
                            readonly key: {
                                readonly type: "string";
                            };
                            readonly value: {
                                readonly type: "string";
                            };
                        };
                    };
                };
                readonly secretFiles: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["name", "content"];
                        readonly properties: {
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly content: {
                                readonly type: "string";
                            };
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CreateEnvironment: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["name", "projectId"];
        readonly properties: {
            readonly name: {
                readonly type: "string";
            };
            readonly projectId: {
                readonly type: "string";
            };
            readonly protectedStatus: {
                readonly type: "string";
                readonly description: "Indicates whether an environment is `unprotected` or `protected`. Only admin users can perform destructive actions in `protected` environments.";
                readonly enum: readonly ["unprotected", "protected"];
            };
            readonly networkIsolationEnabled: {
                readonly type: "boolean";
                readonly description: "Indicates whether network connections across environments are allowed.";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "projectId", "databasesIds", "redisIds", "serviceIds", "envGroupIds", "protectedStatus", "networkIsolationEnabled"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly projectId: {
                    readonly type: "string";
                };
                readonly databasesIds: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly redisIds: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly serviceIds: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly envGroupIds: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly protectedStatus: {
                    readonly type: "string";
                    readonly description: "Indicates whether an environment is `unprotected` or `protected`. Only admin users can perform destructive actions in `protected` environments.\n\n`unprotected` `protected`";
                    readonly enum: readonly ["unprotected", "protected"];
                };
                readonly networkIsolationEnabled: {
                    readonly type: "boolean";
                    readonly description: "Indicates whether network connections across environments are allowed.";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CreatePostgres: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["name", "plan", "ownerId", "version"];
        readonly properties: {
            readonly databaseName: {
                readonly type: "string";
                readonly default: "randomly generated";
            };
            readonly databaseUser: {
                readonly type: "string";
                readonly default: "randomly generated";
            };
            readonly datadogAPIKey: {
                readonly type: "string";
            };
            readonly name: {
                readonly type: "string";
                readonly description: "The name of the database as it will appear in the Render Dashboard";
            };
            readonly enableHighAvailability: {
                readonly type: "boolean";
                readonly default: false;
            };
            readonly environmentId: {
                readonly type: "string";
            };
            readonly ownerId: {
                readonly type: "string";
                readonly description: "The ID of the owner (team or personal user) whose resources should be returned";
            };
            readonly plan: {
                readonly type: "string";
                readonly enum: readonly ["free", "starter", "standard", "pro", "pro_plus", "custom", "basic_256mb", "basic_1gb", "basic_4gb", "pro_4gb", "pro_8gb", "pro_16gb", "pro_32gb", "pro_64gb", "pro_128gb", "pro_192gb", "pro_256gb", "pro_384gb", "pro_512gb", "accelerated_16gb", "accelerated_32gb", "accelerated_64gb", "accelerated_128gb", "accelerated_256gb", "accelerated_384gb", "accelerated_512gb", "accelerated_768gb", "accelerated_1024gb"];
            };
            readonly diskSizeGB: {
                readonly type: "integer";
                readonly description: "The number of gigabytes of disk space to allocate for the database";
            };
            readonly region: {
                readonly type: "string";
            };
            readonly ipAllowList: {
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly required: readonly ["cidrBlock", "description"];
                    readonly properties: {
                        readonly cidrBlock: {
                            readonly type: "string";
                        };
                        readonly description: {
                            readonly description: "User-provided description of the CIDR block";
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly readReplicas: {
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                            readonly description: "The display name of the replica instance.";
                        };
                    };
                    readonly required: readonly ["name"];
                };
            };
            readonly version: {
                readonly type: "string";
                readonly description: "The PostgreSQL version";
                readonly enum: readonly ["11", "12", "13", "14", "15", "16"];
            };
        };
        readonly description: "Input for creating a database";
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "ipAllowList", "createdAt", "updatedAt", "dashboardUrl", "databaseName", "databaseUser", "highAvailabilityEnabled", "name", "owner", "project", "plan", "region", "readReplicas", "role", "status", "version", "suspended", "suspenders"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly ipAllowList: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["cidrBlock", "description"];
                        readonly properties: {
                            readonly cidrBlock: {
                                readonly type: "string";
                            };
                            readonly description: {
                                readonly description: "User-provided description of the CIDR block";
                                readonly type: "string";
                            };
                        };
                    };
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly updatedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly expiresAt: {
                    readonly description: "The time at which the database will be expire. Applies to free tier databases only.";
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly dashboardUrl: {
                    readonly type: "string";
                    readonly description: "The URL to view the PostgreSQL instance in the Render Dashboard";
                };
                readonly databaseName: {
                    readonly type: "string";
                };
                readonly databaseUser: {
                    readonly type: "string";
                };
                readonly environmentId: {
                    readonly type: "string";
                };
                readonly highAvailabilityEnabled: {
                    readonly type: "boolean";
                };
                readonly maintenance: {
                    readonly type: "object";
                    readonly required: readonly ["id", "type", "scheduledAt", "state"];
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly pattern: "^mrn-[0-9a-z]{20}$";
                            readonly examples: readonly ["mrn-cph1rs3idesc73a2b2mg"];
                        };
                        readonly type: {
                            readonly type: "string";
                        };
                        readonly scheduledAt: {
                            readonly type: "string";
                            readonly format: "date-time";
                        };
                        readonly pendingMaintenanceBy: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "If present, the maintenance run cannot be scheduled for later than this date-time.";
                        };
                        readonly state: {
                            readonly type: "string";
                            readonly enum: readonly ["scheduled", "in_progress", "user_fix_required", "cancelled", "succeeded", "failed"];
                            readonly description: "`scheduled` `in_progress` `user_fix_required` `cancelled` `succeeded` `failed`";
                        };
                    };
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly owner: {
                    readonly type: "object";
                    readonly required: readonly ["id", "name", "email", "type"];
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly email: {
                            readonly type: "string";
                        };
                        readonly twoFactorAuthEnabled: {
                            readonly type: "boolean";
                            readonly description: "Whether two-factor authentication is enabled for the owner. Only present for user owners.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly enum: readonly ["user", "team"];
                            readonly description: "`user` `team`";
                        };
                    };
                };
                readonly plan: {
                    readonly type: "string";
                    readonly enum: readonly ["free", "starter", "standard", "pro", "pro_plus", "custom", "basic_256mb", "basic_1gb", "basic_4gb", "pro_4gb", "pro_8gb", "pro_16gb", "pro_32gb", "pro_64gb", "pro_128gb", "pro_192gb", "pro_256gb", "pro_384gb", "pro_512gb", "accelerated_16gb", "accelerated_32gb", "accelerated_64gb", "accelerated_128gb", "accelerated_256gb", "accelerated_384gb", "accelerated_512gb", "accelerated_768gb", "accelerated_1024gb"];
                    readonly description: "`free` `starter` `standard` `pro` `pro_plus` `custom` `basic_256mb` `basic_1gb` `basic_4gb` `pro_4gb` `pro_8gb` `pro_16gb` `pro_32gb` `pro_64gb` `pro_128gb` `pro_192gb` `pro_256gb` `pro_384gb` `pro_512gb` `accelerated_16gb` `accelerated_32gb` `accelerated_64gb` `accelerated_128gb` `accelerated_256gb` `accelerated_384gb` `accelerated_512gb` `accelerated_768gb` `accelerated_1024gb`";
                };
                readonly diskSizeGB: {
                    readonly type: "integer";
                };
                readonly primaryPostgresID: {
                    readonly type: "string";
                };
                readonly region: {
                    readonly type: "string";
                    readonly enum: readonly ["frankfurt", "oregon", "ohio", "singapore", "virginia"];
                    readonly default: "oregon";
                    readonly description: "Defaults to \"oregon\"\n\n`frankfurt` `oregon` `ohio` `singapore` `virginia`";
                };
                readonly readReplicas: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "The replica instance identifier.";
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "The display name of the replica instance.";
                            };
                        };
                        readonly required: readonly ["id", "name"];
                    };
                };
                readonly role: {
                    readonly type: "string";
                    readonly enum: readonly ["primary", "replica"];
                    readonly description: "`primary` `replica`";
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["creating", "available", "unavailable", "config_restart", "suspended", "maintenance_scheduled", "maintenance_in_progress", "recovery_failed", "recovery_in_progress", "unknown", "updating_instance"];
                    readonly description: "`creating` `available` `unavailable` `config_restart` `suspended` `maintenance_scheduled` `maintenance_in_progress` `recovery_failed` `recovery_in_progress` `unknown` `updating_instance`";
                };
                readonly version: {
                    readonly type: "string";
                    readonly description: "The PostgreSQL version\n\n`11` `12` `13` `14` `15` `16`";
                    readonly enum: readonly ["11", "12", "13", "14", "15", "16"];
                };
                readonly suspended: {
                    readonly type: "string";
                    readonly enum: readonly ["suspended", "not_suspended"];
                    readonly description: "`suspended` `not_suspended`";
                };
                readonly suspenders: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["admin", "billing", "user", "parent_service", "unknown"];
                        readonly description: "`admin` `billing` `user` `parent_service` `unknown`";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CreatePostgresBackup: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly postgresId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["postgresId"];
        }];
    };
    readonly response: {
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CreateProject: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["name", "ownerId", "environments"];
        readonly properties: {
            readonly name: {
                readonly description: "The name of the project";
                readonly type: "string";
            };
            readonly ownerId: {
                readonly description: "The ID of the owner that the project belongs to";
                readonly type: "string";
            };
            readonly environments: {
                readonly description: "The environments to create when creating the project";
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly required: readonly ["name"];
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly protectedStatus: {
                            readonly type: "string";
                            readonly description: "Indicates whether an environment is `unprotected` or `protected`. Only admin users can perform destructive actions in `protected` environments.";
                            readonly enum: readonly ["unprotected", "protected"];
                        };
                        readonly networkIsolationEnabled: {
                            readonly type: "boolean";
                            readonly description: "Indicates whether network connections across environments are allowed.";
                        };
                    };
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly description: "A project is a collection of environments";
            readonly type: "object";
            readonly required: readonly ["id", "createdAt", "updatedAt", "name", "owner", "environmentIds"];
            readonly properties: {
                readonly id: {
                    readonly description: "The ID of the project";
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly updatedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly name: {
                    readonly description: "The name of the project";
                    readonly type: "string";
                };
                readonly owner: {
                    readonly type: "object";
                    readonly required: readonly ["id", "name", "email", "type"];
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly email: {
                            readonly type: "string";
                        };
                        readonly twoFactorAuthEnabled: {
                            readonly type: "boolean";
                            readonly description: "Whether two-factor authentication is enabled for the owner. Only present for user owners.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly enum: readonly ["user", "team"];
                            readonly description: "`user` `team`";
                        };
                    };
                };
                readonly environmentIds: {
                    readonly description: "The environments associated with the project";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly description: "The ID of the environment";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CreateRedis: {
    readonly body: {
        readonly type: "object";
        readonly description: "Input type for creating a Redis instance";
        readonly required: readonly ["name", "ownerId", "plan"];
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly description: "The name of the Redis instance";
            };
            readonly ownerId: {
                readonly type: "string";
                readonly description: "The ID of the owner of the Redis instance";
            };
            readonly plan: {
                readonly type: "string";
                readonly enum: readonly ["free", "starter", "standard", "pro", "pro_plus", "custom"];
                readonly "x-enum-varnames": readonly ["RedisPlanFree", "RedisPlanStarter", "RedisPlanStandard", "RedisPlanPro", "RedisPlanPro_plus", "RedisPlanCustom"];
            };
            readonly region: {
                readonly type: "string";
                readonly description: "The region where the Redis instance is located";
            };
            readonly environmentId: {
                readonly type: "string";
            };
            readonly maxmemoryPolicy: {
                readonly type: "string";
                readonly description: "The eviction policy for the Key / Value instance";
                readonly enum: readonly ["noeviction", "allkeys_lfu", "allkeys_lru", "allkeys_random", "volatile_lfu", "volatile_lru", "volatile_random", "volatile_ttl"];
            };
            readonly ipAllowList: {
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly required: readonly ["cidrBlock", "description"];
                    readonly properties: {
                        readonly cidrBlock: {
                            readonly type: "string";
                        };
                        readonly description: {
                            readonly description: "User-provided description of the CIDR block";
                            readonly type: "string";
                        };
                    };
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly description: "A Redis instance";
            readonly required: readonly ["id", "createdAt", "updatedAt", "status", "region", "plan", "name", "owner", "options", "ipAllowList", "version"];
            readonly properties: {
                readonly id: {
                    readonly description: "The ID of the Redis instance";
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly description: "The creation time of the Redis instance";
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly updatedAt: {
                    readonly description: "The last updated time of the Redis instance";
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["creating", "available", "unavailable", "config_restart", "suspended", "maintenance_scheduled", "maintenance_in_progress", "recovery_failed", "recovery_in_progress", "unknown", "updating_instance"];
                    readonly description: "`creating` `available` `unavailable` `config_restart` `suspended` `maintenance_scheduled` `maintenance_in_progress` `recovery_failed` `recovery_in_progress` `unknown` `updating_instance`";
                };
                readonly region: {
                    readonly type: "string";
                    readonly enum: readonly ["frankfurt", "oregon", "ohio", "singapore", "virginia"];
                    readonly default: "oregon";
                    readonly description: "Defaults to \"oregon\"\n\n`frankfurt` `oregon` `ohio` `singapore` `virginia`";
                };
                readonly plan: {
                    readonly type: "string";
                    readonly enum: readonly ["free", "starter", "standard", "pro", "pro_plus", "custom"];
                    readonly "x-enum-varnames": readonly ["RedisPlanFree", "RedisPlanStarter", "RedisPlanStandard", "RedisPlanPro", "RedisPlanPro_plus", "RedisPlanCustom"];
                    readonly description: "`free` `starter` `standard` `pro` `pro_plus` `custom`";
                };
                readonly name: {
                    readonly description: "The name of the Redis instance";
                    readonly type: "string";
                };
                readonly owner: {
                    readonly type: "object";
                    readonly required: readonly ["id", "name", "email", "type"];
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly email: {
                            readonly type: "string";
                        };
                        readonly twoFactorAuthEnabled: {
                            readonly type: "boolean";
                            readonly description: "Whether two-factor authentication is enabled for the owner. Only present for user owners.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly enum: readonly ["user", "team"];
                            readonly description: "`user` `team`";
                        };
                    };
                };
                readonly options: {
                    readonly description: "Options for a Redis instance";
                    readonly type: "object";
                    readonly properties: {
                        readonly maxmemoryPolicy: {
                            readonly type: "string";
                        };
                    };
                };
                readonly ipAllowList: {
                    readonly description: "The IP allow list for the Redis instance";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["cidrBlock", "description"];
                        readonly properties: {
                            readonly cidrBlock: {
                                readonly type: "string";
                            };
                            readonly description: {
                                readonly description: "User-provided description of the CIDR block";
                                readonly type: "string";
                            };
                        };
                    };
                };
                readonly environmentId: {
                    readonly description: "The ID of the environment the Redis instance is associated with";
                    readonly type: "string";
                };
                readonly version: {
                    readonly description: "The version of Redis";
                    readonly type: "string";
                };
                readonly maintenance: {
                    readonly type: "object";
                    readonly required: readonly ["id", "type", "scheduledAt", "state"];
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly pattern: "^mrn-[0-9a-z]{20}$";
                            readonly examples: readonly ["mrn-cph1rs3idesc73a2b2mg"];
                        };
                        readonly type: {
                            readonly type: "string";
                        };
                        readonly scheduledAt: {
                            readonly type: "string";
                            readonly format: "date-time";
                        };
                        readonly pendingMaintenanceBy: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "If present, the maintenance run cannot be scheduled for later than this date-time.";
                        };
                        readonly state: {
                            readonly type: "string";
                            readonly enum: readonly ["scheduled", "in_progress", "user_fix_required", "cancelled", "succeeded", "failed"];
                            readonly description: "`scheduled` `in_progress` `user_fix_required` `cancelled` `succeeded` `failed`";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CreateRegistryCredential: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["name", "registry", "username", "authToken", "ownerId"];
        readonly properties: {
            readonly registry: {
                readonly type: "string";
                readonly enum: readonly ["GITHUB", "GITLAB", "DOCKER", "GOOGLE_ARTIFACT", "AWS_ECR"];
                readonly description: "The registry to use this credential with";
            };
            readonly name: {
                readonly type: "string";
            };
            readonly username: {
                readonly type: "string";
            };
            readonly authToken: {
                readonly type: "string";
            };
            readonly ownerId: {
                readonly type: "string";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "username", "registry", "updatedAt"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique identifier for this credential";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Descriptive name for this credential";
                };
                readonly registry: {
                    readonly type: "string";
                    readonly enum: readonly ["GITHUB", "GITLAB", "DOCKER", "GOOGLE_ARTIFACT", "AWS_ECR"];
                    readonly description: "The registry to use this credential with\n\n`GITHUB` `GITLAB` `DOCKER` `GOOGLE_ARTIFACT` `AWS_ECR`";
                };
                readonly username: {
                    readonly type: "string";
                    readonly description: "The username associated with the credential";
                };
                readonly updatedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Last updated time for the credential";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "402": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "409": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CreateService: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["type", "name", "ownerId"];
        readonly properties: {
            readonly type: {
                readonly type: "string";
                readonly enum: readonly ["static_site", "web_service", "private_service", "background_worker", "cron_job"];
            };
            readonly name: {
                readonly type: "string";
            };
            readonly ownerId: {
                readonly type: "string";
            };
            readonly repo: {
                readonly type: "string";
                readonly description: "Do not include the branch in the repo string. You can instead supply a 'branch' parameter.";
                readonly examples: readonly ["https://github.com/render-examples/flask-hello-world"];
            };
            readonly autoDeploy: {
                readonly type: "string";
                readonly enum: readonly ["yes", "no"];
                readonly default: "yes";
                readonly description: "Default: yes";
            };
            readonly branch: {
                readonly type: "string";
                readonly description: "If left empty, this will fall back to the default branch of the repository";
            };
            readonly image: {
                readonly type: "object";
                readonly required: readonly ["imagePath", "ownerId"];
                readonly properties: {
                    readonly ownerId: {
                        readonly type: "string";
                        readonly description: "The ID of the owner for this image. This should match the owner of the service as well as the owner of any specified registry credential.";
                    };
                    readonly registryCredentialId: {
                        readonly type: "string";
                        readonly description: "Optional reference to the registry credential passed to the image repository to retrieve this image.";
                    };
                    readonly imagePath: {
                        readonly type: "string";
                        readonly description: "Path to the image used for this server (e.g docker.io/library/nginx:latest).";
                    };
                };
            };
            readonly buildFilter: {
                readonly type: "object";
                readonly required: readonly ["paths", "ignoredPaths"];
                readonly properties: {
                    readonly paths: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                    };
                    readonly ignoredPaths: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly rootDir: {
                readonly type: "string";
            };
            readonly envVars: {
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly oneOf: readonly [{
                        readonly type: "object";
                        readonly required: readonly ["key", "value"];
                        readonly properties: {
                            readonly key: {
                                readonly type: "string";
                            };
                            readonly value: {
                                readonly type: "string";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly required: readonly ["key", "generateValue"];
                        readonly properties: {
                            readonly key: {
                                readonly type: "string";
                            };
                            readonly generateValue: {
                                readonly type: "boolean";
                            };
                        };
                    }];
                };
            };
            readonly secretFiles: {
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly required: readonly ["name", "content"];
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly content: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly serviceDetails: {
                readonly oneOf: readonly [{
                    readonly type: "object";
                    readonly properties: {
                        readonly buildCommand: {
                            readonly type: "string";
                        };
                        readonly headers: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly required: readonly ["path", "name", "value"];
                                readonly properties: {
                                    readonly path: {
                                        readonly type: "string";
                                        readonly description: "The request path to add the header to. Wildcards will cause headers to be applied to all matching paths.";
                                        readonly examples: readonly ["/static/*"];
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Header name";
                                        readonly examples: readonly ["Cache-Control"];
                                    };
                                    readonly value: {
                                        readonly type: "string";
                                        readonly description: "Header value";
                                        readonly examples: readonly ["public, max-age=604800"];
                                    };
                                };
                            };
                        };
                        readonly publishPath: {
                            readonly type: "string";
                            readonly description: "Defaults to \"public\"";
                        };
                        readonly pullRequestPreviewsEnabled: {
                            readonly type: "string";
                            readonly enum: readonly ["yes", "no"];
                            readonly default: "no";
                            readonly deprecated: true;
                            readonly description: "This field has been deprecated. previews.generation should be used in its place.\n\nDefault: `no`";
                        };
                        readonly previews: {
                            readonly type: "object";
                            readonly properties: {
                                readonly generation: {
                                    readonly type: "string";
                                    readonly enum: readonly ["off", "manual", "automatic"];
                                    readonly default: "off";
                                    readonly description: "Defaults to \"off\"\n\nDefault: `off`";
                                };
                            };
                        };
                        readonly routes: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly required: readonly ["type", "source", "destination"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly enum: readonly ["redirect", "rewrite"];
                                    };
                                    readonly source: {
                                        readonly type: "string";
                                        readonly examples: readonly ["/:bar/foo"];
                                    };
                                    readonly destination: {
                                        readonly type: "string";
                                        readonly examples: readonly ["/foo/:bar"];
                                    };
                                    readonly priority: {
                                        readonly type: "integer";
                                        readonly description: "Redirect and Rewrite Rules are applied in priority order starting at 0. Defaults to last in the priority list.";
                                    };
                                };
                            };
                        };
                    };
                }, {
                    readonly type: "object";
                    readonly required: readonly ["runtime"];
                    readonly properties: {
                        readonly autoscaling: {
                            readonly type: "object";
                            readonly required: readonly ["enabled", "min", "max", "criteria"];
                            readonly properties: {
                                readonly enabled: {
                                    readonly type: "boolean";
                                    readonly default: false;
                                };
                                readonly min: {
                                    readonly type: "integer";
                                    readonly description: "The minimum number of instances for the service";
                                };
                                readonly max: {
                                    readonly type: "integer";
                                    readonly description: "The maximum number of instances for the service";
                                };
                                readonly criteria: {
                                    readonly type: "object";
                                    readonly required: readonly ["cpu", "memory"];
                                    readonly properties: {
                                        readonly cpu: {
                                            readonly type: "object";
                                            readonly required: readonly ["enabled", "percentage"];
                                            readonly properties: {
                                                readonly enabled: {
                                                    readonly type: "boolean";
                                                    readonly default: false;
                                                };
                                                readonly percentage: {
                                                    readonly type: "integer";
                                                    readonly description: "Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.\n";
                                                };
                                            };
                                        };
                                        readonly memory: {
                                            readonly type: "object";
                                            readonly required: readonly ["enabled", "percentage"];
                                            readonly properties: {
                                                readonly enabled: {
                                                    readonly type: "boolean";
                                                    readonly default: false;
                                                };
                                                readonly percentage: {
                                                    readonly type: "integer";
                                                    readonly description: "Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.\n";
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        readonly disk: {
                            readonly type: "object";
                            readonly required: readonly ["name", "mountPath"];
                            readonly properties: {
                                readonly name: {
                                    readonly type: "string";
                                };
                                readonly mountPath: {
                                    readonly type: "string";
                                };
                                readonly sizeGB: {
                                    readonly type: "integer";
                                    readonly minimum: 1;
                                    readonly description: "Defaults to 1";
                                };
                            };
                        };
                        readonly env: {
                            readonly type: "string";
                            readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                            readonly deprecated: true;
                            readonly description: "This field has been deprecated, runtime should be used in its place.";
                        };
                        readonly runtime: {
                            readonly type: "string";
                            readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                            readonly description: "Runtime";
                        };
                        readonly envSpecificDetails: {
                            readonly oneOf: readonly [{
                                readonly type: "object";
                                readonly properties: {
                                    readonly dockerCommand: {
                                        readonly type: "string";
                                    };
                                    readonly dockerContext: {
                                        readonly type: "string";
                                    };
                                    readonly dockerfilePath: {
                                        readonly type: "string";
                                        readonly description: "Defaults to \"./Dockerfile\"";
                                    };
                                    readonly registryCredentialId: {
                                        readonly type: "string";
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["buildCommand", "startCommand"];
                                readonly properties: {
                                    readonly buildCommand: {
                                        readonly type: "string";
                                    };
                                    readonly startCommand: {
                                        readonly type: "string";
                                    };
                                };
                                readonly description: "Fields for native environment (runtime) services";
                            }];
                        };
                        readonly healthCheckPath: {
                            readonly type: "string";
                        };
                        readonly maintenanceMode: {
                            readonly type: "object";
                            readonly required: readonly ["enabled", "uri"];
                            readonly properties: {
                                readonly enabled: {
                                    readonly type: "boolean";
                                };
                                readonly uri: {
                                    readonly type: "string";
                                    readonly description: "The page to be served when [maintenance mode](https://docs.render.com/maintenance-mode) is enabled. When empty, the default maintenance mode page is served.";
                                };
                            };
                        };
                        readonly numInstances: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly description: "Defaults to 1";
                        };
                        readonly plan: {
                            readonly type: "string";
                            readonly enum: readonly ["starter", "standard", "pro", "pro_plus", "pro_max", "pro_ultra"];
                            readonly default: "starter";
                            readonly description: "Defaults to \"starter\"\n\nDefault: `starter`";
                        };
                        readonly preDeployCommand: {
                            readonly type: "string";
                        };
                        readonly pullRequestPreviewsEnabled: {
                            readonly type: "string";
                            readonly enum: readonly ["yes", "no"];
                            readonly default: "no";
                            readonly deprecated: true;
                            readonly description: "This field has been deprecated. previews.generation should be used in its place.\n\nDefault: `no`";
                        };
                        readonly previews: {
                            readonly type: "object";
                            readonly properties: {
                                readonly generation: {
                                    readonly type: "string";
                                    readonly enum: readonly ["off", "manual", "automatic"];
                                    readonly default: "off";
                                    readonly description: "Defaults to \"off\"\n\nDefault: `off`";
                                };
                            };
                        };
                        readonly region: {
                            readonly type: "string";
                            readonly enum: readonly ["frankfurt", "oregon", "ohio", "singapore", "virginia"];
                            readonly default: "oregon";
                            readonly description: "Defaults to \"oregon\"\n\nDefault: `oregon`";
                        };
                        readonly maxShutdownDelaySeconds: {
                            readonly type: "integer";
                            readonly description: "The maximum amount of time (in seconds) that Render waits for your application process to exit gracefully after sending it a SIGTERM signal.";
                            readonly minimum: 1;
                            readonly maximum: 300;
                            readonly default: 30;
                        };
                    };
                }, {
                    readonly type: "object";
                    readonly required: readonly ["runtime"];
                    readonly properties: {
                        readonly autoscaling: {
                            readonly type: "object";
                            readonly required: readonly ["enabled", "min", "max", "criteria"];
                            readonly properties: {
                                readonly enabled: {
                                    readonly type: "boolean";
                                    readonly default: false;
                                };
                                readonly min: {
                                    readonly type: "integer";
                                    readonly description: "The minimum number of instances for the service";
                                };
                                readonly max: {
                                    readonly type: "integer";
                                    readonly description: "The maximum number of instances for the service";
                                };
                                readonly criteria: {
                                    readonly type: "object";
                                    readonly required: readonly ["cpu", "memory"];
                                    readonly properties: {
                                        readonly cpu: {
                                            readonly type: "object";
                                            readonly required: readonly ["enabled", "percentage"];
                                            readonly properties: {
                                                readonly enabled: {
                                                    readonly type: "boolean";
                                                    readonly default: false;
                                                };
                                                readonly percentage: {
                                                    readonly type: "integer";
                                                    readonly description: "Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.\n";
                                                };
                                            };
                                        };
                                        readonly memory: {
                                            readonly type: "object";
                                            readonly required: readonly ["enabled", "percentage"];
                                            readonly properties: {
                                                readonly enabled: {
                                                    readonly type: "boolean";
                                                    readonly default: false;
                                                };
                                                readonly percentage: {
                                                    readonly type: "integer";
                                                    readonly description: "Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.\n";
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        readonly disk: {
                            readonly type: "object";
                            readonly required: readonly ["name", "mountPath"];
                            readonly properties: {
                                readonly name: {
                                    readonly type: "string";
                                };
                                readonly mountPath: {
                                    readonly type: "string";
                                };
                                readonly sizeGB: {
                                    readonly type: "integer";
                                    readonly minimum: 1;
                                    readonly description: "Defaults to 1";
                                };
                            };
                        };
                        readonly env: {
                            readonly type: "string";
                            readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                            readonly deprecated: true;
                            readonly description: "This field has been deprecated, runtime should be used in its place.";
                        };
                        readonly runtime: {
                            readonly type: "string";
                            readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                            readonly description: "Runtime";
                        };
                        readonly envSpecificDetails: {
                            readonly oneOf: readonly [{
                                readonly type: "object";
                                readonly properties: {
                                    readonly dockerCommand: {
                                        readonly type: "string";
                                    };
                                    readonly dockerContext: {
                                        readonly type: "string";
                                    };
                                    readonly dockerfilePath: {
                                        readonly type: "string";
                                        readonly description: "Defaults to \"./Dockerfile\"";
                                    };
                                    readonly registryCredentialId: {
                                        readonly type: "string";
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["buildCommand", "startCommand"];
                                readonly properties: {
                                    readonly buildCommand: {
                                        readonly type: "string";
                                    };
                                    readonly startCommand: {
                                        readonly type: "string";
                                    };
                                };
                                readonly description: "Fields for native environment (runtime) services";
                            }];
                        };
                        readonly numInstances: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly default: 1;
                            readonly description: "Defaults to 1";
                        };
                        readonly plan: {
                            readonly type: "string";
                            readonly enum: readonly ["starter", "standard", "pro", "pro_plus", "pro_max", "pro_ultra"];
                            readonly default: "starter";
                            readonly description: "Defaults to \"starter\"\n\nDefault: `starter`";
                        };
                        readonly preDeployCommand: {
                            readonly type: "string";
                        };
                        readonly pullRequestPreviewsEnabled: {
                            readonly type: "string";
                            readonly enum: readonly ["yes", "no"];
                            readonly default: "no";
                            readonly deprecated: true;
                            readonly description: "This field has been deprecated. previews.generation should be used in its place.\n\nDefault: `no`";
                        };
                        readonly previews: {
                            readonly type: "object";
                            readonly properties: {
                                readonly generation: {
                                    readonly type: "string";
                                    readonly enum: readonly ["off", "manual", "automatic"];
                                    readonly default: "off";
                                    readonly description: "Defaults to \"off\"\n\nDefault: `off`";
                                };
                            };
                        };
                        readonly region: {
                            readonly type: "string";
                            readonly enum: readonly ["frankfurt", "oregon", "ohio", "singapore", "virginia"];
                            readonly default: "oregon";
                            readonly description: "Defaults to \"oregon\"\n\nDefault: `oregon`";
                        };
                        readonly maxShutdownDelaySeconds: {
                            readonly type: "integer";
                            readonly description: "The maximum amount of time (in seconds) that Render waits for your application process to exit gracefully after sending it a SIGTERM signal.";
                            readonly minimum: 1;
                            readonly maximum: 300;
                            readonly default: 30;
                        };
                    };
                }, {
                    readonly type: "object";
                    readonly required: readonly ["runtime"];
                    readonly properties: {
                        readonly autoscaling: {
                            readonly type: "object";
                            readonly required: readonly ["enabled", "min", "max", "criteria"];
                            readonly properties: {
                                readonly enabled: {
                                    readonly type: "boolean";
                                    readonly default: false;
                                };
                                readonly min: {
                                    readonly type: "integer";
                                    readonly description: "The minimum number of instances for the service";
                                };
                                readonly max: {
                                    readonly type: "integer";
                                    readonly description: "The maximum number of instances for the service";
                                };
                                readonly criteria: {
                                    readonly type: "object";
                                    readonly required: readonly ["cpu", "memory"];
                                    readonly properties: {
                                        readonly cpu: {
                                            readonly type: "object";
                                            readonly required: readonly ["enabled", "percentage"];
                                            readonly properties: {
                                                readonly enabled: {
                                                    readonly type: "boolean";
                                                    readonly default: false;
                                                };
                                                readonly percentage: {
                                                    readonly type: "integer";
                                                    readonly description: "Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.\n";
                                                };
                                            };
                                        };
                                        readonly memory: {
                                            readonly type: "object";
                                            readonly required: readonly ["enabled", "percentage"];
                                            readonly properties: {
                                                readonly enabled: {
                                                    readonly type: "boolean";
                                                    readonly default: false;
                                                };
                                                readonly percentage: {
                                                    readonly type: "integer";
                                                    readonly description: "Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.\n";
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        readonly disk: {
                            readonly type: "object";
                            readonly required: readonly ["name", "mountPath"];
                            readonly properties: {
                                readonly name: {
                                    readonly type: "string";
                                };
                                readonly mountPath: {
                                    readonly type: "string";
                                };
                                readonly sizeGB: {
                                    readonly type: "integer";
                                    readonly minimum: 1;
                                    readonly description: "Defaults to 1";
                                };
                            };
                        };
                        readonly env: {
                            readonly type: "string";
                            readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                            readonly deprecated: true;
                            readonly description: "This field has been deprecated, runtime should be used in its place.";
                        };
                        readonly runtime: {
                            readonly type: "string";
                            readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                            readonly description: "Runtime";
                        };
                        readonly envSpecificDetails: {
                            readonly oneOf: readonly [{
                                readonly type: "object";
                                readonly properties: {
                                    readonly dockerCommand: {
                                        readonly type: "string";
                                    };
                                    readonly dockerContext: {
                                        readonly type: "string";
                                    };
                                    readonly dockerfilePath: {
                                        readonly type: "string";
                                        readonly description: "Defaults to \"./Dockerfile\"";
                                    };
                                    readonly registryCredentialId: {
                                        readonly type: "string";
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["buildCommand", "startCommand"];
                                readonly properties: {
                                    readonly buildCommand: {
                                        readonly type: "string";
                                    };
                                    readonly startCommand: {
                                        readonly type: "string";
                                    };
                                };
                                readonly description: "Fields for native environment (runtime) services";
                            }];
                        };
                        readonly numInstances: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly default: 1;
                            readonly description: "Defaults to 1";
                        };
                        readonly plan: {
                            readonly type: "string";
                            readonly enum: readonly ["starter", "standard", "pro", "pro_plus", "pro_max", "pro_ultra"];
                            readonly default: "starter";
                            readonly description: "Defaults to \"starter\"\n\nDefault: `starter`";
                        };
                        readonly preDeployCommand: {
                            readonly type: "string";
                        };
                        readonly pullRequestPreviewsEnabled: {
                            readonly type: "string";
                            readonly enum: readonly ["yes", "no"];
                            readonly default: "no";
                            readonly deprecated: true;
                            readonly description: "This field has been deprecated. previews.generation should be used in its place.\n\nDefault: `no`";
                        };
                        readonly previews: {
                            readonly type: "object";
                            readonly properties: {
                                readonly generation: {
                                    readonly type: "string";
                                    readonly enum: readonly ["off", "manual", "automatic"];
                                    readonly default: "off";
                                    readonly description: "Defaults to \"off\"\n\nDefault: `off`";
                                };
                            };
                        };
                        readonly region: {
                            readonly type: "string";
                            readonly enum: readonly ["frankfurt", "oregon", "ohio", "singapore", "virginia"];
                            readonly default: "oregon";
                            readonly description: "Defaults to \"oregon\"\n\nDefault: `oregon`";
                        };
                        readonly maxShutdownDelaySeconds: {
                            readonly type: "integer";
                            readonly description: "The maximum amount of time (in seconds) that Render waits for your application process to exit gracefully after sending it a SIGTERM signal.";
                            readonly minimum: 1;
                            readonly maximum: 300;
                            readonly default: 30;
                        };
                    };
                }, {
                    readonly type: "object";
                    readonly required: readonly ["runtime", "schedule"];
                    readonly properties: {
                        readonly env: {
                            readonly type: "string";
                            readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                            readonly deprecated: true;
                            readonly description: "This field has been deprecated, runtime should be used in its place.";
                        };
                        readonly runtime: {
                            readonly type: "string";
                            readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                            readonly description: "Runtime";
                        };
                        readonly envSpecificDetails: {
                            readonly oneOf: readonly [{
                                readonly type: "object";
                                readonly required: readonly ["dockerCommand", "dockerContext", "dockerfilePath"];
                                readonly properties: {
                                    readonly dockerCommand: {
                                        readonly type: "string";
                                    };
                                    readonly dockerContext: {
                                        readonly type: "string";
                                    };
                                    readonly dockerfilePath: {
                                        readonly type: "string";
                                    };
                                    readonly preDeployCommand: {
                                        readonly type: "string";
                                    };
                                    readonly registryCredential: {
                                        readonly type: "object";
                                        readonly required: readonly ["id", "name", "username", "registry", "updatedAt"];
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                                readonly description: "Unique identifier for this credential";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                                readonly description: "Descriptive name for this credential";
                                            };
                                            readonly registry: {
                                                readonly type: "string";
                                                readonly enum: readonly ["GITHUB", "GITLAB", "DOCKER", "GOOGLE_ARTIFACT", "AWS_ECR"];
                                                readonly description: "The registry to use this credential with";
                                            };
                                            readonly username: {
                                                readonly type: "string";
                                                readonly description: "The username associated with the credential";
                                            };
                                            readonly updatedAt: {
                                                readonly type: "string";
                                                readonly format: "date-time";
                                                readonly description: "Last updated time for the credential";
                                            };
                                        };
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["buildCommand", "startCommand"];
                                readonly properties: {
                                    readonly buildCommand: {
                                        readonly type: "string";
                                    };
                                    readonly startCommand: {
                                        readonly type: "string";
                                    };
                                    readonly preDeployCommand: {
                                        readonly type: "string";
                                    };
                                };
                            }];
                        };
                        readonly plan: {
                            readonly type: "string";
                            readonly enum: readonly ["starter", "standard", "pro", "pro_plus", "pro_max", "pro_ultra"];
                            readonly default: "starter";
                            readonly description: "Defaults to \"starter\"\n\nDefault: `starter`";
                        };
                        readonly region: {
                            readonly type: "string";
                            readonly enum: readonly ["frankfurt", "oregon", "ohio", "singapore", "virginia"];
                            readonly default: "oregon";
                            readonly description: "Defaults to \"oregon\"\n\nDefault: `oregon`";
                        };
                        readonly schedule: {
                            readonly type: "string";
                        };
                    };
                }];
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly properties: {
                readonly service: {
                    readonly type: "object";
                    readonly required: readonly ["id", "name", "ownerId", "type", "createdAt", "dashboardUrl", "updatedAt", "suspended", "suspenders", "autoDeploy", "notifyOnFail", "slug", "serviceDetails", "rootDir"];
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly autoDeploy: {
                            readonly type: "string";
                            readonly enum: readonly ["yes", "no"];
                            readonly default: "yes";
                            readonly description: "`yes` `no`";
                        };
                        readonly branch: {
                            readonly type: "string";
                        };
                        readonly buildFilter: {
                            readonly type: "object";
                            readonly required: readonly ["paths", "ignoredPaths"];
                            readonly properties: {
                                readonly paths: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                };
                                readonly ignoredPaths: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                        readonly createdAt: {
                            readonly type: "string";
                            readonly format: "date-time";
                        };
                        readonly dashboardUrl: {
                            readonly type: "string";
                            readonly description: "The URL to view the service in the Render Dashboard";
                        };
                        readonly environmentId: {
                            readonly type: "string";
                        };
                        readonly imagePath: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly notifyOnFail: {
                            readonly type: "string";
                            readonly enum: readonly ["default", "notify", "ignore"];
                            readonly description: "`default` `notify` `ignore`";
                        };
                        readonly ownerId: {
                            readonly type: "string";
                        };
                        readonly registryCredential: {
                            readonly type: "object";
                            readonly required: readonly ["id", "name"];
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                                readonly name: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly repo: {
                            readonly type: "string";
                            readonly examples: readonly ["https://github.com/render-examples/flask-hello-world"];
                        };
                        readonly rootDir: {
                            readonly type: "string";
                        };
                        readonly slug: {
                            readonly type: "string";
                        };
                        readonly suspended: {
                            readonly type: "string";
                            readonly enum: readonly ["suspended", "not_suspended"];
                            readonly description: "`suspended` `not_suspended`";
                        };
                        readonly suspenders: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["admin", "billing", "user", "parent_service", "unknown"];
                                readonly description: "`admin` `billing` `user` `parent_service` `unknown`";
                            };
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly enum: readonly ["static_site", "web_service", "private_service", "background_worker", "cron_job"];
                            readonly description: "`static_site` `web_service` `private_service` `background_worker` `cron_job`";
                        };
                        readonly updatedAt: {
                            readonly type: "string";
                            readonly format: "date-time";
                        };
                        readonly serviceDetails: {
                            readonly oneOf: readonly [{
                                readonly type: "object";
                                readonly required: readonly ["buildCommand", "publishPath", "url", "buildPlan"];
                                readonly properties: {
                                    readonly buildCommand: {
                                        readonly type: "string";
                                    };
                                    readonly parentServer: {
                                        readonly required: readonly ["id", "name"];
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                    readonly publishPath: {
                                        readonly type: "string";
                                    };
                                    readonly pullRequestPreviewsEnabled: {
                                        readonly type: "string";
                                        readonly enum: readonly ["yes", "no"];
                                        readonly default: "no";
                                        readonly deprecated: true;
                                        readonly description: "This field has been deprecated. previews.generation should be used in its place.\n\n`yes` `no`";
                                    };
                                    readonly previews: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly generation: {
                                                readonly type: "string";
                                                readonly enum: readonly ["off", "manual", "automatic"];
                                                readonly default: "off";
                                                readonly description: "Defaults to \"off\"\n\n`off` `manual` `automatic`";
                                            };
                                        };
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                    };
                                    readonly buildPlan: {
                                        readonly type: "string";
                                        readonly enum: readonly ["starter", "performance"];
                                        readonly default: "starter";
                                        readonly description: "`starter` `performance`";
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["env", "runtime", "envSpecificDetails", "plan", "region", "numInstances", "buildPlan", "healthCheckPath", "openPorts", "url"];
                                readonly properties: {
                                    readonly autoscaling: {
                                        readonly type: "object";
                                        readonly required: readonly ["enabled", "min", "max", "criteria"];
                                        readonly properties: {
                                            readonly enabled: {
                                                readonly type: "boolean";
                                                readonly default: false;
                                            };
                                            readonly min: {
                                                readonly type: "integer";
                                                readonly description: "The minimum number of instances for the service";
                                            };
                                            readonly max: {
                                                readonly type: "integer";
                                                readonly description: "The maximum number of instances for the service";
                                            };
                                            readonly criteria: {
                                                readonly type: "object";
                                                readonly required: readonly ["cpu", "memory"];
                                                readonly properties: {
                                                    readonly cpu: {
                                                        readonly type: "object";
                                                        readonly required: readonly ["enabled", "percentage"];
                                                        readonly properties: {
                                                            readonly enabled: {
                                                                readonly type: "boolean";
                                                                readonly default: false;
                                                            };
                                                            readonly percentage: {
                                                                readonly type: "integer";
                                                                readonly description: "Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.\n";
                                                            };
                                                        };
                                                    };
                                                    readonly memory: {
                                                        readonly type: "object";
                                                        readonly required: readonly ["enabled", "percentage"];
                                                        readonly properties: {
                                                            readonly enabled: {
                                                                readonly type: "boolean";
                                                                readonly default: false;
                                                            };
                                                            readonly percentage: {
                                                                readonly type: "integer";
                                                                readonly description: "Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.\n";
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    readonly disk: {
                                        readonly type: "object";
                                        readonly required: readonly ["id", "name", "sizeGB", "mountPath"];
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                                readonly pattern: "^dsk-[0-9a-z]{20}$";
                                                readonly examples: readonly ["dsk-cph1rs3idesc73a2b2mg"];
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                            readonly sizeGB: {
                                                readonly type: "integer";
                                            };
                                            readonly mountPath: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                    readonly env: {
                                        readonly type: "string";
                                        readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                                        readonly deprecated: true;
                                        readonly description: "This field has been deprecated, runtime should be used in its place.\n\n`docker` `elixir` `go` `node` `python` `ruby` `rust` `image`";
                                    };
                                    readonly envSpecificDetails: {
                                        readonly oneOf: readonly [{
                                            readonly type: "object";
                                            readonly required: readonly ["dockerCommand", "dockerContext", "dockerfilePath"];
                                            readonly properties: {
                                                readonly dockerCommand: {
                                                    readonly type: "string";
                                                };
                                                readonly dockerContext: {
                                                    readonly type: "string";
                                                };
                                                readonly dockerfilePath: {
                                                    readonly type: "string";
                                                };
                                                readonly preDeployCommand: {
                                                    readonly type: "string";
                                                };
                                                readonly registryCredential: {
                                                    readonly type: "object";
                                                    readonly required: readonly ["id", "name", "username", "registry", "updatedAt"];
                                                    readonly properties: {
                                                        readonly id: {
                                                            readonly type: "string";
                                                            readonly description: "Unique identifier for this credential";
                                                        };
                                                        readonly name: {
                                                            readonly type: "string";
                                                            readonly description: "Descriptive name for this credential";
                                                        };
                                                        readonly registry: {
                                                            readonly type: "string";
                                                            readonly enum: readonly ["GITHUB", "GITLAB", "DOCKER", "GOOGLE_ARTIFACT", "AWS_ECR"];
                                                            readonly description: "The registry to use this credential with\n\n`GITHUB` `GITLAB` `DOCKER` `GOOGLE_ARTIFACT` `AWS_ECR`";
                                                        };
                                                        readonly username: {
                                                            readonly type: "string";
                                                            readonly description: "The username associated with the credential";
                                                        };
                                                        readonly updatedAt: {
                                                            readonly type: "string";
                                                            readonly format: "date-time";
                                                            readonly description: "Last updated time for the credential";
                                                        };
                                                    };
                                                };
                                            };
                                        }, {
                                            readonly type: "object";
                                            readonly required: readonly ["buildCommand", "startCommand"];
                                            readonly properties: {
                                                readonly buildCommand: {
                                                    readonly type: "string";
                                                };
                                                readonly startCommand: {
                                                    readonly type: "string";
                                                };
                                                readonly preDeployCommand: {
                                                    readonly type: "string";
                                                };
                                            };
                                        }];
                                    };
                                    readonly healthCheckPath: {
                                        readonly type: "string";
                                    };
                                    readonly maintenanceMode: {
                                        readonly type: "object";
                                        readonly required: readonly ["enabled", "uri"];
                                        readonly properties: {
                                            readonly enabled: {
                                                readonly type: "boolean";
                                            };
                                            readonly uri: {
                                                readonly type: "string";
                                                readonly description: "The page to be served when [maintenance mode](https://docs.render.com/maintenance-mode) is enabled. When empty, the default maintenance mode page is served.";
                                            };
                                        };
                                    };
                                    readonly numInstances: {
                                        readonly type: "integer";
                                        readonly description: "For a *manually* scaled service, this is the number of instances the service is scaled to. DOES NOT indicate the number of running instances for an *autoscaled* service.";
                                    };
                                    readonly openPorts: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly required: readonly ["port", "protocol"];
                                            readonly properties: {
                                                readonly port: {
                                                    readonly type: "integer";
                                                    readonly examples: readonly [10000];
                                                };
                                                readonly protocol: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["TCP", "UDP"];
                                                    readonly description: "`TCP` `UDP`";
                                                };
                                            };
                                        };
                                    };
                                    readonly parentServer: {
                                        readonly required: readonly ["id", "name"];
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                    readonly plan: {
                                        readonly type: "string";
                                        readonly enum: readonly ["starter", "starter_plus", "standard", "standard_plus", "pro", "pro_plus", "pro_max", "pro_ultra", "free", "custom"];
                                        readonly description: "The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.\n\n`starter` `starter_plus` `standard` `standard_plus` `pro` `pro_plus` `pro_max` `pro_ultra` `free` `custom`";
                                        readonly examples: readonly ["starter"];
                                    };
                                    readonly pullRequestPreviewsEnabled: {
                                        readonly type: "string";
                                        readonly enum: readonly ["yes", "no"];
                                        readonly default: "no";
                                        readonly deprecated: true;
                                        readonly description: "This field has been deprecated. previews.generation should be used in its place.\n\n`yes` `no`";
                                    };
                                    readonly previews: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly generation: {
                                                readonly type: "string";
                                                readonly enum: readonly ["off", "manual", "automatic"];
                                                readonly default: "off";
                                                readonly description: "Defaults to \"off\"\n\n`off` `manual` `automatic`";
                                            };
                                        };
                                    };
                                    readonly region: {
                                        readonly type: "string";
                                        readonly enum: readonly ["frankfurt", "oregon", "ohio", "singapore", "virginia"];
                                        readonly default: "oregon";
                                        readonly description: "Defaults to \"oregon\"\n\n`frankfurt` `oregon` `ohio` `singapore` `virginia`";
                                    };
                                    readonly runtime: {
                                        readonly type: "string";
                                        readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                                        readonly description: "Runtime\n\n`docker` `elixir` `go` `node` `python` `ruby` `rust` `image`";
                                    };
                                    readonly sshAddress: {
                                        readonly type: "string";
                                        readonly description: "The SSH address for the service. Only present for services that have SSH enabled.";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                    };
                                    readonly buildPlan: {
                                        readonly type: "string";
                                        readonly enum: readonly ["starter", "performance"];
                                        readonly default: "starter";
                                        readonly description: "`starter` `performance`";
                                    };
                                    readonly maxShutdownDelaySeconds: {
                                        readonly type: "integer";
                                        readonly description: "The maximum amount of time (in seconds) that Render waits for your application process to exit gracefully after sending it a SIGTERM signal.";
                                        readonly minimum: 1;
                                        readonly maximum: 300;
                                        readonly default: 30;
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["env", "runtime", "envSpecificDetails", "plan", "region", "numInstances", "buildPlan", "openPorts", "url"];
                                readonly properties: {
                                    readonly autoscaling: {
                                        readonly type: "object";
                                        readonly required: readonly ["enabled", "min", "max", "criteria"];
                                        readonly properties: {
                                            readonly enabled: {
                                                readonly type: "boolean";
                                                readonly default: false;
                                            };
                                            readonly min: {
                                                readonly type: "integer";
                                                readonly description: "The minimum number of instances for the service";
                                            };
                                            readonly max: {
                                                readonly type: "integer";
                                                readonly description: "The maximum number of instances for the service";
                                            };
                                            readonly criteria: {
                                                readonly type: "object";
                                                readonly required: readonly ["cpu", "memory"];
                                                readonly properties: {
                                                    readonly cpu: {
                                                        readonly type: "object";
                                                        readonly required: readonly ["enabled", "percentage"];
                                                        readonly properties: {
                                                            readonly enabled: {
                                                                readonly type: "boolean";
                                                                readonly default: false;
                                                            };
                                                            readonly percentage: {
                                                                readonly type: "integer";
                                                                readonly description: "Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.\n";
                                                            };
                                                        };
                                                    };
                                                    readonly memory: {
                                                        readonly type: "object";
                                                        readonly required: readonly ["enabled", "percentage"];
                                                        readonly properties: {
                                                            readonly enabled: {
                                                                readonly type: "boolean";
                                                                readonly default: false;
                                                            };
                                                            readonly percentage: {
                                                                readonly type: "integer";
                                                                readonly description: "Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.\n";
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    readonly disk: {
                                        readonly type: "object";
                                        readonly required: readonly ["id", "name", "sizeGB", "mountPath"];
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                                readonly pattern: "^dsk-[0-9a-z]{20}$";
                                                readonly examples: readonly ["dsk-cph1rs3idesc73a2b2mg"];
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                            readonly sizeGB: {
                                                readonly type: "integer";
                                            };
                                            readonly mountPath: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                    readonly env: {
                                        readonly type: "string";
                                        readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                                        readonly deprecated: true;
                                        readonly description: "This field has been deprecated, runtime should be used in its place.\n\n`docker` `elixir` `go` `node` `python` `ruby` `rust` `image`";
                                    };
                                    readonly envSpecificDetails: {
                                        readonly oneOf: readonly [{
                                            readonly type: "object";
                                            readonly required: readonly ["dockerCommand", "dockerContext", "dockerfilePath"];
                                            readonly properties: {
                                                readonly dockerCommand: {
                                                    readonly type: "string";
                                                };
                                                readonly dockerContext: {
                                                    readonly type: "string";
                                                };
                                                readonly dockerfilePath: {
                                                    readonly type: "string";
                                                };
                                                readonly preDeployCommand: {
                                                    readonly type: "string";
                                                };
                                                readonly registryCredential: {
                                                    readonly type: "object";
                                                    readonly required: readonly ["id", "name", "username", "registry", "updatedAt"];
                                                    readonly properties: {
                                                        readonly id: {
                                                            readonly type: "string";
                                                            readonly description: "Unique identifier for this credential";
                                                        };
                                                        readonly name: {
                                                            readonly type: "string";
                                                            readonly description: "Descriptive name for this credential";
                                                        };
                                                        readonly registry: {
                                                            readonly type: "string";
                                                            readonly enum: readonly ["GITHUB", "GITLAB", "DOCKER", "GOOGLE_ARTIFACT", "AWS_ECR"];
                                                            readonly description: "The registry to use this credential with\n\n`GITHUB` `GITLAB` `DOCKER` `GOOGLE_ARTIFACT` `AWS_ECR`";
                                                        };
                                                        readonly username: {
                                                            readonly type: "string";
                                                            readonly description: "The username associated with the credential";
                                                        };
                                                        readonly updatedAt: {
                                                            readonly type: "string";
                                                            readonly format: "date-time";
                                                            readonly description: "Last updated time for the credential";
                                                        };
                                                    };
                                                };
                                            };
                                        }, {
                                            readonly type: "object";
                                            readonly required: readonly ["buildCommand", "startCommand"];
                                            readonly properties: {
                                                readonly buildCommand: {
                                                    readonly type: "string";
                                                };
                                                readonly startCommand: {
                                                    readonly type: "string";
                                                };
                                                readonly preDeployCommand: {
                                                    readonly type: "string";
                                                };
                                            };
                                        }];
                                    };
                                    readonly numInstances: {
                                        readonly type: "integer";
                                        readonly description: "For a *manually* scaled service, this is the number of instances the service is scaled to. DOES NOT indicate the number of running instances for an *autoscaled* service.";
                                    };
                                    readonly openPorts: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly required: readonly ["port", "protocol"];
                                            readonly properties: {
                                                readonly port: {
                                                    readonly type: "integer";
                                                    readonly examples: readonly [10000];
                                                };
                                                readonly protocol: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["TCP", "UDP"];
                                                    readonly description: "`TCP` `UDP`";
                                                };
                                            };
                                        };
                                    };
                                    readonly parentServer: {
                                        readonly required: readonly ["id", "name"];
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                    readonly plan: {
                                        readonly type: "string";
                                        readonly enum: readonly ["starter", "starter_plus", "standard", "standard_plus", "pro", "pro_plus", "pro_max", "pro_ultra", "free", "custom"];
                                        readonly description: "The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.\n\n`starter` `starter_plus` `standard` `standard_plus` `pro` `pro_plus` `pro_max` `pro_ultra` `free` `custom`";
                                        readonly examples: readonly ["starter"];
                                    };
                                    readonly pullRequestPreviewsEnabled: {
                                        readonly type: "string";
                                        readonly enum: readonly ["yes", "no"];
                                        readonly default: "no";
                                        readonly deprecated: true;
                                        readonly description: "This field has been deprecated. previews.generation should be used in its place.\n\n`yes` `no`";
                                    };
                                    readonly previews: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly generation: {
                                                readonly type: "string";
                                                readonly enum: readonly ["off", "manual", "automatic"];
                                                readonly default: "off";
                                                readonly description: "Defaults to \"off\"\n\n`off` `manual` `automatic`";
                                            };
                                        };
                                    };
                                    readonly region: {
                                        readonly type: "string";
                                        readonly enum: readonly ["frankfurt", "oregon", "ohio", "singapore", "virginia"];
                                        readonly default: "oregon";
                                        readonly description: "Defaults to \"oregon\"\n\n`frankfurt` `oregon` `ohio` `singapore` `virginia`";
                                    };
                                    readonly runtime: {
                                        readonly type: "string";
                                        readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                                        readonly description: "Runtime\n\n`docker` `elixir` `go` `node` `python` `ruby` `rust` `image`";
                                    };
                                    readonly sshAddress: {
                                        readonly type: "string";
                                        readonly description: "The SSH address for the service. Only present for services that have SSH enabled.";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                    };
                                    readonly buildPlan: {
                                        readonly type: "string";
                                        readonly enum: readonly ["starter", "performance"];
                                        readonly default: "starter";
                                        readonly description: "`starter` `performance`";
                                    };
                                    readonly maxShutdownDelaySeconds: {
                                        readonly type: "integer";
                                        readonly description: "The maximum amount of time (in seconds) that Render waits for your application process to exit gracefully after sending it a SIGTERM signal.";
                                        readonly minimum: 1;
                                        readonly maximum: 300;
                                        readonly default: 30;
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["env", "runtime", "envSpecificDetails", "plan", "region", "numInstances", "buildPlan"];
                                readonly properties: {
                                    readonly autoscaling: {
                                        readonly type: "object";
                                        readonly required: readonly ["enabled", "min", "max", "criteria"];
                                        readonly properties: {
                                            readonly enabled: {
                                                readonly type: "boolean";
                                                readonly default: false;
                                            };
                                            readonly min: {
                                                readonly type: "integer";
                                                readonly description: "The minimum number of instances for the service";
                                            };
                                            readonly max: {
                                                readonly type: "integer";
                                                readonly description: "The maximum number of instances for the service";
                                            };
                                            readonly criteria: {
                                                readonly type: "object";
                                                readonly required: readonly ["cpu", "memory"];
                                                readonly properties: {
                                                    readonly cpu: {
                                                        readonly type: "object";
                                                        readonly required: readonly ["enabled", "percentage"];
                                                        readonly properties: {
                                                            readonly enabled: {
                                                                readonly type: "boolean";
                                                                readonly default: false;
                                                            };
                                                            readonly percentage: {
                                                                readonly type: "integer";
                                                                readonly description: "Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.\n";
                                                            };
                                                        };
                                                    };
                                                    readonly memory: {
                                                        readonly type: "object";
                                                        readonly required: readonly ["enabled", "percentage"];
                                                        readonly properties: {
                                                            readonly enabled: {
                                                                readonly type: "boolean";
                                                                readonly default: false;
                                                            };
                                                            readonly percentage: {
                                                                readonly type: "integer";
                                                                readonly description: "Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.\n";
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    readonly disk: {
                                        readonly type: "object";
                                        readonly required: readonly ["id", "name", "sizeGB", "mountPath"];
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                                readonly pattern: "^dsk-[0-9a-z]{20}$";
                                                readonly examples: readonly ["dsk-cph1rs3idesc73a2b2mg"];
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                            readonly sizeGB: {
                                                readonly type: "integer";
                                            };
                                            readonly mountPath: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                    readonly env: {
                                        readonly type: "string";
                                        readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                                        readonly deprecated: true;
                                        readonly description: "This field has been deprecated, runtime should be used in its place.\n\n`docker` `elixir` `go` `node` `python` `ruby` `rust` `image`";
                                    };
                                    readonly envSpecificDetails: {
                                        readonly oneOf: readonly [{
                                            readonly type: "object";
                                            readonly required: readonly ["dockerCommand", "dockerContext", "dockerfilePath"];
                                            readonly properties: {
                                                readonly dockerCommand: {
                                                    readonly type: "string";
                                                };
                                                readonly dockerContext: {
                                                    readonly type: "string";
                                                };
                                                readonly dockerfilePath: {
                                                    readonly type: "string";
                                                };
                                                readonly preDeployCommand: {
                                                    readonly type: "string";
                                                };
                                                readonly registryCredential: {
                                                    readonly type: "object";
                                                    readonly required: readonly ["id", "name", "username", "registry", "updatedAt"];
                                                    readonly properties: {
                                                        readonly id: {
                                                            readonly type: "string";
                                                            readonly description: "Unique identifier for this credential";
                                                        };
                                                        readonly name: {
                                                            readonly type: "string";
                                                            readonly description: "Descriptive name for this credential";
                                                        };
                                                        readonly registry: {
                                                            readonly type: "string";
                                                            readonly enum: readonly ["GITHUB", "GITLAB", "DOCKER", "GOOGLE_ARTIFACT", "AWS_ECR"];
                                                            readonly description: "The registry to use this credential with\n\n`GITHUB` `GITLAB` `DOCKER` `GOOGLE_ARTIFACT` `AWS_ECR`";
                                                        };
                                                        readonly username: {
                                                            readonly type: "string";
                                                            readonly description: "The username associated with the credential";
                                                        };
                                                        readonly updatedAt: {
                                                            readonly type: "string";
                                                            readonly format: "date-time";
                                                            readonly description: "Last updated time for the credential";
                                                        };
                                                    };
                                                };
                                            };
                                        }, {
                                            readonly type: "object";
                                            readonly required: readonly ["buildCommand", "startCommand"];
                                            readonly properties: {
                                                readonly buildCommand: {
                                                    readonly type: "string";
                                                };
                                                readonly startCommand: {
                                                    readonly type: "string";
                                                };
                                                readonly preDeployCommand: {
                                                    readonly type: "string";
                                                };
                                            };
                                        }];
                                    };
                                    readonly numInstances: {
                                        readonly type: "integer";
                                        readonly description: "For a *manually* scaled service, this is the number of instances the service is scaled to. DOES NOT indicate the number of running instances for an *autoscaled* service.";
                                    };
                                    readonly parentServer: {
                                        readonly required: readonly ["id", "name"];
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                    readonly plan: {
                                        readonly type: "string";
                                        readonly enum: readonly ["starter", "starter_plus", "standard", "standard_plus", "pro", "pro_plus", "pro_max", "pro_ultra", "free", "custom"];
                                        readonly description: "The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.\n\n`starter` `starter_plus` `standard` `standard_plus` `pro` `pro_plus` `pro_max` `pro_ultra` `free` `custom`";
                                        readonly examples: readonly ["starter"];
                                    };
                                    readonly pullRequestPreviewsEnabled: {
                                        readonly type: "string";
                                        readonly enum: readonly ["yes", "no"];
                                        readonly default: "no";
                                        readonly deprecated: true;
                                        readonly description: "This field has been deprecated. previews.generation should be used in its place.\n\n`yes` `no`";
                                    };
                                    readonly previews: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly generation: {
                                                readonly type: "string";
                                                readonly enum: readonly ["off", "manual", "automatic"];
                                                readonly default: "off";
                                                readonly description: "Defaults to \"off\"\n\n`off` `manual` `automatic`";
                                            };
                                        };
                                    };
                                    readonly region: {
                                        readonly type: "string";
                                        readonly enum: readonly ["frankfurt", "oregon", "ohio", "singapore", "virginia"];
                                        readonly default: "oregon";
                                        readonly description: "Defaults to \"oregon\"\n\n`frankfurt` `oregon` `ohio` `singapore` `virginia`";
                                    };
                                    readonly runtime: {
                                        readonly type: "string";
                                        readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                                        readonly description: "Runtime\n\n`docker` `elixir` `go` `node` `python` `ruby` `rust` `image`";
                                    };
                                    readonly sshAddress: {
                                        readonly type: "string";
                                        readonly description: "The SSH address for the service. Only present for services that have SSH enabled.";
                                    };
                                    readonly buildPlan: {
                                        readonly type: "string";
                                        readonly enum: readonly ["starter", "performance"];
                                        readonly default: "starter";
                                        readonly description: "`starter` `performance`";
                                    };
                                    readonly maxShutdownDelaySeconds: {
                                        readonly type: "integer";
                                        readonly description: "The maximum amount of time (in seconds) that Render waits for your application process to exit gracefully after sending it a SIGTERM signal.";
                                        readonly minimum: 1;
                                        readonly maximum: 300;
                                        readonly default: 30;
                                    };
                                };
                            }, {
                                readonly required: readonly ["env", "runtime", "envSpecificDetails", "plan", "region", "schedule", "buildPlan"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly env: {
                                        readonly type: "string";
                                        readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                                        readonly deprecated: true;
                                        readonly description: "This field has been deprecated, runtime should be used in its place.\n\n`docker` `elixir` `go` `node` `python` `ruby` `rust` `image`";
                                    };
                                    readonly envSpecificDetails: {
                                        readonly oneOf: readonly [{
                                            readonly type: "object";
                                            readonly required: readonly ["dockerCommand", "dockerContext", "dockerfilePath"];
                                            readonly properties: {
                                                readonly dockerCommand: {
                                                    readonly type: "string";
                                                };
                                                readonly dockerContext: {
                                                    readonly type: "string";
                                                };
                                                readonly dockerfilePath: {
                                                    readonly type: "string";
                                                };
                                                readonly preDeployCommand: {
                                                    readonly type: "string";
                                                };
                                                readonly registryCredential: {
                                                    readonly type: "object";
                                                    readonly required: readonly ["id", "name", "username", "registry", "updatedAt"];
                                                    readonly properties: {
                                                        readonly id: {
                                                            readonly type: "string";
                                                            readonly description: "Unique identifier for this credential";
                                                        };
                                                        readonly name: {
                                                            readonly type: "string";
                                                            readonly description: "Descriptive name for this credential";
                                                        };
                                                        readonly registry: {
                                                            readonly type: "string";
                                                            readonly enum: readonly ["GITHUB", "GITLAB", "DOCKER", "GOOGLE_ARTIFACT", "AWS_ECR"];
                                                            readonly description: "The registry to use this credential with\n\n`GITHUB` `GITLAB` `DOCKER` `GOOGLE_ARTIFACT` `AWS_ECR`";
                                                        };
                                                        readonly username: {
                                                            readonly type: "string";
                                                            readonly description: "The username associated with the credential";
                                                        };
                                                        readonly updatedAt: {
                                                            readonly type: "string";
                                                            readonly format: "date-time";
                                                            readonly description: "Last updated time for the credential";
                                                        };
                                                    };
                                                };
                                            };
                                        }, {
                                            readonly type: "object";
                                            readonly required: readonly ["buildCommand", "startCommand"];
                                            readonly properties: {
                                                readonly buildCommand: {
                                                    readonly type: "string";
                                                };
                                                readonly startCommand: {
                                                    readonly type: "string";
                                                };
                                                readonly preDeployCommand: {
                                                    readonly type: "string";
                                                };
                                            };
                                        }];
                                    };
                                    readonly lastSuccessfulRunAt: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                    };
                                    readonly plan: {
                                        readonly type: "string";
                                        readonly enum: readonly ["starter", "starter_plus", "standard", "standard_plus", "pro", "pro_plus", "pro_max", "pro_ultra", "free", "custom"];
                                        readonly description: "The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.\n\n`starter` `starter_plus` `standard` `standard_plus` `pro` `pro_plus` `pro_max` `pro_ultra` `free` `custom`";
                                        readonly examples: readonly ["starter"];
                                    };
                                    readonly region: {
                                        readonly type: "string";
                                        readonly enum: readonly ["frankfurt", "oregon", "ohio", "singapore", "virginia"];
                                        readonly default: "oregon";
                                        readonly description: "Defaults to \"oregon\"\n\n`frankfurt` `oregon` `ohio` `singapore` `virginia`";
                                    };
                                    readonly runtime: {
                                        readonly type: "string";
                                        readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                                        readonly description: "Runtime\n\n`docker` `elixir` `go` `node` `python` `ruby` `rust` `image`";
                                    };
                                    readonly schedule: {
                                        readonly type: "string";
                                    };
                                    readonly buildPlan: {
                                        readonly type: "string";
                                        readonly enum: readonly ["starter", "performance"];
                                        readonly default: "starter";
                                        readonly description: "`starter` `performance`";
                                    };
                                };
                            }];
                        };
                    };
                };
                readonly deployId: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "402": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "409": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const DeleteAutoscalingConfig: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly serviceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the service";
                };
            };
            readonly required: readonly ["serviceId"];
        }];
    };
    readonly response: {
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const DeleteCustomDomain: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly serviceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the service";
                };
                readonly customDomainIdOrName: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID or name of the custom domain";
                };
            };
            readonly required: readonly ["serviceId", "customDomainIdOrName"];
        }];
    };
    readonly response: {
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const DeleteDisk: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly diskId: {
                    readonly type: "string";
                    readonly pattern: "^dsk-[0-9a-z]{20}$";
                    readonly examples: readonly ["dsk-cph1rs3idesc73a2b2mg"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the disk";
                };
            };
            readonly required: readonly ["diskId"];
        }];
    };
    readonly response: {
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const DeleteEnvGroup: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly envGroupId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["envGroupId"];
        }];
    };
    readonly response: {
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const DeleteEnvGroupEnvVar: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly envGroupId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly envVarKey: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The name of the environment variable";
                };
            };
            readonly required: readonly ["envGroupId", "envVarKey"];
        }];
    };
    readonly response: {
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const DeleteEnvGroupSecretFile: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly envGroupId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for resources that belong to an environment group";
                };
                readonly secretFileName: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The name of the secret file";
                };
            };
            readonly required: readonly ["envGroupId", "secretFileName"];
        }];
    };
    readonly response: {
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const DeleteEnvVar: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly serviceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the service";
                };
                readonly envVarKey: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The name of the environment variable";
                };
            };
            readonly required: readonly ["serviceId", "envVarKey"];
        }];
    };
    readonly response: {
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const DeleteEnvironment: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly environmentId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["environmentId"];
        }];
    };
    readonly response: {
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const DeleteHeader: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly serviceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the service";
                };
                readonly headerId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The id of the header";
                };
            };
            readonly required: readonly ["serviceId", "headerId"];
        }];
    };
    readonly response: {
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const DeleteOwnerLogStream: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly ownerId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the owner (team or personal user) whose log streams should be returned";
                };
            };
            readonly required: readonly ["ownerId"];
        }];
    };
    readonly response: {
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const DeletePostgres: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly postgresId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["postgresId"];
        }];
    };
    readonly response: {
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const DeleteProject: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly projectId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["projectId"];
        }];
    };
    readonly response: {
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const DeleteRedis: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly redisId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["redisId"];
        }];
    };
    readonly response: {
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const DeleteRegistryCredential: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly registryCredentialId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the registry credential";
                };
            };
            readonly required: readonly ["registryCredentialId"];
        }];
    };
    readonly response: {
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const DeleteResourceLogStream: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly resourceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the resource (server, cron job, postgres, or redis) whose log streams should be returned";
                };
            };
            readonly required: readonly ["resourceId"];
        }];
    };
    readonly response: {
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const DeleteRoute: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly serviceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the service";
                };
                readonly routeId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The id of the route";
                };
            };
            readonly required: readonly ["serviceId", "routeId"];
        }];
    };
    readonly response: {
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const DeleteSecretFile: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly serviceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the service";
                };
                readonly secretFileName: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The file name of the secret file";
                };
            };
            readonly required: readonly ["serviceId", "secretFileName"];
        }];
    };
    readonly response: {
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const DeleteService: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly serviceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the service";
                };
            };
            readonly required: readonly ["serviceId"];
        }];
    };
    readonly response: {
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const DisconnectBlueprint: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly blueprintId: {
                    readonly type: "string";
                    readonly pattern: "^exs-[0-9a-z]{20}$";
                    readonly examples: readonly ["exs-cph1rs3idesc73a2b2mg"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the blueprint";
                };
            };
            readonly required: readonly ["blueprintId"];
        }];
    };
    readonly response: {
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const FailoverPostgres: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly postgresId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["postgresId"];
        }];
    };
    readonly response: {
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetActiveConnections: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly startTime: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Epoch/Unix timestamp of end of time range to return. Defaults to `now() - 1 hour`.";
                };
                readonly endTime: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:30:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Epoch/Unix timestamp of end of time range to return. Defaults to `now()`.";
                };
                readonly resolutionSeconds: {
                    readonly type: "number";
                    readonly minimum: 30;
                    readonly default: 60;
                    readonly examples: readonly [60];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The resolution of the returned data";
                };
                readonly resource: {
                    readonly type: "string";
                    readonly examples: readonly ["dpg-xxxxx,red-xxxxx"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Resource ID to query. When multiple resource query params are provided, they are ORed together. Resources Postgres ids or Redis ids";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly description: "A collection of time series";
            readonly required: readonly ["items"];
            readonly items: {
                readonly type: "object";
                readonly description: "A time series data point";
                readonly required: readonly ["labels", "values", "unit"];
                readonly properties: {
                    readonly labels: {
                        readonly type: "array";
                        readonly description: "List of labels describing the time series";
                        readonly items: {
                            readonly type: "object";
                            readonly description: "A time series datapoint label";
                            readonly required: readonly ["field", "value"];
                            readonly properties: {
                                readonly field: {
                                    readonly type: "string";
                                    readonly examples: readonly ["service"];
                                };
                                readonly value: {
                                    readonly type: "string";
                                    readonly examples: readonly ["srv-xxxxx"];
                                };
                            };
                        };
                    };
                    readonly values: {
                        readonly type: "array";
                        readonly description: "The values of the time series";
                        readonly items: {
                            readonly description: "A time series datapoint value";
                            readonly type: "object";
                            readonly required: readonly ["timestamp", "value", "unit"];
                            readonly properties: {
                                readonly timestamp: {
                                    readonly type: "string";
                                    readonly format: "date-time";
                                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                                };
                                readonly value: {
                                    readonly type: "number";
                                    readonly examples: readonly [1];
                                };
                            };
                        };
                    };
                    readonly unit: {
                        readonly type: "string";
                        readonly examples: readonly ["GB"];
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetBandwidth: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly startTime: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Epoch/Unix timestamp of end of time range to return. Defaults to `now() - 1 hour`.";
                };
                readonly endTime: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:30:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Epoch/Unix timestamp of end of time range to return. Defaults to `now()`.";
                };
                readonly resource: {
                    readonly type: "string";
                    readonly examples: readonly ["srv-xxxxx"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Service ID to query. When multiple service ids are provided, they are ORed together";
                };
                readonly service: {
                    readonly type: "string";
                    readonly deprecated: true;
                    readonly examples: readonly ["srv-xxxxx"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "This parameter is deprecated. Please use `resource` instead";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly description: "A collection of time series";
            readonly required: readonly ["items"];
            readonly items: {
                readonly type: "object";
                readonly description: "A time series data point";
                readonly required: readonly ["labels", "values", "unit"];
                readonly properties: {
                    readonly labels: {
                        readonly type: "array";
                        readonly description: "List of labels describing the time series";
                        readonly items: {
                            readonly type: "object";
                            readonly description: "A time series datapoint label";
                            readonly required: readonly ["field", "value"];
                            readonly properties: {
                                readonly field: {
                                    readonly type: "string";
                                    readonly examples: readonly ["service"];
                                };
                                readonly value: {
                                    readonly type: "string";
                                    readonly examples: readonly ["srv-xxxxx"];
                                };
                            };
                        };
                    };
                    readonly values: {
                        readonly type: "array";
                        readonly description: "The values of the time series";
                        readonly items: {
                            readonly description: "A time series datapoint value";
                            readonly type: "object";
                            readonly required: readonly ["timestamp", "value", "unit"];
                            readonly properties: {
                                readonly timestamp: {
                                    readonly type: "string";
                                    readonly format: "date-time";
                                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                                };
                                readonly value: {
                                    readonly type: "number";
                                    readonly examples: readonly [1];
                                };
                            };
                        };
                    };
                    readonly unit: {
                        readonly type: "string";
                        readonly examples: readonly ["GB"];
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetCpu: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly startTime: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Epoch/Unix timestamp of end of time range to return. Defaults to `now() - 1 hour`.";
                };
                readonly endTime: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:30:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Epoch/Unix timestamp of end of time range to return. Defaults to `now()`.";
                };
                readonly resolutionSeconds: {
                    readonly type: "number";
                    readonly minimum: 30;
                    readonly default: 60;
                    readonly examples: readonly [60];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The resolution of the returned data";
                };
                readonly resource: {
                    readonly type: "string";
                    readonly examples: readonly ["srv-xxxxx,dpg-xxxxx,red-xxxxx"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Resource ID to query. When multiple resource query params are provided, they are ORed together. Resources can be service ids, Postgres ids, or Redis ids";
                };
                readonly service: {
                    readonly type: "string";
                    readonly deprecated: true;
                    readonly examples: readonly ["srv-xxxxx"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "This parameter is deprecated. Please use `resource` instead";
                };
                readonly instance: {
                    readonly type: "string";
                    readonly examples: readonly ["srv-xxxxx-yyyy"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Instance ID to query. When multiple instance ID query params are provided, they are ORed together";
                };
                readonly aggregationMethod: {
                    readonly type: "string";
                    readonly enum: readonly ["AVG", "MAX", "MIN"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The aggregation method to apply to multiple time series";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly description: "A collection of time series";
            readonly required: readonly ["items"];
            readonly items: {
                readonly type: "object";
                readonly description: "A time series data point";
                readonly required: readonly ["labels", "values", "unit"];
                readonly properties: {
                    readonly labels: {
                        readonly type: "array";
                        readonly description: "List of labels describing the time series";
                        readonly items: {
                            readonly type: "object";
                            readonly description: "A time series datapoint label";
                            readonly required: readonly ["field", "value"];
                            readonly properties: {
                                readonly field: {
                                    readonly type: "string";
                                    readonly examples: readonly ["service"];
                                };
                                readonly value: {
                                    readonly type: "string";
                                    readonly examples: readonly ["srv-xxxxx"];
                                };
                            };
                        };
                    };
                    readonly values: {
                        readonly type: "array";
                        readonly description: "The values of the time series";
                        readonly items: {
                            readonly description: "A time series datapoint value";
                            readonly type: "object";
                            readonly required: readonly ["timestamp", "value", "unit"];
                            readonly properties: {
                                readonly timestamp: {
                                    readonly type: "string";
                                    readonly format: "date-time";
                                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                                };
                                readonly value: {
                                    readonly type: "number";
                                    readonly examples: readonly [1];
                                };
                            };
                        };
                    };
                    readonly unit: {
                        readonly type: "string";
                        readonly examples: readonly ["GB"];
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetCpuLimit: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly startTime: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Epoch/Unix timestamp of end of time range to return. Defaults to `now() - 1 hour`.";
                };
                readonly endTime: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:30:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Epoch/Unix timestamp of end of time range to return. Defaults to `now()`.";
                };
                readonly resolutionSeconds: {
                    readonly type: "number";
                    readonly minimum: 30;
                    readonly default: 60;
                    readonly examples: readonly [60];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The resolution of the returned data";
                };
                readonly resource: {
                    readonly type: "string";
                    readonly examples: readonly ["srv-xxxxx,dpg-xxxxx,red-xxxxx"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Resource ID to query. When multiple resource query params are provided, they are ORed together. Resources can be service ids, Postgres ids, or Redis ids";
                };
                readonly service: {
                    readonly type: "string";
                    readonly deprecated: true;
                    readonly examples: readonly ["srv-xxxxx"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "This parameter is deprecated. Please use `resource` instead";
                };
                readonly instance: {
                    readonly type: "string";
                    readonly examples: readonly ["srv-xxxxx-yyyy"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Instance ID to query. When multiple instance ID query params are provided, they are ORed together";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly description: "A collection of time series";
            readonly required: readonly ["items"];
            readonly items: {
                readonly type: "object";
                readonly description: "A time series data point";
                readonly required: readonly ["labels", "values", "unit"];
                readonly properties: {
                    readonly labels: {
                        readonly type: "array";
                        readonly description: "List of labels describing the time series";
                        readonly items: {
                            readonly type: "object";
                            readonly description: "A time series datapoint label";
                            readonly required: readonly ["field", "value"];
                            readonly properties: {
                                readonly field: {
                                    readonly type: "string";
                                    readonly examples: readonly ["service"];
                                };
                                readonly value: {
                                    readonly type: "string";
                                    readonly examples: readonly ["srv-xxxxx"];
                                };
                            };
                        };
                    };
                    readonly values: {
                        readonly type: "array";
                        readonly description: "The values of the time series";
                        readonly items: {
                            readonly description: "A time series datapoint value";
                            readonly type: "object";
                            readonly required: readonly ["timestamp", "value", "unit"];
                            readonly properties: {
                                readonly timestamp: {
                                    readonly type: "string";
                                    readonly format: "date-time";
                                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                                };
                                readonly value: {
                                    readonly type: "number";
                                    readonly examples: readonly [1];
                                };
                            };
                        };
                    };
                    readonly unit: {
                        readonly type: "string";
                        readonly examples: readonly ["GB"];
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetCpuTarget: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly startTime: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Epoch/Unix timestamp of end of time range to return. Defaults to `now() - 1 hour`.";
                };
                readonly endTime: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:30:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Epoch/Unix timestamp of end of time range to return. Defaults to `now()`.";
                };
                readonly resolutionSeconds: {
                    readonly type: "number";
                    readonly minimum: 30;
                    readonly default: 60;
                    readonly examples: readonly [60];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The resolution of the returned data";
                };
                readonly resource: {
                    readonly type: "string";
                    readonly examples: readonly ["srv-xxxxx,dpg-xxxxx,red-xxxxx"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Resource ID to query. When multiple resource query params are provided, they are ORed together. Resources can be service ids, Postgres ids, or Redis ids";
                };
                readonly service: {
                    readonly type: "string";
                    readonly deprecated: true;
                    readonly examples: readonly ["srv-xxxxx"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "This parameter is deprecated. Please use `resource` instead";
                };
                readonly instance: {
                    readonly type: "string";
                    readonly examples: readonly ["srv-xxxxx-yyyy"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Instance ID to query. When multiple instance ID query params are provided, they are ORed together";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly description: "A collection of time series";
            readonly required: readonly ["items"];
            readonly items: {
                readonly type: "object";
                readonly description: "A time series data point";
                readonly required: readonly ["labels", "values", "unit"];
                readonly properties: {
                    readonly labels: {
                        readonly type: "array";
                        readonly description: "List of labels describing the time series";
                        readonly items: {
                            readonly type: "object";
                            readonly description: "A time series datapoint label";
                            readonly required: readonly ["field", "value"];
                            readonly properties: {
                                readonly field: {
                                    readonly type: "string";
                                    readonly examples: readonly ["service"];
                                };
                                readonly value: {
                                    readonly type: "string";
                                    readonly examples: readonly ["srv-xxxxx"];
                                };
                            };
                        };
                    };
                    readonly values: {
                        readonly type: "array";
                        readonly description: "The values of the time series";
                        readonly items: {
                            readonly description: "A time series datapoint value";
                            readonly type: "object";
                            readonly required: readonly ["timestamp", "value", "unit"];
                            readonly properties: {
                                readonly timestamp: {
                                    readonly type: "string";
                                    readonly format: "date-time";
                                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                                };
                                readonly value: {
                                    readonly type: "number";
                                    readonly examples: readonly [1];
                                };
                            };
                        };
                    };
                    readonly unit: {
                        readonly type: "string";
                        readonly examples: readonly ["GB"];
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetDiskCapacity: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly startTime: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Epoch/Unix timestamp of end of time range to return. Defaults to `now() - 1 hour`.";
                };
                readonly endTime: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:30:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Epoch/Unix timestamp of end of time range to return. Defaults to `now()`.";
                };
                readonly resolutionSeconds: {
                    readonly type: "number";
                    readonly minimum: 30;
                    readonly default: 60;
                    readonly examples: readonly [60];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The resolution of the returned data";
                };
                readonly resource: {
                    readonly type: "string";
                    readonly examples: readonly ["srv-xxxxx,dpg-xxxxx,red-xxxxx"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Resource ID to query. When multiple resource query params are provided, they are ORed together. Resources can be service ids, Postgres ids, or Redis ids";
                };
                readonly service: {
                    readonly type: "string";
                    readonly deprecated: true;
                    readonly examples: readonly ["srv-xxxxx"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "This parameter is deprecated. Please use `resource` instead";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly description: "A collection of time series";
            readonly required: readonly ["items"];
            readonly items: {
                readonly type: "object";
                readonly description: "A time series data point";
                readonly required: readonly ["labels", "values", "unit"];
                readonly properties: {
                    readonly labels: {
                        readonly type: "array";
                        readonly description: "List of labels describing the time series";
                        readonly items: {
                            readonly type: "object";
                            readonly description: "A time series datapoint label";
                            readonly required: readonly ["field", "value"];
                            readonly properties: {
                                readonly field: {
                                    readonly type: "string";
                                    readonly examples: readonly ["service"];
                                };
                                readonly value: {
                                    readonly type: "string";
                                    readonly examples: readonly ["srv-xxxxx"];
                                };
                            };
                        };
                    };
                    readonly values: {
                        readonly type: "array";
                        readonly description: "The values of the time series";
                        readonly items: {
                            readonly description: "A time series datapoint value";
                            readonly type: "object";
                            readonly required: readonly ["timestamp", "value", "unit"];
                            readonly properties: {
                                readonly timestamp: {
                                    readonly type: "string";
                                    readonly format: "date-time";
                                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                                };
                                readonly value: {
                                    readonly type: "number";
                                    readonly examples: readonly [1];
                                };
                            };
                        };
                    };
                    readonly unit: {
                        readonly type: "string";
                        readonly examples: readonly ["GB"];
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetDiskUsage: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly startTime: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Epoch/Unix timestamp of end of time range to return. Defaults to `now() - 1 hour`.";
                };
                readonly endTime: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:30:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Epoch/Unix timestamp of end of time range to return. Defaults to `now()`.";
                };
                readonly resolutionSeconds: {
                    readonly type: "number";
                    readonly minimum: 30;
                    readonly default: 60;
                    readonly examples: readonly [60];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The resolution of the returned data";
                };
                readonly resource: {
                    readonly type: "string";
                    readonly examples: readonly ["srv-xxxxx,dpg-xxxxx,red-xxxxx"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Resource ID to query. When multiple resource query params are provided, they are ORed together. Resources can be service ids, Postgres ids, or Redis ids";
                };
                readonly service: {
                    readonly type: "string";
                    readonly deprecated: true;
                    readonly examples: readonly ["srv-xxxxx"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "This parameter is deprecated. Please use `resource` instead";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly description: "A collection of time series";
            readonly required: readonly ["items"];
            readonly items: {
                readonly type: "object";
                readonly description: "A time series data point";
                readonly required: readonly ["labels", "values", "unit"];
                readonly properties: {
                    readonly labels: {
                        readonly type: "array";
                        readonly description: "List of labels describing the time series";
                        readonly items: {
                            readonly type: "object";
                            readonly description: "A time series datapoint label";
                            readonly required: readonly ["field", "value"];
                            readonly properties: {
                                readonly field: {
                                    readonly type: "string";
                                    readonly examples: readonly ["service"];
                                };
                                readonly value: {
                                    readonly type: "string";
                                    readonly examples: readonly ["srv-xxxxx"];
                                };
                            };
                        };
                    };
                    readonly values: {
                        readonly type: "array";
                        readonly description: "The values of the time series";
                        readonly items: {
                            readonly description: "A time series datapoint value";
                            readonly type: "object";
                            readonly required: readonly ["timestamp", "value", "unit"];
                            readonly properties: {
                                readonly timestamp: {
                                    readonly type: "string";
                                    readonly format: "date-time";
                                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                                };
                                readonly value: {
                                    readonly type: "number";
                                    readonly examples: readonly [1];
                                };
                            };
                        };
                    };
                    readonly unit: {
                        readonly type: "string";
                        readonly examples: readonly ["GB"];
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetEnvVarsForService: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly serviceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the service";
                };
            };
            readonly required: readonly ["serviceId"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly cursor: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The position in the result list to start from when fetching paginated results. For details, see [Pagination](https://api-docs.render.com/reference/pagination).";
                };
                readonly limit: {
                    readonly type: "integer";
                    readonly default: 20;
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly description: "The maximum number of items to return. For details, see [Pagination](https://api-docs.render.com/reference/pagination).";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["envVar", "cursor"];
                readonly properties: {
                    readonly envVar: {
                        readonly type: "object";
                        readonly required: readonly ["key", "value"];
                        readonly properties: {
                            readonly key: {
                                readonly type: "string";
                            };
                            readonly value: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetHttpLatency: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly startTime: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Epoch/Unix timestamp of end of time range to return. Defaults to `now() - 1 hour`.";
                };
                readonly endTime: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:30:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Epoch/Unix timestamp of end of time range to return. Defaults to `now()`.";
                };
                readonly resolutionSeconds: {
                    readonly type: "number";
                    readonly minimum: 30;
                    readonly default: 60;
                    readonly examples: readonly [60];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The resolution of the returned data";
                };
                readonly resource: {
                    readonly type: "string";
                    readonly examples: readonly ["srv-xxxxx"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Service ID to query. When multiple service ids are provided, they are ORed together";
                };
                readonly service: {
                    readonly type: "string";
                    readonly deprecated: true;
                    readonly examples: readonly ["srv-xxxxx"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "This parameter is deprecated. Please use `resource` instead";
                };
                readonly host: {
                    readonly type: "string";
                    readonly examples: readonly ["example.com"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The hosts of HTTP requests to filter to. When multiple host query params are provided, they are ORed together";
                };
                readonly path: {
                    readonly type: "string";
                    readonly examples: readonly ["/graphql"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The paths of HTTP requests to filter to. When multiple path query params are provided, they are ORed together";
                };
                readonly quantile: {
                    readonly type: "number";
                    readonly format: "float";
                    readonly examples: readonly [0.99];
                    readonly minimum: -3.402823669209385e+38;
                    readonly maximum: 3.402823669209385e+38;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The quantile of latencies to fetch. When multiple quantile query params are provided, they are ORed together";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly description: "A collection of time series";
            readonly required: readonly ["items"];
            readonly items: {
                readonly type: "object";
                readonly description: "A time series data point";
                readonly required: readonly ["labels", "values", "unit"];
                readonly properties: {
                    readonly labels: {
                        readonly type: "array";
                        readonly description: "List of labels describing the time series";
                        readonly items: {
                            readonly type: "object";
                            readonly description: "A time series datapoint label";
                            readonly required: readonly ["field", "value"];
                            readonly properties: {
                                readonly field: {
                                    readonly type: "string";
                                    readonly examples: readonly ["service"];
                                };
                                readonly value: {
                                    readonly type: "string";
                                    readonly examples: readonly ["srv-xxxxx"];
                                };
                            };
                        };
                    };
                    readonly values: {
                        readonly type: "array";
                        readonly description: "The values of the time series";
                        readonly items: {
                            readonly description: "A time series datapoint value";
                            readonly type: "object";
                            readonly required: readonly ["timestamp", "value", "unit"];
                            readonly properties: {
                                readonly timestamp: {
                                    readonly type: "string";
                                    readonly format: "date-time";
                                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                                };
                                readonly value: {
                                    readonly type: "number";
                                    readonly examples: readonly [1];
                                };
                            };
                        };
                    };
                    readonly unit: {
                        readonly type: "string";
                        readonly examples: readonly ["GB"];
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetHttpRequests: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly startTime: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Epoch/Unix timestamp of end of time range to return. Defaults to `now() - 1 hour`.";
                };
                readonly endTime: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:30:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Epoch/Unix timestamp of end of time range to return. Defaults to `now()`.";
                };
                readonly resolutionSeconds: {
                    readonly type: "number";
                    readonly minimum: 30;
                    readonly default: 60;
                    readonly examples: readonly [60];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The resolution of the returned data";
                };
                readonly resource: {
                    readonly type: "string";
                    readonly examples: readonly ["srv-xxxxx"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Service ID to query. When multiple service ids are provided, they are ORed together";
                };
                readonly service: {
                    readonly type: "string";
                    readonly deprecated: true;
                    readonly examples: readonly ["srv-xxxxx"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "This parameter is deprecated. Please use `resource` instead";
                };
                readonly host: {
                    readonly type: "string";
                    readonly examples: readonly ["example.com"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The hosts of HTTP requests to filter to. When multiple host query params are provided, they are ORed together";
                };
                readonly path: {
                    readonly type: "string";
                    readonly examples: readonly ["/graphql"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The paths of HTTP requests to filter to. When multiple path query params are provided, they are ORed together";
                };
                readonly aggregateBy: {
                    readonly type: "string";
                    readonly enum: readonly ["statusCode", "host"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The field to aggregate by";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly description: "A collection of time series";
            readonly required: readonly ["items"];
            readonly items: {
                readonly type: "object";
                readonly description: "A time series data point";
                readonly required: readonly ["labels", "values", "unit"];
                readonly properties: {
                    readonly labels: {
                        readonly type: "array";
                        readonly description: "List of labels describing the time series";
                        readonly items: {
                            readonly type: "object";
                            readonly description: "A time series datapoint label";
                            readonly required: readonly ["field", "value"];
                            readonly properties: {
                                readonly field: {
                                    readonly type: "string";
                                    readonly examples: readonly ["service"];
                                };
                                readonly value: {
                                    readonly type: "string";
                                    readonly examples: readonly ["srv-xxxxx"];
                                };
                            };
                        };
                    };
                    readonly values: {
                        readonly type: "array";
                        readonly description: "The values of the time series";
                        readonly items: {
                            readonly description: "A time series datapoint value";
                            readonly type: "object";
                            readonly required: readonly ["timestamp", "value", "unit"];
                            readonly properties: {
                                readonly timestamp: {
                                    readonly type: "string";
                                    readonly format: "date-time";
                                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                                };
                                readonly value: {
                                    readonly type: "number";
                                    readonly examples: readonly [1];
                                };
                            };
                        };
                    };
                    readonly unit: {
                        readonly type: "string";
                        readonly examples: readonly ["GB"];
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetInstanceCount: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly startTime: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Epoch/Unix timestamp of end of time range to return. Defaults to `now() - 1 hour`.";
                };
                readonly endTime: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:30:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Epoch/Unix timestamp of end of time range to return. Defaults to `now()`.";
                };
                readonly resolutionSeconds: {
                    readonly type: "number";
                    readonly minimum: 30;
                    readonly default: 60;
                    readonly examples: readonly [60];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The resolution of the returned data";
                };
                readonly resource: {
                    readonly type: "string";
                    readonly examples: readonly ["srv-xxxxx,dpg-xxxxx,red-xxxxx"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Resource ID to query. When multiple resource query params are provided, they are ORed together. Resources can be service ids, Postgres ids, or Redis ids";
                };
                readonly service: {
                    readonly type: "string";
                    readonly deprecated: true;
                    readonly examples: readonly ["srv-xxxxx"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "This parameter is deprecated. Please use `resource` instead";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly description: "A collection of time series";
            readonly required: readonly ["items"];
            readonly items: {
                readonly type: "object";
                readonly description: "A time series data point";
                readonly required: readonly ["labels", "values", "unit"];
                readonly properties: {
                    readonly labels: {
                        readonly type: "array";
                        readonly description: "List of labels describing the time series";
                        readonly items: {
                            readonly type: "object";
                            readonly description: "A time series datapoint label";
                            readonly required: readonly ["field", "value"];
                            readonly properties: {
                                readonly field: {
                                    readonly type: "string";
                                    readonly examples: readonly ["service"];
                                };
                                readonly value: {
                                    readonly type: "string";
                                    readonly examples: readonly ["srv-xxxxx"];
                                };
                            };
                        };
                    };
                    readonly values: {
                        readonly type: "array";
                        readonly description: "The values of the time series";
                        readonly items: {
                            readonly description: "A time series datapoint value";
                            readonly type: "object";
                            readonly required: readonly ["timestamp", "value", "unit"];
                            readonly properties: {
                                readonly timestamp: {
                                    readonly type: "string";
                                    readonly format: "date-time";
                                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                                };
                                readonly value: {
                                    readonly type: "number";
                                    readonly examples: readonly [1];
                                };
                            };
                        };
                    };
                    readonly unit: {
                        readonly type: "string";
                        readonly examples: readonly ["GB"];
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetMemory: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly startTime: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Epoch/Unix timestamp of end of time range to return. Defaults to `now() - 1 hour`.";
                };
                readonly endTime: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:30:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Epoch/Unix timestamp of end of time range to return. Defaults to `now()`.";
                };
                readonly resolutionSeconds: {
                    readonly type: "number";
                    readonly minimum: 30;
                    readonly default: 60;
                    readonly examples: readonly [60];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The resolution of the returned data";
                };
                readonly resource: {
                    readonly type: "string";
                    readonly examples: readonly ["srv-xxxxx,dpg-xxxxx,red-xxxxx"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Resource ID to query. When multiple resource query params are provided, they are ORed together. Resources can be service ids, Postgres ids, or Redis ids";
                };
                readonly service: {
                    readonly type: "string";
                    readonly deprecated: true;
                    readonly examples: readonly ["srv-xxxxx"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "This parameter is deprecated. Please use `resource` instead";
                };
                readonly instance: {
                    readonly type: "string";
                    readonly examples: readonly ["srv-xxxxx-yyyy"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Instance ID to query. When multiple instance ID query params are provided, they are ORed together";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly description: "A collection of time series";
            readonly required: readonly ["items"];
            readonly items: {
                readonly type: "object";
                readonly description: "A time series data point";
                readonly required: readonly ["labels", "values", "unit"];
                readonly properties: {
                    readonly labels: {
                        readonly type: "array";
                        readonly description: "List of labels describing the time series";
                        readonly items: {
                            readonly type: "object";
                            readonly description: "A time series datapoint label";
                            readonly required: readonly ["field", "value"];
                            readonly properties: {
                                readonly field: {
                                    readonly type: "string";
                                    readonly examples: readonly ["service"];
                                };
                                readonly value: {
                                    readonly type: "string";
                                    readonly examples: readonly ["srv-xxxxx"];
                                };
                            };
                        };
                    };
                    readonly values: {
                        readonly type: "array";
                        readonly description: "The values of the time series";
                        readonly items: {
                            readonly description: "A time series datapoint value";
                            readonly type: "object";
                            readonly required: readonly ["timestamp", "value", "unit"];
                            readonly properties: {
                                readonly timestamp: {
                                    readonly type: "string";
                                    readonly format: "date-time";
                                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                                };
                                readonly value: {
                                    readonly type: "number";
                                    readonly examples: readonly [1];
                                };
                            };
                        };
                    };
                    readonly unit: {
                        readonly type: "string";
                        readonly examples: readonly ["GB"];
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetMemoryLimit: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly startTime: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Epoch/Unix timestamp of end of time range to return. Defaults to `now() - 1 hour`.";
                };
                readonly endTime: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:30:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Epoch/Unix timestamp of end of time range to return. Defaults to `now()`.";
                };
                readonly resolutionSeconds: {
                    readonly type: "number";
                    readonly minimum: 30;
                    readonly default: 60;
                    readonly examples: readonly [60];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The resolution of the returned data";
                };
                readonly resource: {
                    readonly type: "string";
                    readonly examples: readonly ["srv-xxxxx,dpg-xxxxx,red-xxxxx"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Resource ID to query. When multiple resource query params are provided, they are ORed together. Resources can be service ids, Postgres ids, or Redis ids";
                };
                readonly service: {
                    readonly type: "string";
                    readonly deprecated: true;
                    readonly examples: readonly ["srv-xxxxx"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "This parameter is deprecated. Please use `resource` instead";
                };
                readonly instance: {
                    readonly type: "string";
                    readonly examples: readonly ["srv-xxxxx-yyyy"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Instance ID to query. When multiple instance ID query params are provided, they are ORed together";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly description: "A collection of time series";
            readonly required: readonly ["items"];
            readonly items: {
                readonly type: "object";
                readonly description: "A time series data point";
                readonly required: readonly ["labels", "values", "unit"];
                readonly properties: {
                    readonly labels: {
                        readonly type: "array";
                        readonly description: "List of labels describing the time series";
                        readonly items: {
                            readonly type: "object";
                            readonly description: "A time series datapoint label";
                            readonly required: readonly ["field", "value"];
                            readonly properties: {
                                readonly field: {
                                    readonly type: "string";
                                    readonly examples: readonly ["service"];
                                };
                                readonly value: {
                                    readonly type: "string";
                                    readonly examples: readonly ["srv-xxxxx"];
                                };
                            };
                        };
                    };
                    readonly values: {
                        readonly type: "array";
                        readonly description: "The values of the time series";
                        readonly items: {
                            readonly description: "A time series datapoint value";
                            readonly type: "object";
                            readonly required: readonly ["timestamp", "value", "unit"];
                            readonly properties: {
                                readonly timestamp: {
                                    readonly type: "string";
                                    readonly format: "date-time";
                                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                                };
                                readonly value: {
                                    readonly type: "number";
                                    readonly examples: readonly [1];
                                };
                            };
                        };
                    };
                    readonly unit: {
                        readonly type: "string";
                        readonly examples: readonly ["GB"];
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetMemoryTarget: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly startTime: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Epoch/Unix timestamp of end of time range to return. Defaults to `now() - 1 hour`.";
                };
                readonly endTime: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:30:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Epoch/Unix timestamp of end of time range to return. Defaults to `now()`.";
                };
                readonly resolutionSeconds: {
                    readonly type: "number";
                    readonly minimum: 30;
                    readonly default: 60;
                    readonly examples: readonly [60];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The resolution of the returned data";
                };
                readonly resource: {
                    readonly type: "string";
                    readonly examples: readonly ["srv-xxxxx,dpg-xxxxx,red-xxxxx"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Resource ID to query. When multiple resource query params are provided, they are ORed together. Resources can be service ids, Postgres ids, or Redis ids";
                };
                readonly service: {
                    readonly type: "string";
                    readonly deprecated: true;
                    readonly examples: readonly ["srv-xxxxx"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "This parameter is deprecated. Please use `resource` instead";
                };
                readonly instance: {
                    readonly type: "string";
                    readonly examples: readonly ["srv-xxxxx-yyyy"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Instance ID to query. When multiple instance ID query params are provided, they are ORed together";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly description: "A collection of time series";
            readonly required: readonly ["items"];
            readonly items: {
                readonly type: "object";
                readonly description: "A time series data point";
                readonly required: readonly ["labels", "values", "unit"];
                readonly properties: {
                    readonly labels: {
                        readonly type: "array";
                        readonly description: "List of labels describing the time series";
                        readonly items: {
                            readonly type: "object";
                            readonly description: "A time series datapoint label";
                            readonly required: readonly ["field", "value"];
                            readonly properties: {
                                readonly field: {
                                    readonly type: "string";
                                    readonly examples: readonly ["service"];
                                };
                                readonly value: {
                                    readonly type: "string";
                                    readonly examples: readonly ["srv-xxxxx"];
                                };
                            };
                        };
                    };
                    readonly values: {
                        readonly type: "array";
                        readonly description: "The values of the time series";
                        readonly items: {
                            readonly description: "A time series datapoint value";
                            readonly type: "object";
                            readonly required: readonly ["timestamp", "value", "unit"];
                            readonly properties: {
                                readonly timestamp: {
                                    readonly type: "string";
                                    readonly format: "date-time";
                                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                                };
                                readonly value: {
                                    readonly type: "number";
                                    readonly examples: readonly [1];
                                };
                            };
                        };
                    };
                    readonly unit: {
                        readonly type: "string";
                        readonly examples: readonly ["GB"];
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetOwnerLogStream: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly ownerId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the owner (team or personal user) whose log streams should be returned";
                };
            };
            readonly required: readonly ["ownerId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Owner log stream settings";
            readonly properties: {
                readonly ownerId: {
                    readonly description: "The ID of the owner.";
                    readonly type: "string";
                };
                readonly endpoint: {
                    readonly description: "The endpoint to stream logs to.";
                    readonly type: "string";
                };
                readonly preview: {
                    readonly type: "string";
                    readonly description: "Whether to send logs or drop them.\n\n`send` `drop`";
                    readonly enum: readonly ["send", "drop"];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetReplicationLag: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly startTime: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Epoch/Unix timestamp of end of time range to return. Defaults to `now() - 1 hour`.";
                };
                readonly endTime: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:30:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Epoch/Unix timestamp of end of time range to return. Defaults to `now()`.";
                };
                readonly resolutionSeconds: {
                    readonly type: "number";
                    readonly minimum: 30;
                    readonly default: 60;
                    readonly examples: readonly [60];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The resolution of the returned data";
                };
                readonly resource: {
                    readonly type: "string";
                    readonly examples: readonly ["dpg-xxxxx"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Postgres ID to query. When multiple resource query params are provided, they are ORed together";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly description: "A collection of time series";
            readonly required: readonly ["items"];
            readonly items: {
                readonly type: "object";
                readonly description: "A time series data point";
                readonly required: readonly ["labels", "values", "unit"];
                readonly properties: {
                    readonly labels: {
                        readonly type: "array";
                        readonly description: "List of labels describing the time series";
                        readonly items: {
                            readonly type: "object";
                            readonly description: "A time series datapoint label";
                            readonly required: readonly ["field", "value"];
                            readonly properties: {
                                readonly field: {
                                    readonly type: "string";
                                    readonly examples: readonly ["service"];
                                };
                                readonly value: {
                                    readonly type: "string";
                                    readonly examples: readonly ["srv-xxxxx"];
                                };
                            };
                        };
                    };
                    readonly values: {
                        readonly type: "array";
                        readonly description: "The values of the time series";
                        readonly items: {
                            readonly description: "A time series datapoint value";
                            readonly type: "object";
                            readonly required: readonly ["timestamp", "value", "unit"];
                            readonly properties: {
                                readonly timestamp: {
                                    readonly type: "string";
                                    readonly format: "date-time";
                                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                                };
                                readonly value: {
                                    readonly type: "number";
                                    readonly examples: readonly [1];
                                };
                            };
                        };
                    };
                    readonly unit: {
                        readonly type: "string";
                        readonly examples: readonly ["GB"];
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetResourceLogStream: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly resourceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the resource (server, cron job, postgres, or redis) whose log streams should be returned";
                };
            };
            readonly required: readonly ["resourceId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Resource log stream overrides";
            readonly properties: {
                readonly resourceId: {
                    readonly description: "The ID of the resource.";
                    readonly type: "string";
                };
                readonly endpoint: {
                    readonly description: "The endpoint to stream logs to. Must be present if setting is send. Cannot be present if setting is drop.";
                    readonly type: "string";
                };
                readonly setting: {
                    readonly type: "string";
                    readonly description: "Whether to send logs or drop them.\n\n`send` `drop`";
                    readonly enum: readonly ["send", "drop"];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetUser: {
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["email", "name"];
            readonly properties: {
                readonly email: {
                    readonly type: "string";
                };
                readonly name: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const LinkServiceToEnvGroup: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly envGroupId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for resources that belong to an environment group";
                };
                readonly serviceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the service";
                };
            };
            readonly required: readonly ["envGroupId", "serviceId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["createdAt", "envVars", "id", "name", "ownerId", "secretFiles", "serviceLinks", "updatedAt"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly ownerId: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly updatedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly serviceLinks: {
                    readonly description: "List of serviceIds linked to the envGroup";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["id", "name", "type"];
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["static", "web", "pserv", "worker", "cron"];
                                readonly description: "`static` `web` `pserv` `worker` `cron`";
                            };
                        };
                    };
                };
                readonly environmentId: {
                    readonly type: "string";
                };
                readonly envVars: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["key", "value"];
                        readonly properties: {
                            readonly key: {
                                readonly type: "string";
                            };
                            readonly value: {
                                readonly type: "string";
                            };
                        };
                    };
                };
                readonly secretFiles: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["name", "content"];
                        readonly properties: {
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly content: {
                                readonly type: "string";
                            };
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ListApplicationFilterValues: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly startTime: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Epoch/Unix timestamp of end of time range to return. Defaults to `now() - 1 hour`.";
                };
                readonly endTime: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:30:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Epoch/Unix timestamp of end of time range to return. Defaults to `now()`.";
                };
                readonly resolutionSeconds: {
                    readonly type: "number";
                    readonly minimum: 30;
                    readonly default: 60;
                    readonly examples: readonly [60];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The resolution of the returned data";
                };
                readonly resource: {
                    readonly type: "string";
                    readonly examples: readonly ["srv-xxxxx"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Service ID to query. When multiple service ids are provided, they are ORed together";
                };
                readonly service: {
                    readonly type: "string";
                    readonly deprecated: true;
                    readonly examples: readonly ["srv-xxxxx"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "This parameter is deprecated. Please use `resource` instead";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly description: "A collection of filter values for application metrics";
            readonly required: readonly ["items"];
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly filter: {
                        readonly type: "string";
                        readonly enum: readonly ["instance"];
                        readonly description: "`instance`";
                    };
                    readonly values: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                            readonly examples: readonly ["srv-xxxxx-yyyy"];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ListBlueprintSyncs: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly blueprintId: {
                    readonly type: "string";
                    readonly pattern: "^exs-[0-9a-z]{20}$";
                    readonly examples: readonly ["exs-cph1rs3idesc73a2b2mg"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the blueprint";
                };
            };
            readonly required: readonly ["blueprintId"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly cursor: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The position in the result list to start from when fetching paginated results. For details, see [Pagination](https://api-docs.render.com/reference/pagination).";
                };
                readonly limit: {
                    readonly type: "integer";
                    readonly default: 20;
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly description: "The maximum number of items to return. For details, see [Pagination](https://api-docs.render.com/reference/pagination).";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly description: "A blueprint sync with a cursor";
                readonly required: readonly ["sync", "cursor"];
                readonly properties: {
                    readonly sync: {
                        readonly type: "object";
                        readonly required: readonly ["id", "commit", "state"];
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly pattern: "^exe-[0-9a-z]{20}$";
                                readonly examples: readonly ["exe-cph1rs3idesc73a2b2mg"];
                            };
                            readonly commit: {
                                readonly type: "object";
                                readonly required: readonly ["id"];
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly startedAt: {
                                readonly type: "string";
                                readonly format: "date-time";
                            };
                            readonly completedAt: {
                                readonly type: "string";
                                readonly format: "date-time";
                            };
                            readonly state: {
                                readonly type: "string";
                                readonly enum: readonly ["created", "pending", "running", "error", "success"];
                                readonly description: "`created` `pending` `running` `error` `success`";
                            };
                        };
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ListBlueprints: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly ownerId: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the owner (team or personal user) whose resources should be returned";
                };
                readonly cursor: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The position in the result list to start from when fetching paginated results. For details, see [Pagination](https://api-docs.render.com/reference/pagination).";
                };
                readonly limit: {
                    readonly type: "integer";
                    readonly default: 20;
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly description: "The maximum number of items to return. For details, see [Pagination](https://api-docs.render.com/reference/pagination).";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly description: "A blueprint with a cursor";
                readonly required: readonly ["blueprint", "cursor"];
                readonly properties: {
                    readonly blueprint: {
                        readonly type: "object";
                        readonly required: readonly ["id", "name", "status", "autoSync", "repo", "branch"];
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly pattern: "^exs-[0-9a-z]{20}$";
                                readonly examples: readonly ["exs-cph1rs3idesc73a2b2mg"];
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly enum: readonly ["created", "paused", "in_sync", "syncing", "error"];
                                readonly description: "`created` `paused` `in_sync` `syncing` `error`";
                            };
                            readonly autoSync: {
                                readonly type: "boolean";
                                readonly description: "Automatically sync changes to render.yaml";
                            };
                            readonly repo: {
                                readonly type: "string";
                            };
                            readonly branch: {
                                readonly type: "string";
                            };
                            readonly lastSync: {
                                readonly type: "string";
                                readonly format: "date-time";
                            };
                        };
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ListCustomDomains: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly serviceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the service";
                };
            };
            readonly required: readonly ["serviceId"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly cursor: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The position in the result list to start from when fetching paginated results. For details, see [Pagination](https://api-docs.render.com/reference/pagination).";
                };
                readonly limit: {
                    readonly type: "integer";
                    readonly default: 20;
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly description: "The maximum number of items to return. For details, see [Pagination](https://api-docs.render.com/reference/pagination).";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly name: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for the names of custom domain";
                };
                readonly domainType: {
                    readonly type: "string";
                    readonly enum: readonly ["apex", "subdomain"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for domain type";
                };
                readonly verificationStatus: {
                    readonly type: "string";
                    readonly enum: readonly ["verified", "unverified"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for domain verification status (`verified` or `unverified`)";
                };
                readonly createdBefore: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for custom domains created before a certain time (specified as an ISO 8601 timestamp)";
                };
                readonly createdAfter: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-02-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for custom domains created after a certain time (specified as an ISO 8601 timestamp)";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly required: readonly ["customDomain", "cursor"];
                readonly type: "object";
                readonly properties: {
                    readonly customDomain: {
                        readonly type: "object";
                        readonly required: readonly ["id", "name", "domainType", "publicSuffix", "verificationStatus", "createdAt", "redirectForName"];
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly domainType: {
                                readonly type: "string";
                                readonly enum: readonly ["apex", "subdomain"];
                                readonly description: "`apex` `subdomain`";
                            };
                            readonly publicSuffix: {
                                readonly type: "string";
                            };
                            readonly redirectForName: {
                                readonly type: "string";
                            };
                            readonly verificationStatus: {
                                readonly type: "string";
                                readonly enum: readonly ["verified", "unverified"];
                                readonly description: "`verified` `unverified`";
                            };
                            readonly createdAt: {
                                readonly type: "string";
                                readonly format: "date-time";
                            };
                            readonly server: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ListDeploys: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly serviceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the service";
                };
            };
            readonly required: readonly ["serviceId"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["created", "build_in_progress", "update_in_progress", "live", "deactivated", "build_failed", "update_failed", "canceled", "pre_deploy_in_progress", "pre_deploy_failed"];
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for deploys with the specified statuses";
                };
                readonly createdBefore: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for deploys created before a certain time (specified as an ISO 8601 timestamp)";
                };
                readonly createdAfter: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-02-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for deploys created after a certain time (specified as an ISO 8601 timestamp)";
                };
                readonly updatedBefore: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for deploys updated before a certain time (specified as an ISO 8601 timestamp)";
                };
                readonly updatedAfter: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-02-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for deploys updated after a certain time (specified as an ISO 8601 timestamp)";
                };
                readonly finishedBefore: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for deploys finished before a certain time (specified as an ISO 8601 timestamp)";
                };
                readonly finishedAfter: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-02-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for deploys finished after a certain time (specified as an ISO 8601 timestamp)";
                };
                readonly cursor: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The position in the result list to start from when fetching paginated results. For details, see [Pagination](https://api-docs.render.com/reference/pagination).";
                };
                readonly limit: {
                    readonly type: "integer";
                    readonly default: 20;
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly description: "The maximum number of items to return. For details, see [Pagination](https://api-docs.render.com/reference/pagination).";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly deploy: {
                        readonly type: "object";
                        readonly required: readonly ["id"];
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly commit: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                    };
                                    readonly createdAt: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                    };
                                };
                            };
                            readonly image: {
                                readonly description: "Image information used when creating the deploy. Not present for Git-backed deploys";
                                readonly type: "object";
                                readonly properties: {
                                    readonly ref: {
                                        readonly description: "Image reference used when creating the deploy";
                                        readonly type: "string";
                                    };
                                    readonly sha: {
                                        readonly description: "SHA that the image reference was resolved to when creating the deploy";
                                        readonly type: "string";
                                    };
                                    readonly registryCredential: {
                                        readonly description: "Name of credential used to pull the image, if provided";
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly enum: readonly ["created", "build_in_progress", "update_in_progress", "live", "deactivated", "build_failed", "update_failed", "canceled", "pre_deploy_in_progress", "pre_deploy_failed"];
                                readonly description: "`created` `build_in_progress` `update_in_progress` `live` `deactivated` `build_failed` `update_failed` `canceled` `pre_deploy_in_progress` `pre_deploy_failed`";
                            };
                            readonly trigger: {
                                readonly type: "string";
                                readonly enum: readonly ["api", "blueprint_sync", "deploy_hook", "deployed_by_render", "manual", "other", "new_commit", "rollback", "service_resumed", "service_updated"];
                                readonly description: "`api` `blueprint_sync` `deploy_hook` `deployed_by_render` `manual` `other` `new_commit` `rollback` `service_resumed` `service_updated`";
                            };
                            readonly finishedAt: {
                                readonly type: "string";
                                readonly format: "date-time";
                            };
                            readonly createdAt: {
                                readonly type: "string";
                                readonly format: "date-time";
                            };
                            readonly updatedAt: {
                                readonly type: "string";
                                readonly format: "date-time";
                            };
                        };
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ListDisks: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly ownerId: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the owner (team or personal user) whose resources should be returned";
                };
                readonly diskId: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly pattern: "^dsk-[0-9a-z]{20}$";
                        readonly examples: readonly ["dsk-cph1rs3idesc73a2b2mg"];
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter by disk IDs";
                };
                readonly name: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter by name";
                };
                readonly createdBefore: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for resources created before a certain time (specified as an ISO 8601 timestamp)";
                };
                readonly createdAfter: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-02-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for resources created after a certain time (specified as an ISO 8601 timestamp)";
                };
                readonly updatedBefore: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for resources updated before a certain time (specified as an ISO 8601 timestamp)";
                };
                readonly updatedAfter: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for resources updated after a certain time (specified as an ISO 8601 timestamp)";
                };
                readonly serviceId: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for resources by service ID";
                };
                readonly cursor: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The position in the result list to start from when fetching paginated results. For details, see [Pagination](https://api-docs.render.com/reference/pagination).";
                };
                readonly limit: {
                    readonly type: "integer";
                    readonly default: 20;
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly description: "The maximum number of items to return. For details, see [Pagination](https://api-docs.render.com/reference/pagination).";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly required: readonly ["disk", "cursor"];
                readonly type: "object";
                readonly properties: {
                    readonly disk: {
                        readonly type: "object";
                        readonly required: readonly ["id", "name", "sizeGB", "mountPath", "createdAt", "updatedAt"];
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly pattern: "^dsk-[0-9a-z]{20}$";
                                readonly examples: readonly ["dsk-cph1rs3idesc73a2b2mg"];
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly sizeGB: {
                                readonly type: "integer";
                            };
                            readonly mountPath: {
                                readonly type: "string";
                            };
                            readonly serviceId: {
                                readonly type: "string";
                            };
                            readonly createdAt: {
                                readonly type: "string";
                                readonly format: "date-time";
                            };
                            readonly updatedAt: {
                                readonly type: "string";
                                readonly format: "date-time";
                            };
                        };
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ListEnvGroups: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly name: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter by name";
                };
                readonly createdBefore: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for resources created before a certain time (specified as an ISO 8601 timestamp)";
                };
                readonly createdAfter: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-02-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for resources created after a certain time (specified as an ISO 8601 timestamp)";
                };
                readonly updatedBefore: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for resources updated before a certain time (specified as an ISO 8601 timestamp)";
                };
                readonly updatedAfter: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for resources updated after a certain time (specified as an ISO 8601 timestamp)";
                };
                readonly ownerId: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the owner (team or personal user) whose resources should be returned";
                };
                readonly environmentId: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for resources that belong to an environment";
                };
                readonly cursor: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The position in the result list to start from when fetching paginated results. For details, see [Pagination](https://api-docs.render.com/reference/pagination).";
                };
                readonly limit: {
                    readonly type: "integer";
                    readonly default: 20;
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly description: "The maximum number of items to return. For details, see [Pagination](https://api-docs.render.com/reference/pagination).";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "name", "ownerId", "createdAt", "updatedAt", "serviceLinks"];
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                    };
                    readonly name: {
                        readonly type: "string";
                    };
                    readonly ownerId: {
                        readonly type: "string";
                    };
                    readonly createdAt: {
                        readonly type: "string";
                        readonly format: "date-time";
                    };
                    readonly updatedAt: {
                        readonly type: "string";
                        readonly format: "date-time";
                    };
                    readonly serviceLinks: {
                        readonly description: "List of serviceIds linked to the envGroup";
                        readonly type: "array";
                        readonly items: {
                            readonly type: "object";
                            readonly required: readonly ["id", "name", "type"];
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                                readonly name: {
                                    readonly type: "string";
                                };
                                readonly type: {
                                    readonly type: "string";
                                    readonly enum: readonly ["static", "web", "pserv", "worker", "cron"];
                                    readonly description: "`static` `web` `pserv` `worker` `cron`";
                                };
                            };
                        };
                    };
                    readonly environmentId: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ListEnvironments: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly name: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter by name";
                };
                readonly projectId: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for resources that belong to a project";
                };
                readonly createdBefore: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for resources created before a certain time (specified as an ISO 8601 timestamp)";
                };
                readonly createdAfter: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-02-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for resources created after a certain time (specified as an ISO 8601 timestamp)";
                };
                readonly updatedBefore: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for resources updated before a certain time (specified as an ISO 8601 timestamp)";
                };
                readonly updatedAfter: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for resources updated after a certain time (specified as an ISO 8601 timestamp)";
                };
                readonly ownerId: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the owner (team or personal user) whose resources should be returned";
                };
                readonly environmentId: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for resources that belong to an environment";
                };
                readonly cursor: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The position in the result list to start from when fetching paginated results. For details, see [Pagination](https://api-docs.render.com/reference/pagination).";
                };
                readonly limit: {
                    readonly type: "integer";
                    readonly default: 20;
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly description: "The maximum number of items to return. For details, see [Pagination](https://api-docs.render.com/reference/pagination).";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["projectId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly description: "An environment with a cursor";
                readonly required: readonly ["environment", "cursor"];
                readonly properties: {
                    readonly environment: {
                        readonly type: "object";
                        readonly required: readonly ["id", "name", "projectId", "databasesIds", "redisIds", "serviceIds", "envGroupIds", "protectedStatus", "networkIsolationEnabled"];
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly projectId: {
                                readonly type: "string";
                            };
                            readonly databasesIds: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                            };
                            readonly redisIds: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                            };
                            readonly serviceIds: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                            };
                            readonly envGroupIds: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                            };
                            readonly protectedStatus: {
                                readonly type: "string";
                                readonly description: "Indicates whether an environment is `unprotected` or `protected`. Only admin users can perform destructive actions in `protected` environments.\n\n`unprotected` `protected`";
                                readonly enum: readonly ["unprotected", "protected"];
                            };
                            readonly networkIsolationEnabled: {
                                readonly type: "boolean";
                                readonly description: "Indicates whether network connections across environments are allowed.";
                            };
                        };
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ListEvents: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly serviceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the service";
                };
            };
            readonly required: readonly ["serviceId"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly eventType: {
                    readonly anyOf: readonly [{
                        readonly type: "string";
                        readonly enum: readonly ["autoscaling_config_changed", "autoscaling_ended", "autoscaling_started", "branch_deleted", "build_ended", "build_plan_changed", "build_started", "commit_ignored", "cron_job_run_ended", "cron_job_run_started", "deploy_ended", "deploy_started", "disk_created", "disk_updated", "disk_deleted", "image_pull_failed", "initial_deploy_hook_ended", "initial_deploy_hook_started", "instance_count_changed", "job_run_ended", "maintenance_mode_enabled", "maintenance_mode_uri_updated", "maintenance_ended", "maintenance_started", "plan_changed", "pre_deploy_ended", "pre_deploy_started", "server_available", "server_failed", "server_hardware_failure", "server_restarted", "server_unhealthy", "service_resumed", "service_suspended", "suspender_added", "suspender_removed", "zero_downtime_redeploy_ended", "zero_downtime_redeploy_started"];
                    }];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The type of event to filter to";
                };
                readonly startTime: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Epoch/Unix timestamp of end of time range to return. Defaults to `now() - 1 hour`.";
                };
                readonly endTime: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:30:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Epoch/Unix timestamp of end of time range to return. Defaults to `now()`.";
                };
                readonly cursor: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The position in the result list to start from when fetching paginated results. For details, see [Pagination](https://api-docs.render.com/reference/pagination).";
                };
                readonly limit: {
                    readonly type: "integer";
                    readonly default: 20;
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly description: "The maximum number of items to return. For details, see [Pagination](https://api-docs.render.com/reference/pagination).";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly description: "A service event with a cursor";
                readonly required: readonly ["event", "cursor"];
                readonly properties: {
                    readonly event: {
                        readonly type: "object";
                        readonly required: readonly ["id", "timestamp", "serviceId", "type", "details"];
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly timestamp: {
                                readonly type: "string";
                                readonly format: "date-time";
                            };
                            readonly serviceId: {
                                readonly type: "string";
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["autoscaling_config_changed", "autoscaling_ended", "autoscaling_started", "branch_deleted", "build_ended", "build_plan_changed", "build_started", "commit_ignored", "cron_job_run_ended", "cron_job_run_started", "deploy_ended", "deploy_started", "disk_created", "disk_updated", "disk_deleted", "image_pull_failed", "initial_deploy_hook_ended", "initial_deploy_hook_started", "instance_count_changed", "job_run_ended", "maintenance_mode_enabled", "maintenance_mode_uri_updated", "maintenance_ended", "maintenance_started", "plan_changed", "pre_deploy_ended", "pre_deploy_started", "server_available", "server_failed", "server_hardware_failure", "server_restarted", "server_unhealthy", "service_resumed", "service_suspended", "suspender_added", "suspender_removed", "zero_downtime_redeploy_ended", "zero_downtime_redeploy_started"];
                                readonly description: "`autoscaling_config_changed` `autoscaling_ended` `autoscaling_started` `branch_deleted` `build_ended` `build_plan_changed` `build_started` `commit_ignored` `cron_job_run_ended` `cron_job_run_started` `deploy_ended` `deploy_started` `disk_created` `disk_updated` `disk_deleted` `image_pull_failed` `initial_deploy_hook_ended` `initial_deploy_hook_started` `instance_count_changed` `job_run_ended` `maintenance_mode_enabled` `maintenance_mode_uri_updated` `maintenance_ended` `maintenance_started` `plan_changed` `pre_deploy_ended` `pre_deploy_started` `server_available` `server_failed` `server_hardware_failure` `server_restarted` `server_unhealthy` `service_resumed` `service_suspended` `suspender_added` `suspender_removed` `zero_downtime_redeploy_ended` `zero_downtime_redeploy_started`";
                            };
                            readonly details: {
                                readonly oneOf: readonly [{
                                    readonly type: "object";
                                    readonly required: readonly ["deployId"];
                                    readonly properties: {
                                        readonly deployId: {
                                            readonly type: "string";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["toConfig"];
                                    readonly properties: {
                                        readonly fromConfig: {
                                            readonly type: "object";
                                            readonly required: readonly ["enabled", "min", "max", "criteria"];
                                            readonly properties: {
                                                readonly enabled: {
                                                    readonly type: "boolean";
                                                    readonly default: false;
                                                };
                                                readonly min: {
                                                    readonly type: "integer";
                                                    readonly description: "The minimum number of instances for the service";
                                                };
                                                readonly max: {
                                                    readonly type: "integer";
                                                    readonly description: "The maximum number of instances for the service";
                                                };
                                                readonly criteria: {
                                                    readonly type: "object";
                                                    readonly required: readonly ["cpu", "memory"];
                                                    readonly properties: {
                                                        readonly cpu: {
                                                            readonly type: "object";
                                                            readonly required: readonly ["enabled", "percentage"];
                                                            readonly properties: {
                                                                readonly enabled: {
                                                                    readonly type: "boolean";
                                                                    readonly default: false;
                                                                };
                                                                readonly percentage: {
                                                                    readonly type: "integer";
                                                                    readonly description: "Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.\n";
                                                                };
                                                            };
                                                        };
                                                        readonly memory: {
                                                            readonly type: "object";
                                                            readonly required: readonly ["enabled", "percentage"];
                                                            readonly properties: {
                                                                readonly enabled: {
                                                                    readonly type: "boolean";
                                                                    readonly default: false;
                                                                };
                                                                readonly percentage: {
                                                                    readonly type: "integer";
                                                                    readonly description: "Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.\n";
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                        readonly toConfig: {
                                            readonly type: "object";
                                            readonly required: readonly ["enabled", "min", "max", "criteria"];
                                            readonly properties: {
                                                readonly enabled: {
                                                    readonly type: "boolean";
                                                    readonly default: false;
                                                };
                                                readonly min: {
                                                    readonly type: "integer";
                                                    readonly description: "The minimum number of instances for the service";
                                                };
                                                readonly max: {
                                                    readonly type: "integer";
                                                    readonly description: "The maximum number of instances for the service";
                                                };
                                                readonly criteria: {
                                                    readonly type: "object";
                                                    readonly required: readonly ["cpu", "memory"];
                                                    readonly properties: {
                                                        readonly cpu: {
                                                            readonly type: "object";
                                                            readonly required: readonly ["enabled", "percentage"];
                                                            readonly properties: {
                                                                readonly enabled: {
                                                                    readonly type: "boolean";
                                                                    readonly default: false;
                                                                };
                                                                readonly percentage: {
                                                                    readonly type: "integer";
                                                                    readonly description: "Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.\n";
                                                                };
                                                            };
                                                        };
                                                        readonly memory: {
                                                            readonly type: "object";
                                                            readonly required: readonly ["enabled", "percentage"];
                                                            readonly properties: {
                                                                readonly enabled: {
                                                                    readonly type: "boolean";
                                                                    readonly default: false;
                                                                };
                                                                readonly percentage: {
                                                                    readonly type: "integer";
                                                                    readonly description: "Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.\n";
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["fromInstances", "toInstances"];
                                    readonly properties: {
                                        readonly fromInstances: {
                                            readonly type: "integer";
                                        };
                                        readonly toInstances: {
                                            readonly type: "integer";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["fromInstances", "toInstances"];
                                    readonly properties: {
                                        readonly fromInstances: {
                                            readonly type: "integer";
                                        };
                                        readonly toInstances: {
                                            readonly type: "integer";
                                        };
                                        readonly currentCPU: {
                                            readonly type: "integer";
                                            readonly "x-go-type": "int64";
                                        };
                                        readonly targetCPU: {
                                            readonly type: "integer";
                                            readonly "x-go-type": "int64";
                                        };
                                        readonly currentMemory: {
                                            readonly type: "integer";
                                            readonly "x-go-type": "int64";
                                        };
                                        readonly targetMemory: {
                                            readonly type: "integer";
                                            readonly "x-go-type": "int64";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["deletedBranch", "newBranch"];
                                    readonly properties: {
                                        readonly deletedBranch: {
                                            readonly type: "string";
                                        };
                                        readonly newBranch: {
                                            readonly type: "string";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["buildId", "status", "reason"];
                                    readonly properties: {
                                        readonly buildId: {
                                            readonly type: "string";
                                        };
                                        readonly status: {
                                            readonly type: "integer";
                                        };
                                        readonly reason: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly buildFailed: {
                                                    readonly type: "object";
                                                    readonly required: readonly ["id"];
                                                    readonly properties: {
                                                        readonly id: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                };
                                                readonly newBuild: {
                                                    readonly type: "object";
                                                    readonly required: readonly ["id"];
                                                    readonly properties: {
                                                        readonly id: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                };
                                                readonly newDeploy: {
                                                    readonly type: "object";
                                                    readonly required: readonly ["id"];
                                                    readonly properties: {
                                                        readonly id: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                };
                                                readonly failure: {
                                                    readonly type: "object";
                                                    readonly required: readonly ["evicted"];
                                                    readonly properties: {
                                                        readonly evicted: {
                                                            readonly type: "boolean";
                                                        };
                                                        readonly nonZeroExit: {
                                                            readonly type: "integer";
                                                        };
                                                        readonly oomKilled: {
                                                            readonly type: "object";
                                                            readonly required: readonly ["memoryLimit"];
                                                            readonly properties: {
                                                                readonly memoryLimit: {
                                                                    readonly type: "string";
                                                                };
                                                            };
                                                        };
                                                        readonly timedOutSeconds: {
                                                            readonly type: "integer";
                                                            readonly format: "int64";
                                                            readonly minimum: -9223372036854776000;
                                                            readonly maximum: 9223372036854776000;
                                                        };
                                                        readonly unhealthy: {
                                                            readonly type: "string";
                                                        };
                                                        readonly timedOutReason: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["from", "to"];
                                    readonly properties: {
                                        readonly from: {
                                            readonly type: "string";
                                        };
                                        readonly to: {
                                            readonly type: "string";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["buildId", "trigger"];
                                    readonly properties: {
                                        readonly buildId: {
                                            readonly type: "string";
                                        };
                                        readonly trigger: {
                                            readonly type: "object";
                                            readonly required: readonly ["firstBuild", "envUpdated", "manual", "deployedByRender", "clearCache", "rollback"];
                                            readonly properties: {
                                                readonly firstBuild: {
                                                    readonly description: "Deploy was triggered by service creation";
                                                    readonly type: "boolean";
                                                };
                                                readonly envUpdated: {
                                                    readonly description: "Deploy was triggered by an environment update";
                                                    readonly type: "boolean";
                                                };
                                                readonly manual: {
                                                    readonly description: "Deploy was triggered manually from the dashboard";
                                                    readonly type: "boolean";
                                                };
                                                readonly user: {
                                                    readonly type: "object";
                                                    readonly description: "User who triggered the action";
                                                    readonly required: readonly ["id", "email"];
                                                    readonly properties: {
                                                        readonly id: {
                                                            readonly type: "string";
                                                        };
                                                        readonly email: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                };
                                                readonly updatedProperty: {
                                                    readonly description: "Updated property that triggered the deploy";
                                                    readonly type: "string";
                                                };
                                                readonly newCommit: {
                                                    readonly description: "Commit that triggered the deploy";
                                                    readonly type: "string";
                                                };
                                                readonly deployedByRender: {
                                                    readonly description: "Deploy was triggered by Render";
                                                    readonly type: "boolean";
                                                };
                                                readonly clearCache: {
                                                    readonly description: "Whether the cache was cleared for the deploy";
                                                    readonly type: "boolean";
                                                };
                                                readonly rollback: {
                                                    readonly description: "Whether the deploy was triggered by a rollback";
                                                    readonly type: "boolean";
                                                };
                                                readonly rollbackTargetDeployId: {
                                                    readonly description: "Deploy ID that was rolled back to";
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["id", "url"];
                                    readonly properties: {
                                        readonly id: {
                                            readonly description: "the commit id";
                                            readonly type: "string";
                                        };
                                        readonly url: {
                                            readonly description: "the commit url";
                                            readonly type: "string";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["cronJobRunId", "status"];
                                    readonly properties: {
                                        readonly cronJobRunId: {
                                            readonly type: "string";
                                        };
                                        readonly status: {
                                            readonly type: "string";
                                            readonly enum: readonly ["canceled", "pending", "successful", "unsuccessful"];
                                            readonly description: "`canceled` `pending` `successful` `unsuccessful`";
                                        };
                                        readonly reason: {
                                            readonly type: "object";
                                            readonly required: readonly ["evicted"];
                                            readonly properties: {
                                                readonly evicted: {
                                                    readonly type: "boolean";
                                                };
                                                readonly nonZeroExit: {
                                                    readonly type: "integer";
                                                };
                                                readonly oomKilled: {
                                                    readonly type: "object";
                                                    readonly required: readonly ["memoryLimit"];
                                                    readonly properties: {
                                                        readonly memoryLimit: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                };
                                                readonly timedOutSeconds: {
                                                    readonly type: "integer";
                                                    readonly format: "int64";
                                                    readonly minimum: -9223372036854776000;
                                                    readonly maximum: 9223372036854776000;
                                                };
                                                readonly unhealthy: {
                                                    readonly type: "string";
                                                };
                                                readonly timedOutReason: {
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                        readonly user: {
                                            readonly type: "object";
                                            readonly description: "User who triggered the action";
                                            readonly required: readonly ["id", "email"];
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                };
                                                readonly email: {
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["cronJobRunId"];
                                    readonly properties: {
                                        readonly cronJobRunId: {
                                            readonly type: "string";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["deployId", "reason", "status"];
                                    readonly properties: {
                                        readonly deployId: {
                                            readonly type: "string";
                                        };
                                        readonly reason: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly buildFailed: {
                                                    readonly type: "object";
                                                    readonly required: readonly ["id"];
                                                    readonly properties: {
                                                        readonly id: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                };
                                                readonly newBuild: {
                                                    readonly type: "object";
                                                    readonly required: readonly ["id"];
                                                    readonly properties: {
                                                        readonly id: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                };
                                                readonly newDeploy: {
                                                    readonly type: "object";
                                                    readonly required: readonly ["id"];
                                                    readonly properties: {
                                                        readonly id: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                };
                                                readonly failure: {
                                                    readonly type: "object";
                                                    readonly required: readonly ["evicted"];
                                                    readonly properties: {
                                                        readonly evicted: {
                                                            readonly type: "boolean";
                                                        };
                                                        readonly nonZeroExit: {
                                                            readonly type: "integer";
                                                        };
                                                        readonly oomKilled: {
                                                            readonly type: "object";
                                                            readonly required: readonly ["memoryLimit"];
                                                            readonly properties: {
                                                                readonly memoryLimit: {
                                                                    readonly type: "string";
                                                                };
                                                            };
                                                        };
                                                        readonly timedOutSeconds: {
                                                            readonly type: "integer";
                                                            readonly format: "int64";
                                                            readonly minimum: -9223372036854776000;
                                                            readonly maximum: 9223372036854776000;
                                                        };
                                                        readonly unhealthy: {
                                                            readonly type: "string";
                                                        };
                                                        readonly timedOutReason: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                        readonly status: {
                                            readonly type: "integer";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["deployId", "trigger"];
                                    readonly properties: {
                                        readonly deployId: {
                                            readonly type: "string";
                                        };
                                        readonly trigger: {
                                            readonly type: "object";
                                            readonly required: readonly ["firstBuild", "envUpdated", "manual", "deployedByRender", "clearCache", "rollback"];
                                            readonly properties: {
                                                readonly firstBuild: {
                                                    readonly description: "Deploy was triggered by service creation";
                                                    readonly type: "boolean";
                                                };
                                                readonly envUpdated: {
                                                    readonly description: "Deploy was triggered by an environment update";
                                                    readonly type: "boolean";
                                                };
                                                readonly manual: {
                                                    readonly description: "Deploy was triggered manually from the dashboard";
                                                    readonly type: "boolean";
                                                };
                                                readonly user: {
                                                    readonly type: "object";
                                                    readonly description: "User who triggered the action";
                                                    readonly required: readonly ["id", "email"];
                                                    readonly properties: {
                                                        readonly id: {
                                                            readonly type: "string";
                                                        };
                                                        readonly email: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                };
                                                readonly updatedProperty: {
                                                    readonly description: "Updated property that triggered the deploy";
                                                    readonly type: "string";
                                                };
                                                readonly newCommit: {
                                                    readonly description: "Commit that triggered the deploy";
                                                    readonly type: "string";
                                                };
                                                readonly deployedByRender: {
                                                    readonly description: "Deploy was triggered by Render";
                                                    readonly type: "boolean";
                                                };
                                                readonly clearCache: {
                                                    readonly description: "Whether the cache was cleared for the deploy";
                                                    readonly type: "boolean";
                                                };
                                                readonly rollback: {
                                                    readonly description: "Whether the deploy was triggered by a rollback";
                                                    readonly type: "boolean";
                                                };
                                                readonly rollbackTargetDeployId: {
                                                    readonly description: "Deploy ID that was rolled back to";
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["diskId", "sizeGB"];
                                    readonly properties: {
                                        readonly diskId: {
                                            readonly type: "string";
                                            readonly pattern: "^dsk-[0-9a-z]{20}$";
                                            readonly examples: readonly ["dsk-cph1rs3idesc73a2b2mg"];
                                        };
                                        readonly sizeGB: {
                                            readonly type: "integer";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["diskId", "fromSizeGB", "toSizeGB"];
                                    readonly properties: {
                                        readonly diskId: {
                                            readonly type: "string";
                                            readonly pattern: "^dsk-[0-9a-z]{20}$";
                                            readonly examples: readonly ["dsk-cph1rs3idesc73a2b2mg"];
                                        };
                                        readonly fromSizeGB: {
                                            readonly type: "integer";
                                        };
                                        readonly toSizeGB: {
                                            readonly type: "integer";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["diskId"];
                                    readonly properties: {
                                        readonly diskId: {
                                            readonly type: "string";
                                            readonly pattern: "^dsk-[0-9a-z]{20}$";
                                            readonly examples: readonly ["dsk-cph1rs3idesc73a2b2mg"];
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["message", "imageURL"];
                                    readonly properties: {
                                        readonly message: {
                                            readonly type: "string";
                                        };
                                        readonly imageURL: {
                                            readonly type: "string";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["deployId"];
                                    readonly properties: {
                                        readonly deployId: {
                                            readonly type: "string";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["fromInstances", "toInstances"];
                                    readonly properties: {
                                        readonly fromInstances: {
                                            readonly type: "integer";
                                        };
                                        readonly toInstances: {
                                            readonly type: "integer";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["jobId", "status"];
                                    readonly properties: {
                                        readonly jobId: {
                                            readonly type: "string";
                                            readonly pattern: "^job-[0-9a-z]{20}$";
                                            readonly examples: readonly ["job-cph1rs3idesc73a2b2mg"];
                                        };
                                        readonly status: {
                                            readonly type: "string";
                                            readonly enum: readonly ["succeeded", "failed", "canceled"];
                                            readonly description: "`succeeded` `failed` `canceled`";
                                        };
                                        readonly reason: {
                                            readonly type: "object";
                                            readonly required: readonly ["evicted"];
                                            readonly properties: {
                                                readonly evicted: {
                                                    readonly type: "boolean";
                                                };
                                                readonly nonZeroExit: {
                                                    readonly type: "integer";
                                                };
                                                readonly oomKilled: {
                                                    readonly type: "object";
                                                    readonly required: readonly ["memoryLimit"];
                                                    readonly properties: {
                                                        readonly memoryLimit: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                };
                                                readonly timedOutSeconds: {
                                                    readonly type: "integer";
                                                    readonly format: "int64";
                                                    readonly minimum: -9223372036854776000;
                                                    readonly maximum: 9223372036854776000;
                                                };
                                                readonly unhealthy: {
                                                    readonly type: "string";
                                                };
                                                readonly timedOutReason: {
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["enabled"];
                                    readonly properties: {
                                        readonly enabled: {
                                            readonly type: "boolean";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["fromURI", "toURI"];
                                    readonly properties: {
                                        readonly fromURI: {
                                            readonly type: "string";
                                        };
                                        readonly toURI: {
                                            readonly type: "string";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly additionalProperties: true;
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["trigger"];
                                    readonly properties: {
                                        readonly trigger: {
                                            readonly type: "object";
                                            readonly required: readonly ["manual", "startedByRender"];
                                            readonly properties: {
                                                readonly user: {
                                                    readonly type: "object";
                                                    readonly description: "User who triggered the action";
                                                    readonly required: readonly ["id", "email"];
                                                    readonly properties: {
                                                        readonly id: {
                                                            readonly type: "string";
                                                        };
                                                        readonly email: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                };
                                                readonly manual: {
                                                    readonly description: "Maintenance was triggered manually";
                                                    readonly type: "boolean";
                                                };
                                                readonly startedByRender: {
                                                    readonly description: "Maintenance was triggered by Render";
                                                    readonly type: "boolean";
                                                };
                                            };
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["from", "to"];
                                    readonly properties: {
                                        readonly from: {
                                            readonly type: "string";
                                        };
                                        readonly to: {
                                            readonly type: "string";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["deployCommandExecutionId", "deployId", "status", "reason"];
                                    readonly properties: {
                                        readonly deployCommandExecutionId: {
                                            readonly type: "string";
                                        };
                                        readonly deployId: {
                                            readonly type: "string";
                                        };
                                        readonly status: {
                                            readonly type: "integer";
                                        };
                                        readonly reason: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly buildFailed: {
                                                    readonly type: "object";
                                                    readonly required: readonly ["id"];
                                                    readonly properties: {
                                                        readonly id: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                };
                                                readonly newBuild: {
                                                    readonly type: "object";
                                                    readonly required: readonly ["id"];
                                                    readonly properties: {
                                                        readonly id: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                };
                                                readonly newDeploy: {
                                                    readonly type: "object";
                                                    readonly required: readonly ["id"];
                                                    readonly properties: {
                                                        readonly id: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                };
                                                readonly failure: {
                                                    readonly type: "object";
                                                    readonly required: readonly ["evicted"];
                                                    readonly properties: {
                                                        readonly evicted: {
                                                            readonly type: "boolean";
                                                        };
                                                        readonly nonZeroExit: {
                                                            readonly type: "integer";
                                                        };
                                                        readonly oomKilled: {
                                                            readonly type: "object";
                                                            readonly required: readonly ["memoryLimit"];
                                                            readonly properties: {
                                                                readonly memoryLimit: {
                                                                    readonly type: "string";
                                                                };
                                                            };
                                                        };
                                                        readonly timedOutSeconds: {
                                                            readonly type: "integer";
                                                            readonly format: "int64";
                                                            readonly minimum: -9223372036854776000;
                                                            readonly maximum: 9223372036854776000;
                                                        };
                                                        readonly unhealthy: {
                                                            readonly type: "string";
                                                        };
                                                        readonly timedOutReason: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["deployCommandExecutionId", "deployId"];
                                    readonly properties: {
                                        readonly deployCommandExecutionId: {
                                            readonly type: "string";
                                        };
                                        readonly deployId: {
                                            readonly type: "string";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly additionalProperties: true;
                                }, {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly reason: {
                                            readonly type: "object";
                                            readonly required: readonly ["evicted"];
                                            readonly properties: {
                                                readonly evicted: {
                                                    readonly type: "boolean";
                                                };
                                                readonly nonZeroExit: {
                                                    readonly type: "integer";
                                                };
                                                readonly oomKilled: {
                                                    readonly type: "object";
                                                    readonly required: readonly ["memoryLimit"];
                                                    readonly properties: {
                                                        readonly memoryLimit: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                };
                                                readonly timedOutSeconds: {
                                                    readonly type: "integer";
                                                    readonly format: "int64";
                                                    readonly minimum: -9223372036854776000;
                                                    readonly maximum: 9223372036854776000;
                                                };
                                                readonly unhealthy: {
                                                    readonly type: "string";
                                                };
                                                readonly timedOutReason: {
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly additionalProperties: true;
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["triggeredByUser"];
                                    readonly properties: {
                                        readonly triggeredByUser: {
                                            readonly type: readonly ["string", "null"];
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly additionalProperties: true;
                                }, {
                                    readonly type: "object";
                                    readonly additionalProperties: true;
                                }, {
                                    readonly type: "object";
                                    readonly additionalProperties: true;
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["actor"];
                                    readonly properties: {
                                        readonly actor: {
                                            readonly type: "string";
                                        };
                                        readonly suspendedByUser: {
                                            readonly type: "object";
                                            readonly description: "User who triggered the action";
                                            readonly required: readonly ["id", "email"];
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                };
                                                readonly email: {
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["actor"];
                                    readonly properties: {
                                        readonly actor: {
                                            readonly type: "string";
                                        };
                                        readonly resumedByUser: {
                                            readonly type: "object";
                                            readonly description: "User who triggered the action";
                                            readonly required: readonly ["id", "email"];
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                };
                                                readonly email: {
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly additionalProperties: true;
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["trigger"];
                                    readonly properties: {
                                        readonly trigger: {
                                            readonly type: "string";
                                        };
                                    };
                                }];
                            };
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ListHeaders: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly serviceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the service";
                };
            };
            readonly required: readonly ["serviceId"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly path: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for specific paths that headers apply to";
                };
                readonly name: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for header names";
                };
                readonly value: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for header values";
                };
                readonly cursor: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The position in the result list to start from when fetching paginated results. For details, see [Pagination](https://api-docs.render.com/reference/pagination).";
                };
                readonly limit: {
                    readonly type: "integer";
                    readonly default: 20;
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly description: "The maximum number of items to return. For details, see [Pagination](https://api-docs.render.com/reference/pagination).";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["header", "cursor"];
                readonly properties: {
                    readonly header: {
                        readonly type: "object";
                        readonly required: readonly ["id", "path", "name", "value"];
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly path: {
                                readonly type: "string";
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly value: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ListHttpFilterValues: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly startTime: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Epoch/Unix timestamp of end of time range to return. Defaults to `now() - 1 hour`.";
                };
                readonly endTime: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:30:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Epoch/Unix timestamp of end of time range to return. Defaults to `now()`.";
                };
                readonly resolutionSeconds: {
                    readonly type: "number";
                    readonly minimum: 30;
                    readonly default: 60;
                    readonly examples: readonly [60];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The resolution of the returned data";
                };
                readonly resource: {
                    readonly type: "string";
                    readonly examples: readonly ["srv-xxxxx"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Service ID to query. When multiple service ids are provided, they are ORed together";
                };
                readonly service: {
                    readonly type: "string";
                    readonly deprecated: true;
                    readonly examples: readonly ["srv-xxxxx"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "This parameter is deprecated. Please use `resource` instead";
                };
                readonly host: {
                    readonly type: "string";
                    readonly examples: readonly ["example.com"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The hosts of HTTP requests to filter to. When multiple host query params are provided, they are ORed together";
                };
                readonly statusCode: {
                    readonly type: "string";
                    readonly examples: readonly ["200"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The status codes of HTTP requests to filter to. When multiple status code query params are provided, they are ORed together";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly description: "A collection of filter values for HTTP metrics";
            readonly required: readonly ["items"];
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly filter: {
                        readonly type: "string";
                        readonly enum: readonly ["host", "statusCode"];
                        readonly description: "`host` `statusCode`";
                    };
                    readonly values: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                            readonly examples: readonly ["api.example.com"];
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ListJob: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly serviceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the service";
                };
            };
            readonly required: readonly ["serviceId"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly cursor: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The position in the result list to start from when fetching paginated results. For details, see [Pagination](https://api-docs.render.com/reference/pagination).";
                };
                readonly limit: {
                    readonly type: "integer";
                    readonly default: 20;
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly description: "The maximum number of items to return. For details, see [Pagination](https://api-docs.render.com/reference/pagination).";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly status: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["pending", "running", "succeeded", "failed"];
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for the status of the job (`pending`, `running`, `succeeded`, or `failed`)";
                };
                readonly createdBefore: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for jobs created before a certain time (specified as an ISO 8601 timestamp)";
                };
                readonly createdAfter: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-02-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for jobs created after a certain time (specified as an ISO 8601 timestamp)";
                };
                readonly startedBefore: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for jobs started before a certain time (specified as an ISO 8601 timestamp)";
                };
                readonly startedAfter: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-02-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for jobs started after a certain time (specified as an ISO 8601 timestamp)";
                };
                readonly finishedBefore: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for jobs finished before a certain time (specified as an ISO 8601 timestamp)";
                };
                readonly finishedAfter: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-02-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for jobs finished after a certain time (specified as an ISO 8601 timestamp)";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["job", "cursor"];
                readonly properties: {
                    readonly job: {
                        readonly type: "object";
                        readonly required: readonly ["id", "serviceId", "startCommand", "planId", "createdAt"];
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly pattern: "^job-[0-9a-z]{20}$";
                                readonly examples: readonly ["job-cph1rs3idesc73a2b2mg"];
                            };
                            readonly serviceId: {
                                readonly type: "string";
                                readonly examples: readonly ["srv-xxxxx"];
                            };
                            readonly startCommand: {
                                readonly type: "string";
                                readonly examples: readonly ["echo 'hello world'"];
                            };
                            readonly planId: {
                                readonly type: "string";
                                readonly examples: readonly ["plan-srv-004"];
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly enum: readonly ["succeeded", "failed", "canceled"];
                                readonly description: "`succeeded` `failed` `canceled`";
                            };
                            readonly createdAt: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly examples: readonly ["2021-07-15T07:20:05.777035-07:00"];
                            };
                            readonly startedAt: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly examples: readonly ["2021-07-15T07:20:05.777035-07:00"];
                            };
                            readonly finishedAt: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly examples: readonly ["2021-07-15T07:20:05.777035-07:00"];
                            };
                        };
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ListLogs: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly ownerId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the owner (team or personal user) whose resources should be returned";
                };
                readonly startTime: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Epoch/Unix timestamp of end of time range to return. Defaults to `now() - 1 hour`.";
                };
                readonly endTime: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:30:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Epoch/Unix timestamp of end of time range to return. Defaults to `now()`.";
                };
                readonly direction: {
                    readonly default: "backward";
                    readonly type: "string";
                    readonly enum: readonly ["forward", "backward"];
                    readonly description: "The direction to query logs for. Backward will return most recent logs first.\nForward will start with the oldest logs in the time range.\n";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly resource: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter logs by their resource. A resource is the id of a server, cronjob, job, postgres, or redis.";
                };
                readonly instance: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter logs by the instance they were emitted from. An instance is the id of a specific running server.";
                };
                readonly host: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter request logs by their host. [Wildcards and regex](https://docs.render.com/logging#wildcards-and-regular-expressions) are supported.";
                };
                readonly statusCode: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter request logs by their status code. [Wildcards and regex](https://docs.render.com/logging#wildcards-and-regular-expressions) are supported.";
                };
                readonly method: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter request logs by their requests method. [Wildcards and regex](https://docs.render.com/logging#wildcards-and-regular-expressions) are supported.";
                };
                readonly level: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter logs by their severity level. [Wildcards and regex](https://docs.render.com/logging#wildcards-and-regular-expressions) are supported.";
                };
                readonly type: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter logs by their type. Types include `app` for application logs, `request` for request logs, and `build` for build logs. You can find the full set of types available for a query by using the `GET /logs/values` endpoint.";
                };
                readonly text: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter by the text of the logs. [Wildcards and regex](https://docs.render.com/logging#wildcards-and-regular-expressions) are supported.";
                };
                readonly path: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter request logs by their path. [Wildcards and regex](https://docs.render.com/logging#wildcards-and-regular-expressions) are supported.";
                };
                readonly limit: {
                    readonly type: "integer";
                    readonly default: 20;
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly description: "The maximum number of items to return. For details, see [Pagination](https://api-docs.render.com/reference/pagination).";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["ownerId", "resource"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "A run of a cron job";
            readonly required: readonly ["hasMore", "nextStartTime", "nextEndTime", "logs"];
            readonly properties: {
                readonly hasMore: {
                    readonly description: "Ture if there are more logs to fetch";
                    readonly type: "boolean";
                };
                readonly nextStartTime: {
                    readonly description: "The start time to use in the next query to fetch the next set of logs";
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-07-15T07:20:05.777035-07:00"];
                };
                readonly nextEndTime: {
                    readonly description: "The end time to use in the next query to fetch the next set of logs";
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-07-15T07:20:05.777035-07:00"];
                };
                readonly logs: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly description: "A log entry with metadata";
                        readonly required: readonly ["id", "message", "timestamp", "labels"];
                        readonly properties: {
                            readonly id: {
                                readonly description: "A unique ID of the log entry";
                                readonly type: "string";
                            };
                            readonly message: {
                                readonly description: "The message of the log entry";
                                readonly type: "string";
                            };
                            readonly timestamp: {
                                readonly description: "The timestamp of the log entry";
                                readonly type: "string";
                                readonly format: "date-time";
                            };
                            readonly labels: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly description: "A log label";
                                    readonly required: readonly ["name", "value"];
                                    readonly properties: {
                                        readonly name: {
                                            readonly description: "The name of the log label\n\n`resource` `instance` `host` `statusCode` `method` `level` `type` `text` `path`";
                                            readonly type: "string";
                                            readonly enum: readonly ["resource", "instance", "host", "statusCode", "method", "level", "type", "text", "path"];
                                        };
                                        readonly value: {
                                            readonly description: "The value of the log label";
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ListLogsValues: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly ownerId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the owner (team or personal user) whose resources should be returned";
                };
                readonly label: {
                    readonly type: "string";
                    readonly enum: readonly ["instance", "host", "statusCode", "method", "level", "type"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The label to query logs for";
                };
                readonly startTime: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Epoch/Unix timestamp of end of time range to return. Defaults to `now() - 1 hour`.";
                };
                readonly endTime: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:30:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Epoch/Unix timestamp of end of time range to return. Defaults to `now()`.";
                };
                readonly direction: {
                    readonly default: "backward";
                    readonly type: "string";
                    readonly enum: readonly ["forward", "backward"];
                    readonly description: "The direction to query logs for. Backward will return most recent logs first.\nForward will start with the oldest logs in the time range.\n";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly resource: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter logs by their resource. A resource is the id of a server, cronjob, job, postgres, or redis.";
                };
                readonly instance: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter logs by the instance they were emitted from. An instance is the id of a specific running server.";
                };
                readonly host: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter request logs by their host. [Wildcards and regex](https://docs.render.com/logging#wildcards-and-regular-expressions) are supported.";
                };
                readonly statusCode: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter request logs by their status code. [Wildcards and regex](https://docs.render.com/logging#wildcards-and-regular-expressions) are supported.";
                };
                readonly method: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter request logs by their requests method. [Wildcards and regex](https://docs.render.com/logging#wildcards-and-regular-expressions) are supported.";
                };
                readonly level: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter logs by their severity level. [Wildcards and regex](https://docs.render.com/logging#wildcards-and-regular-expressions) are supported.";
                };
                readonly type: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter logs by their type. Types include `app` for application logs, `request` for request logs, and `build` for build logs. You can find the full set of types available for a query by using the `GET /logs/values` endpoint.";
                };
                readonly text: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter by the text of the logs. [Wildcards and regex](https://docs.render.com/logging#wildcards-and-regular-expressions) are supported.";
                };
                readonly path: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter request logs by their path. [Wildcards and regex](https://docs.render.com/logging#wildcards-and-regular-expressions) are supported.";
                };
                readonly limit: {
                    readonly type: "integer";
                    readonly default: 20;
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly description: "The maximum number of items to return. For details, see [Pagination](https://api-docs.render.com/reference/pagination).";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["ownerId", "label", "resource"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "string";
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ListMaintenance: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly resourceId: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly description: "The Id of a resource that can undergo maintenance (Id of a service, a Postgres instance, or a Redis instance)";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly ownerId: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the owner (team or personal user) whose resources should be returned";
                };
                readonly state: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["scheduled", "in_progress", "user_fix_required", "cancelled", "succeeded", "failed"];
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "type", "scheduledAt", "state", "resourceId"];
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                        readonly pattern: "^mrn-[0-9a-z]{20}$";
                        readonly examples: readonly ["mrn-cph1rs3idesc73a2b2mg"];
                    };
                    readonly type: {
                        readonly type: "string";
                    };
                    readonly scheduledAt: {
                        readonly type: "string";
                        readonly format: "date-time";
                    };
                    readonly pendingMaintenanceBy: {
                        readonly type: "string";
                        readonly format: "date-time";
                        readonly description: "If present, the maintenance run cannot be scheduled for later than this date-time.";
                    };
                    readonly state: {
                        readonly type: "string";
                        readonly enum: readonly ["scheduled", "in_progress", "user_fix_required", "cancelled", "succeeded", "failed"];
                        readonly description: "`scheduled` `in_progress` `user_fix_required` `cancelled` `succeeded` `failed`";
                    };
                    readonly resourceId: {
                        readonly type: "string";
                        readonly description: "The Id of a resource that can undergo maintenance (Id of a service, a Postgres instance, or a Redis instance)";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ListNotificationOverrides: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly ownerId: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the owner (team or personal user) whose resources should be returned";
                };
                readonly serviceId: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for resources by service ID";
                };
                readonly cursor: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The position in the result list to start from when fetching paginated results. For details, see [Pagination](https://api-docs.render.com/reference/pagination).";
                };
                readonly limit: {
                    readonly type: "integer";
                    readonly default: 20;
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly description: "The maximum number of items to return. For details, see [Pagination](https://api-docs.render.com/reference/pagination).";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly required: readonly ["override", "cursor"];
                readonly type: "object";
                readonly properties: {
                    readonly override: {
                        readonly type: "object";
                        readonly required: readonly ["type", "serviceId", "previewNotificationsEnabled", "notificationsToSend"];
                        readonly properties: {
                            readonly serviceId: {
                                readonly type: "string";
                            };
                            readonly previewNotificationsEnabled: {
                                readonly type: "string";
                                readonly enum: readonly ["default", "false", "true"];
                                readonly description: "`default` `false` `true`";
                            };
                            readonly notificationsToSend: {
                                readonly type: "string";
                                readonly enum: readonly ["default", "none", "failure", "all"];
                                readonly description: "`default` `none` `failure` `all`";
                            };
                        };
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ListOwners: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly name: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly email: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly cursor: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The position in the result list to start from when fetching paginated results. For details, see [Pagination](https://api-docs.render.com/reference/pagination).";
                };
                readonly limit: {
                    readonly type: "integer";
                    readonly default: 20;
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly description: "The maximum number of items to return. For details, see [Pagination](https://api-docs.render.com/reference/pagination).";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly owner: {
                        readonly type: "object";
                        readonly required: readonly ["id", "name", "email", "type"];
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly email: {
                                readonly type: "string";
                            };
                            readonly twoFactorAuthEnabled: {
                                readonly type: "boolean";
                                readonly description: "Whether two-factor authentication is enabled for the owner. Only present for user owners.";
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["user", "team"];
                                readonly description: "`user` `team`";
                            };
                        };
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ListPathFilterValues: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly startTime: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Epoch/Unix timestamp of end of time range to return. Defaults to `now() - 1 hour`.";
                };
                readonly endTime: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:30:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Epoch/Unix timestamp of end of time range to return. Defaults to `now()`.";
                };
                readonly resolutionSeconds: {
                    readonly type: "number";
                    readonly minimum: 30;
                    readonly default: 60;
                    readonly examples: readonly [60];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The resolution of the returned data";
                };
                readonly resource: {
                    readonly type: "string";
                    readonly examples: readonly ["srv-xxxxx"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Service ID to query. When multiple service ids are provided, they are ORed together";
                };
                readonly service: {
                    readonly type: "string";
                    readonly deprecated: true;
                    readonly examples: readonly ["srv-xxxxx"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "This parameter is deprecated. Please use `resource` instead";
                };
                readonly host: {
                    readonly type: "string";
                    readonly examples: readonly ["example.com"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The hosts of HTTP requests to filter to. When multiple host query params are provided, they are ORed together";
                };
                readonly statusCode: {
                    readonly type: "string";
                    readonly examples: readonly ["200"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The status codes of HTTP requests to filter to. When multiple status code query params are provided, they are ORed together";
                };
                readonly path: {
                    readonly type: "string";
                    readonly examples: readonly ["/graphql"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The paths of HTTP requests to filter to. When multiple path query params are provided, they are ORed together";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly description: "A collection of suggested paths to filter by";
            readonly required: readonly ["items"];
            readonly items: {
                readonly type: "string";
                readonly examples: readonly ["/user/*"];
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ListPostgres: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly name: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter by name";
                };
                readonly region: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["frankfurt", "oregon", "ohio", "singapore", "virginia"];
                        readonly default: "oregon";
                        readonly description: "Defaults to \"oregon\"\n\nDefault: `oregon`";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter by resource region";
                };
                readonly suspended: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["suspended", "not_suspended"];
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter resources based on whether they're suspended or not suspended";
                };
                readonly createdBefore: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for resources created before a certain time (specified as an ISO 8601 timestamp)";
                };
                readonly createdAfter: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-02-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for resources created after a certain time (specified as an ISO 8601 timestamp)";
                };
                readonly updatedBefore: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for resources updated before a certain time (specified as an ISO 8601 timestamp)";
                };
                readonly updatedAfter: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for resources updated after a certain time (specified as an ISO 8601 timestamp)";
                };
                readonly ownerId: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the owner (team or personal user) whose resources should be returned";
                };
                readonly environmentId: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for resources that belong to an environment";
                };
                readonly includeReplicas: {
                    readonly type: "boolean";
                    readonly default: true;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Include replicas in the response";
                };
                readonly cursor: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The position in the result list to start from when fetching paginated results. For details, see [Pagination](https://api-docs.render.com/reference/pagination).";
                };
                readonly limit: {
                    readonly type: "integer";
                    readonly default: 20;
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly description: "The maximum number of items to return. For details, see [Pagination](https://api-docs.render.com/reference/pagination).";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["postgres", "cursor"];
                readonly properties: {
                    readonly postgres: {
                        readonly type: "object";
                        readonly required: readonly ["id", "ipAllowList", "createdAt", "updatedAt", "databaseName", "databaseUser", "highAvailabilityEnabled", "name", "owner", "plan", "region", "readReplicas", "role", "status", "version", "suspended", "suspenders", "dashboardUrl"];
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly ipAllowList: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly required: readonly ["cidrBlock", "description"];
                                    readonly properties: {
                                        readonly cidrBlock: {
                                            readonly type: "string";
                                        };
                                        readonly description: {
                                            readonly description: "User-provided description of the CIDR block";
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                            readonly createdAt: {
                                readonly type: "string";
                                readonly format: "date-time";
                            };
                            readonly updatedAt: {
                                readonly type: "string";
                                readonly format: "date-time";
                            };
                            readonly expiresAt: {
                                readonly description: "The time at which the database will be expire. Applies to free tier databases only.";
                                readonly type: "string";
                                readonly format: "date-time";
                            };
                            readonly databaseName: {
                                readonly type: "string";
                            };
                            readonly databaseUser: {
                                readonly type: "string";
                            };
                            readonly environmentId: {
                                readonly type: "string";
                            };
                            readonly highAvailabilityEnabled: {
                                readonly type: "boolean";
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly owner: {
                                readonly type: "object";
                                readonly required: readonly ["id", "name", "email", "type"];
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly email: {
                                        readonly type: "string";
                                    };
                                    readonly twoFactorAuthEnabled: {
                                        readonly type: "boolean";
                                        readonly description: "Whether two-factor authentication is enabled for the owner. Only present for user owners.";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                        readonly enum: readonly ["user", "team"];
                                        readonly description: "`user` `team`";
                                    };
                                };
                            };
                            readonly plan: {
                                readonly type: "string";
                                readonly enum: readonly ["free", "starter", "standard", "pro", "pro_plus", "custom", "basic_256mb", "basic_1gb", "basic_4gb", "pro_4gb", "pro_8gb", "pro_16gb", "pro_32gb", "pro_64gb", "pro_128gb", "pro_192gb", "pro_256gb", "pro_384gb", "pro_512gb", "accelerated_16gb", "accelerated_32gb", "accelerated_64gb", "accelerated_128gb", "accelerated_256gb", "accelerated_384gb", "accelerated_512gb", "accelerated_768gb", "accelerated_1024gb"];
                                readonly description: "`free` `starter` `standard` `pro` `pro_plus` `custom` `basic_256mb` `basic_1gb` `basic_4gb` `pro_4gb` `pro_8gb` `pro_16gb` `pro_32gb` `pro_64gb` `pro_128gb` `pro_192gb` `pro_256gb` `pro_384gb` `pro_512gb` `accelerated_16gb` `accelerated_32gb` `accelerated_64gb` `accelerated_128gb` `accelerated_256gb` `accelerated_384gb` `accelerated_512gb` `accelerated_768gb` `accelerated_1024gb`";
                            };
                            readonly diskSizeGB: {
                                readonly type: "integer";
                            };
                            readonly primaryPostgresID: {
                                readonly type: "string";
                            };
                            readonly region: {
                                readonly type: "string";
                                readonly enum: readonly ["frankfurt", "oregon", "ohio", "singapore", "virginia"];
                                readonly default: "oregon";
                                readonly description: "Defaults to \"oregon\"\n\n`frankfurt` `oregon` `ohio` `singapore` `virginia`";
                            };
                            readonly readReplicas: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly id: {
                                            readonly type: "string";
                                            readonly description: "The replica instance identifier.";
                                        };
                                        readonly name: {
                                            readonly type: "string";
                                            readonly description: "The display name of the replica instance.";
                                        };
                                    };
                                    readonly required: readonly ["id", "name"];
                                };
                            };
                            readonly role: {
                                readonly type: "string";
                                readonly enum: readonly ["primary", "replica"];
                                readonly description: "`primary` `replica`";
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly enum: readonly ["creating", "available", "unavailable", "config_restart", "suspended", "maintenance_scheduled", "maintenance_in_progress", "recovery_failed", "recovery_in_progress", "unknown", "updating_instance"];
                                readonly description: "`creating` `available` `unavailable` `config_restart` `suspended` `maintenance_scheduled` `maintenance_in_progress` `recovery_failed` `recovery_in_progress` `unknown` `updating_instance`";
                            };
                            readonly version: {
                                readonly type: "string";
                                readonly description: "The PostgreSQL version\n\n`11` `12` `13` `14` `15` `16`";
                                readonly enum: readonly ["11", "12", "13", "14", "15", "16"];
                            };
                            readonly suspended: {
                                readonly type: "string";
                                readonly enum: readonly ["suspended", "not_suspended"];
                                readonly description: "`suspended` `not_suspended`";
                            };
                            readonly suspenders: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                    readonly enum: readonly ["admin", "billing", "user", "parent_service", "unknown"];
                                    readonly description: "`admin` `billing` `user` `parent_service` `unknown`";
                                };
                            };
                            readonly dashboardUrl: {
                                readonly type: "string";
                                readonly description: "The URL to view the PostgreSQL instance in the Render Dashboard";
                            };
                        };
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "409": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ListPostgresBackup: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly postgresId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["postgresId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "createdAt"];
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                    };
                    readonly createdAt: {
                        readonly type: "string";
                        readonly format: "date-time";
                    };
                    readonly url: {
                        readonly type: "string";
                        readonly description: "URL to download the Postgres backup";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ListProjects: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly name: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter by name";
                };
                readonly createdBefore: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for resources created before a certain time (specified as an ISO 8601 timestamp)";
                };
                readonly createdAfter: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-02-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for resources created after a certain time (specified as an ISO 8601 timestamp)";
                };
                readonly updatedBefore: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for resources updated before a certain time (specified as an ISO 8601 timestamp)";
                };
                readonly updatedAfter: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for resources updated after a certain time (specified as an ISO 8601 timestamp)";
                };
                readonly ownerId: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the owner (team or personal user) whose resources should be returned";
                };
                readonly cursor: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The position in the result list to start from when fetching paginated results. For details, see [Pagination](https://api-docs.render.com/reference/pagination).";
                };
                readonly limit: {
                    readonly type: "integer";
                    readonly default: 20;
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly description: "The maximum number of items to return. For details, see [Pagination](https://api-docs.render.com/reference/pagination).";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["project", "cursor"];
                readonly properties: {
                    readonly project: {
                        readonly description: "A project is a collection of environments";
                        readonly type: "object";
                        readonly required: readonly ["id", "createdAt", "updatedAt", "name", "owner", "environmentIds"];
                        readonly properties: {
                            readonly id: {
                                readonly description: "The ID of the project";
                                readonly type: "string";
                            };
                            readonly createdAt: {
                                readonly type: "string";
                                readonly format: "date-time";
                            };
                            readonly updatedAt: {
                                readonly type: "string";
                                readonly format: "date-time";
                            };
                            readonly name: {
                                readonly description: "The name of the project";
                                readonly type: "string";
                            };
                            readonly owner: {
                                readonly type: "object";
                                readonly required: readonly ["id", "name", "email", "type"];
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly email: {
                                        readonly type: "string";
                                    };
                                    readonly twoFactorAuthEnabled: {
                                        readonly type: "boolean";
                                        readonly description: "Whether two-factor authentication is enabled for the owner. Only present for user owners.";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                        readonly enum: readonly ["user", "team"];
                                        readonly description: "`user` `team`";
                                    };
                                };
                            };
                            readonly environmentIds: {
                                readonly description: "The environments associated with the project";
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                    readonly description: "The ID of the environment";
                                };
                            };
                        };
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ListRedis: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly name: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter by name";
                };
                readonly region: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["frankfurt", "oregon", "ohio", "singapore", "virginia"];
                        readonly default: "oregon";
                        readonly description: "Defaults to \"oregon\"\n\nDefault: `oregon`";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter by resource region";
                };
                readonly createdBefore: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for resources created before a certain time (specified as an ISO 8601 timestamp)";
                };
                readonly createdAfter: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-02-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for resources created after a certain time (specified as an ISO 8601 timestamp)";
                };
                readonly updatedBefore: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for resources updated before a certain time (specified as an ISO 8601 timestamp)";
                };
                readonly updatedAfter: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for resources updated after a certain time (specified as an ISO 8601 timestamp)";
                };
                readonly ownerId: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the owner (team or personal user) whose resources should be returned";
                };
                readonly environmentId: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for resources that belong to an environment";
                };
                readonly cursor: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The position in the result list to start from when fetching paginated results. For details, see [Pagination](https://api-docs.render.com/reference/pagination).";
                };
                readonly limit: {
                    readonly type: "integer";
                    readonly default: 20;
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly description: "The maximum number of items to return. For details, see [Pagination](https://api-docs.render.com/reference/pagination).";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["redis", "cursor"];
                readonly properties: {
                    readonly redis: {
                        readonly type: "object";
                        readonly description: "A Redis instance";
                        readonly required: readonly ["id", "createdAt", "updatedAt", "status", "region", "plan", "name", "owner", "options", "ipAllowList", "version", "dashboardUrl"];
                        readonly properties: {
                            readonly id: {
                                readonly description: "The ID of the Redis instance";
                                readonly type: "string";
                            };
                            readonly createdAt: {
                                readonly description: "The creation time of the Redis instance";
                                readonly type: "string";
                                readonly format: "date-time";
                            };
                            readonly updatedAt: {
                                readonly description: "The last updated time of the Redis instance";
                                readonly type: "string";
                                readonly format: "date-time";
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly enum: readonly ["creating", "available", "unavailable", "config_restart", "suspended", "maintenance_scheduled", "maintenance_in_progress", "recovery_failed", "recovery_in_progress", "unknown", "updating_instance"];
                                readonly description: "`creating` `available` `unavailable` `config_restart` `suspended` `maintenance_scheduled` `maintenance_in_progress` `recovery_failed` `recovery_in_progress` `unknown` `updating_instance`";
                            };
                            readonly region: {
                                readonly type: "string";
                                readonly enum: readonly ["frankfurt", "oregon", "ohio", "singapore", "virginia"];
                                readonly default: "oregon";
                                readonly description: "Defaults to \"oregon\"\n\n`frankfurt` `oregon` `ohio` `singapore` `virginia`";
                            };
                            readonly plan: {
                                readonly type: "string";
                                readonly enum: readonly ["free", "starter", "standard", "pro", "pro_plus", "custom"];
                                readonly "x-enum-varnames": readonly ["RedisPlanFree", "RedisPlanStarter", "RedisPlanStandard", "RedisPlanPro", "RedisPlanPro_plus", "RedisPlanCustom"];
                                readonly description: "`free` `starter` `standard` `pro` `pro_plus` `custom`";
                            };
                            readonly name: {
                                readonly description: "The name of the Redis instance";
                                readonly type: "string";
                            };
                            readonly owner: {
                                readonly type: "object";
                                readonly required: readonly ["id", "name", "email", "type"];
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly email: {
                                        readonly type: "string";
                                    };
                                    readonly twoFactorAuthEnabled: {
                                        readonly type: "boolean";
                                        readonly description: "Whether two-factor authentication is enabled for the owner. Only present for user owners.";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                        readonly enum: readonly ["user", "team"];
                                        readonly description: "`user` `team`";
                                    };
                                };
                            };
                            readonly options: {
                                readonly description: "Options for a Redis instance";
                                readonly type: "object";
                                readonly properties: {
                                    readonly maxmemoryPolicy: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly ipAllowList: {
                                readonly description: "The IP allow list for the Redis instance";
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly required: readonly ["cidrBlock", "description"];
                                    readonly properties: {
                                        readonly cidrBlock: {
                                            readonly type: "string";
                                        };
                                        readonly description: {
                                            readonly description: "User-provided description of the CIDR block";
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                            readonly environmentId: {
                                readonly description: "The ID of the environment the Redis instance is associated with";
                                readonly type: "string";
                            };
                            readonly version: {
                                readonly description: "The version of Redis";
                                readonly type: "string";
                            };
                            readonly dashboardUrl: {
                                readonly type: "string";
                                readonly description: "The URL to view the Redis instance in the Render Dashboard";
                            };
                        };
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "409": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ListRegistryCredentials: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly name: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for the name of a credential";
                };
                readonly username: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for the username of a credential";
                };
                readonly type: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["GITHUB", "GITLAB", "DOCKER", "GOOGLE_ARTIFACT", "AWS_ECR"];
                        readonly description: "The registry to use this credential with";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for the registry type for the credential";
                };
                readonly createdBefore: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for services created before a certain time (specified as an ISO 8601 timestamp)";
                };
                readonly createdAfter: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-02-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for services created after a certain time (specified as an ISO 8601 timestamp)";
                };
                readonly updatedBefore: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for services updated before a certain time (specified as an ISO 8601 timestamp)";
                };
                readonly updatedAfter: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-02-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for services updated after a certain time (specified as an ISO 8601 timestamp)";
                };
                readonly ownerId: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the owner (team or personal user) whose resources should be returned";
                };
                readonly cursor: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The position in the result list to start from when fetching paginated results. For details, see [Pagination](https://api-docs.render.com/reference/pagination).";
                };
                readonly limit: {
                    readonly type: "integer";
                    readonly default: 20;
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly description: "The maximum number of items to return. For details, see [Pagination](https://api-docs.render.com/reference/pagination).";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "name", "username", "registry", "updatedAt"];
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                        readonly description: "Unique identifier for this credential";
                    };
                    readonly name: {
                        readonly type: "string";
                        readonly description: "Descriptive name for this credential";
                    };
                    readonly registry: {
                        readonly type: "string";
                        readonly enum: readonly ["GITHUB", "GITLAB", "DOCKER", "GOOGLE_ARTIFACT", "AWS_ECR"];
                        readonly description: "The registry to use this credential with\n\n`GITHUB` `GITLAB` `DOCKER` `GOOGLE_ARTIFACT` `AWS_ECR`";
                    };
                    readonly username: {
                        readonly type: "string";
                        readonly description: "The username associated with the credential";
                    };
                    readonly updatedAt: {
                        readonly type: "string";
                        readonly format: "date-time";
                        readonly description: "Last updated time for the credential";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ListResourceLogStreams: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly ownerId: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the owner (team or personal user) whose resources should be returned";
                };
                readonly logStreamId: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter log streams by their id.";
                };
                readonly resourceId: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "IDs of resources (server, cron job, postgres, or redis) to filter by";
                };
                readonly setting: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly description: "Whether to send logs or drop them.";
                        readonly enum: readonly ["send", "drop"];
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter log streams by their setting.";
                };
                readonly cursor: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The position in the result list to start from when fetching paginated results. For details, see [Pagination](https://api-docs.render.com/reference/pagination).";
                };
                readonly limit: {
                    readonly type: "integer";
                    readonly default: 20;
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly description: "The maximum number of items to return. For details, see [Pagination](https://api-docs.render.com/reference/pagination).";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly description: "Resource log stream overrides";
                readonly properties: {
                    readonly resourceId: {
                        readonly description: "The ID of the resource.";
                        readonly type: "string";
                    };
                    readonly endpoint: {
                        readonly description: "The endpoint to stream logs to. Must be present if setting is send. Cannot be present if setting is drop.";
                        readonly type: "string";
                    };
                    readonly setting: {
                        readonly type: "string";
                        readonly description: "Whether to send logs or drop them.\n\n`send` `drop`";
                        readonly enum: readonly ["send", "drop"];
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ListRoutes: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly serviceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the service";
                };
            };
            readonly required: readonly ["serviceId"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly type: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["redirect", "rewrite"];
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for the type of route rule";
                };
                readonly source: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for the source path of the route";
                };
                readonly destination: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for the destination path of the route";
                };
                readonly cursor: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The position in the result list to start from when fetching paginated results. For details, see [Pagination](https://api-docs.render.com/reference/pagination).";
                };
                readonly limit: {
                    readonly type: "integer";
                    readonly default: 20;
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly description: "The maximum number of items to return. For details, see [Pagination](https://api-docs.render.com/reference/pagination).";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["route", "cursor"];
                readonly properties: {
                    readonly route: {
                        readonly type: "object";
                        readonly required: readonly ["id", "type", "source", "destination", "priority"];
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["redirect", "rewrite"];
                                readonly description: "`redirect` `rewrite`";
                            };
                            readonly source: {
                                readonly type: "string";
                            };
                            readonly destination: {
                                readonly type: "string";
                            };
                            readonly priority: {
                                readonly type: "integer";
                                readonly description: "Redirect and Rewrite Rules are applied in priority order starting at 0";
                            };
                        };
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ListSecretFilesForService: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly serviceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the service";
                };
            };
            readonly required: readonly ["serviceId"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly cursor: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The position in the result list to start from when fetching paginated results. For details, see [Pagination](https://api-docs.render.com/reference/pagination).";
                };
                readonly limit: {
                    readonly type: "integer";
                    readonly default: 20;
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly description: "The maximum number of items to return. For details, see [Pagination](https://api-docs.render.com/reference/pagination).";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["secretFile", "cursor"];
                readonly properties: {
                    readonly secretFile: {
                        readonly type: "object";
                        readonly required: readonly ["name", "content"];
                        readonly properties: {
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly content: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ListServices: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly name: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter by name";
                };
                readonly type: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["static_site", "web_service", "private_service", "background_worker", "cron_job"];
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for types of services";
                };
                readonly environmentId: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for resources that belong to an environment";
                };
                readonly env: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                        readonly description: "Runtime";
                    };
                    readonly deprecated: true;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for environments (runtimes) of services (deprecated; use `runtime` instead)";
                };
                readonly region: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["frankfurt", "oregon", "ohio", "singapore", "virginia"];
                        readonly default: "oregon";
                        readonly description: "Defaults to \"oregon\"\n\nDefault: `oregon`";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter by resource region";
                };
                readonly suspended: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["suspended", "not_suspended"];
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter resources based on whether they're suspended or not suspended";
                };
                readonly createdBefore: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for resources created before a certain time (specified as an ISO 8601 timestamp)";
                };
                readonly createdAfter: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-02-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for resources created after a certain time (specified as an ISO 8601 timestamp)";
                };
                readonly updatedBefore: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for resources updated before a certain time (specified as an ISO 8601 timestamp)";
                };
                readonly updatedAfter: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for resources updated after a certain time (specified as an ISO 8601 timestamp)";
                };
                readonly ownerId: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the owner (team or personal user) whose resources should be returned";
                };
                readonly includePreviews: {
                    readonly type: "boolean";
                    readonly default: true;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Include previews in the response";
                };
                readonly cursor: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The position in the result list to start from when fetching paginated results. For details, see [Pagination](https://api-docs.render.com/reference/pagination).";
                };
                readonly limit: {
                    readonly type: "integer";
                    readonly default: 20;
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly description: "The maximum number of items to return. For details, see [Pagination](https://api-docs.render.com/reference/pagination).";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["service", "cursor"];
                readonly properties: {
                    readonly service: {
                        readonly type: "object";
                        readonly required: readonly ["id", "name", "ownerId", "type", "createdAt", "dashboardUrl", "updatedAt", "suspended", "suspenders", "autoDeploy", "notifyOnFail", "slug", "serviceDetails", "rootDir"];
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly autoDeploy: {
                                readonly type: "string";
                                readonly enum: readonly ["yes", "no"];
                                readonly default: "yes";
                                readonly description: "`yes` `no`";
                            };
                            readonly branch: {
                                readonly type: "string";
                            };
                            readonly buildFilter: {
                                readonly type: "object";
                                readonly required: readonly ["paths", "ignoredPaths"];
                                readonly properties: {
                                    readonly paths: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly ignoredPaths: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                            readonly createdAt: {
                                readonly type: "string";
                                readonly format: "date-time";
                            };
                            readonly dashboardUrl: {
                                readonly type: "string";
                                readonly description: "The URL to view the service in the Render Dashboard";
                            };
                            readonly environmentId: {
                                readonly type: "string";
                            };
                            readonly imagePath: {
                                readonly type: "string";
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly notifyOnFail: {
                                readonly type: "string";
                                readonly enum: readonly ["default", "notify", "ignore"];
                                readonly description: "`default` `notify` `ignore`";
                            };
                            readonly ownerId: {
                                readonly type: "string";
                            };
                            readonly registryCredential: {
                                readonly type: "object";
                                readonly required: readonly ["id", "name"];
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly repo: {
                                readonly type: "string";
                                readonly examples: readonly ["https://github.com/render-examples/flask-hello-world"];
                            };
                            readonly rootDir: {
                                readonly type: "string";
                            };
                            readonly slug: {
                                readonly type: "string";
                            };
                            readonly suspended: {
                                readonly type: "string";
                                readonly enum: readonly ["suspended", "not_suspended"];
                                readonly description: "`suspended` `not_suspended`";
                            };
                            readonly suspenders: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                    readonly enum: readonly ["admin", "billing", "user", "parent_service", "unknown"];
                                    readonly description: "`admin` `billing` `user` `parent_service` `unknown`";
                                };
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["static_site", "web_service", "private_service", "background_worker", "cron_job"];
                                readonly description: "`static_site` `web_service` `private_service` `background_worker` `cron_job`";
                            };
                            readonly updatedAt: {
                                readonly type: "string";
                                readonly format: "date-time";
                            };
                            readonly serviceDetails: {
                                readonly oneOf: readonly [{
                                    readonly type: "object";
                                    readonly required: readonly ["buildCommand", "publishPath", "url", "buildPlan"];
                                    readonly properties: {
                                        readonly buildCommand: {
                                            readonly type: "string";
                                        };
                                        readonly parentServer: {
                                            readonly required: readonly ["id", "name"];
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                };
                                                readonly name: {
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                        readonly publishPath: {
                                            readonly type: "string";
                                        };
                                        readonly pullRequestPreviewsEnabled: {
                                            readonly type: "string";
                                            readonly enum: readonly ["yes", "no"];
                                            readonly default: "no";
                                            readonly deprecated: true;
                                            readonly description: "This field has been deprecated. previews.generation should be used in its place.\n\n`yes` `no`";
                                        };
                                        readonly previews: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly generation: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["off", "manual", "automatic"];
                                                    readonly default: "off";
                                                    readonly description: "Defaults to \"off\"\n\n`off` `manual` `automatic`";
                                                };
                                            };
                                        };
                                        readonly url: {
                                            readonly type: "string";
                                        };
                                        readonly buildPlan: {
                                            readonly type: "string";
                                            readonly enum: readonly ["starter", "performance"];
                                            readonly default: "starter";
                                            readonly description: "`starter` `performance`";
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["env", "runtime", "envSpecificDetails", "plan", "region", "numInstances", "buildPlan", "healthCheckPath", "openPorts", "url"];
                                    readonly properties: {
                                        readonly autoscaling: {
                                            readonly type: "object";
                                            readonly required: readonly ["enabled", "min", "max", "criteria"];
                                            readonly properties: {
                                                readonly enabled: {
                                                    readonly type: "boolean";
                                                    readonly default: false;
                                                };
                                                readonly min: {
                                                    readonly type: "integer";
                                                    readonly description: "The minimum number of instances for the service";
                                                };
                                                readonly max: {
                                                    readonly type: "integer";
                                                    readonly description: "The maximum number of instances for the service";
                                                };
                                                readonly criteria: {
                                                    readonly type: "object";
                                                    readonly required: readonly ["cpu", "memory"];
                                                    readonly properties: {
                                                        readonly cpu: {
                                                            readonly type: "object";
                                                            readonly required: readonly ["enabled", "percentage"];
                                                            readonly properties: {
                                                                readonly enabled: {
                                                                    readonly type: "boolean";
                                                                    readonly default: false;
                                                                };
                                                                readonly percentage: {
                                                                    readonly type: "integer";
                                                                    readonly description: "Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.\n";
                                                                };
                                                            };
                                                        };
                                                        readonly memory: {
                                                            readonly type: "object";
                                                            readonly required: readonly ["enabled", "percentage"];
                                                            readonly properties: {
                                                                readonly enabled: {
                                                                    readonly type: "boolean";
                                                                    readonly default: false;
                                                                };
                                                                readonly percentage: {
                                                                    readonly type: "integer";
                                                                    readonly description: "Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.\n";
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                        readonly disk: {
                                            readonly type: "object";
                                            readonly required: readonly ["id", "name", "sizeGB", "mountPath"];
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                    readonly pattern: "^dsk-[0-9a-z]{20}$";
                                                    readonly examples: readonly ["dsk-cph1rs3idesc73a2b2mg"];
                                                };
                                                readonly name: {
                                                    readonly type: "string";
                                                };
                                                readonly sizeGB: {
                                                    readonly type: "integer";
                                                };
                                                readonly mountPath: {
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                        readonly env: {
                                            readonly type: "string";
                                            readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                                            readonly deprecated: true;
                                            readonly description: "This field has been deprecated, runtime should be used in its place.\n\n`docker` `elixir` `go` `node` `python` `ruby` `rust` `image`";
                                        };
                                        readonly envSpecificDetails: {
                                            readonly oneOf: readonly [{
                                                readonly type: "object";
                                                readonly required: readonly ["dockerCommand", "dockerContext", "dockerfilePath"];
                                                readonly properties: {
                                                    readonly dockerCommand: {
                                                        readonly type: "string";
                                                    };
                                                    readonly dockerContext: {
                                                        readonly type: "string";
                                                    };
                                                    readonly dockerfilePath: {
                                                        readonly type: "string";
                                                    };
                                                    readonly preDeployCommand: {
                                                        readonly type: "string";
                                                    };
                                                    readonly registryCredential: {
                                                        readonly type: "object";
                                                        readonly required: readonly ["id", "name", "username", "registry", "updatedAt"];
                                                        readonly properties: {
                                                            readonly id: {
                                                                readonly type: "string";
                                                                readonly description: "Unique identifier for this credential";
                                                            };
                                                            readonly name: {
                                                                readonly type: "string";
                                                                readonly description: "Descriptive name for this credential";
                                                            };
                                                            readonly registry: {
                                                                readonly type: "string";
                                                                readonly enum: readonly ["GITHUB", "GITLAB", "DOCKER", "GOOGLE_ARTIFACT", "AWS_ECR"];
                                                                readonly description: "The registry to use this credential with\n\n`GITHUB` `GITLAB` `DOCKER` `GOOGLE_ARTIFACT` `AWS_ECR`";
                                                            };
                                                            readonly username: {
                                                                readonly type: "string";
                                                                readonly description: "The username associated with the credential";
                                                            };
                                                            readonly updatedAt: {
                                                                readonly type: "string";
                                                                readonly format: "date-time";
                                                                readonly description: "Last updated time for the credential";
                                                            };
                                                        };
                                                    };
                                                };
                                            }, {
                                                readonly type: "object";
                                                readonly required: readonly ["buildCommand", "startCommand"];
                                                readonly properties: {
                                                    readonly buildCommand: {
                                                        readonly type: "string";
                                                    };
                                                    readonly startCommand: {
                                                        readonly type: "string";
                                                    };
                                                    readonly preDeployCommand: {
                                                        readonly type: "string";
                                                    };
                                                };
                                            }];
                                        };
                                        readonly healthCheckPath: {
                                            readonly type: "string";
                                        };
                                        readonly maintenanceMode: {
                                            readonly type: "object";
                                            readonly required: readonly ["enabled", "uri"];
                                            readonly properties: {
                                                readonly enabled: {
                                                    readonly type: "boolean";
                                                };
                                                readonly uri: {
                                                    readonly type: "string";
                                                    readonly description: "The page to be served when [maintenance mode](https://docs.render.com/maintenance-mode) is enabled. When empty, the default maintenance mode page is served.";
                                                };
                                            };
                                        };
                                        readonly numInstances: {
                                            readonly type: "integer";
                                            readonly description: "For a *manually* scaled service, this is the number of instances the service is scaled to. DOES NOT indicate the number of running instances for an *autoscaled* service.";
                                        };
                                        readonly openPorts: {
                                            readonly type: "array";
                                            readonly items: {
                                                readonly type: "object";
                                                readonly required: readonly ["port", "protocol"];
                                                readonly properties: {
                                                    readonly port: {
                                                        readonly type: "integer";
                                                        readonly examples: readonly [10000];
                                                    };
                                                    readonly protocol: {
                                                        readonly type: "string";
                                                        readonly enum: readonly ["TCP", "UDP"];
                                                        readonly description: "`TCP` `UDP`";
                                                    };
                                                };
                                            };
                                        };
                                        readonly parentServer: {
                                            readonly required: readonly ["id", "name"];
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                };
                                                readonly name: {
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                        readonly plan: {
                                            readonly type: "string";
                                            readonly enum: readonly ["starter", "starter_plus", "standard", "standard_plus", "pro", "pro_plus", "pro_max", "pro_ultra", "free", "custom"];
                                            readonly description: "The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.\n\n`starter` `starter_plus` `standard` `standard_plus` `pro` `pro_plus` `pro_max` `pro_ultra` `free` `custom`";
                                            readonly examples: readonly ["starter"];
                                        };
                                        readonly pullRequestPreviewsEnabled: {
                                            readonly type: "string";
                                            readonly enum: readonly ["yes", "no"];
                                            readonly default: "no";
                                            readonly deprecated: true;
                                            readonly description: "This field has been deprecated. previews.generation should be used in its place.\n\n`yes` `no`";
                                        };
                                        readonly previews: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly generation: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["off", "manual", "automatic"];
                                                    readonly default: "off";
                                                    readonly description: "Defaults to \"off\"\n\n`off` `manual` `automatic`";
                                                };
                                            };
                                        };
                                        readonly region: {
                                            readonly type: "string";
                                            readonly enum: readonly ["frankfurt", "oregon", "ohio", "singapore", "virginia"];
                                            readonly default: "oregon";
                                            readonly description: "Defaults to \"oregon\"\n\n`frankfurt` `oregon` `ohio` `singapore` `virginia`";
                                        };
                                        readonly runtime: {
                                            readonly type: "string";
                                            readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                                            readonly description: "Runtime\n\n`docker` `elixir` `go` `node` `python` `ruby` `rust` `image`";
                                        };
                                        readonly sshAddress: {
                                            readonly type: "string";
                                            readonly description: "The SSH address for the service. Only present for services that have SSH enabled.";
                                        };
                                        readonly url: {
                                            readonly type: "string";
                                        };
                                        readonly buildPlan: {
                                            readonly type: "string";
                                            readonly enum: readonly ["starter", "performance"];
                                            readonly default: "starter";
                                            readonly description: "`starter` `performance`";
                                        };
                                        readonly maxShutdownDelaySeconds: {
                                            readonly type: "integer";
                                            readonly description: "The maximum amount of time (in seconds) that Render waits for your application process to exit gracefully after sending it a SIGTERM signal.";
                                            readonly minimum: 1;
                                            readonly maximum: 300;
                                            readonly default: 30;
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["env", "runtime", "envSpecificDetails", "plan", "region", "numInstances", "buildPlan", "openPorts", "url"];
                                    readonly properties: {
                                        readonly autoscaling: {
                                            readonly type: "object";
                                            readonly required: readonly ["enabled", "min", "max", "criteria"];
                                            readonly properties: {
                                                readonly enabled: {
                                                    readonly type: "boolean";
                                                    readonly default: false;
                                                };
                                                readonly min: {
                                                    readonly type: "integer";
                                                    readonly description: "The minimum number of instances for the service";
                                                };
                                                readonly max: {
                                                    readonly type: "integer";
                                                    readonly description: "The maximum number of instances for the service";
                                                };
                                                readonly criteria: {
                                                    readonly type: "object";
                                                    readonly required: readonly ["cpu", "memory"];
                                                    readonly properties: {
                                                        readonly cpu: {
                                                            readonly type: "object";
                                                            readonly required: readonly ["enabled", "percentage"];
                                                            readonly properties: {
                                                                readonly enabled: {
                                                                    readonly type: "boolean";
                                                                    readonly default: false;
                                                                };
                                                                readonly percentage: {
                                                                    readonly type: "integer";
                                                                    readonly description: "Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.\n";
                                                                };
                                                            };
                                                        };
                                                        readonly memory: {
                                                            readonly type: "object";
                                                            readonly required: readonly ["enabled", "percentage"];
                                                            readonly properties: {
                                                                readonly enabled: {
                                                                    readonly type: "boolean";
                                                                    readonly default: false;
                                                                };
                                                                readonly percentage: {
                                                                    readonly type: "integer";
                                                                    readonly description: "Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.\n";
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                        readonly disk: {
                                            readonly type: "object";
                                            readonly required: readonly ["id", "name", "sizeGB", "mountPath"];
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                    readonly pattern: "^dsk-[0-9a-z]{20}$";
                                                    readonly examples: readonly ["dsk-cph1rs3idesc73a2b2mg"];
                                                };
                                                readonly name: {
                                                    readonly type: "string";
                                                };
                                                readonly sizeGB: {
                                                    readonly type: "integer";
                                                };
                                                readonly mountPath: {
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                        readonly env: {
                                            readonly type: "string";
                                            readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                                            readonly deprecated: true;
                                            readonly description: "This field has been deprecated, runtime should be used in its place.\n\n`docker` `elixir` `go` `node` `python` `ruby` `rust` `image`";
                                        };
                                        readonly envSpecificDetails: {
                                            readonly oneOf: readonly [{
                                                readonly type: "object";
                                                readonly required: readonly ["dockerCommand", "dockerContext", "dockerfilePath"];
                                                readonly properties: {
                                                    readonly dockerCommand: {
                                                        readonly type: "string";
                                                    };
                                                    readonly dockerContext: {
                                                        readonly type: "string";
                                                    };
                                                    readonly dockerfilePath: {
                                                        readonly type: "string";
                                                    };
                                                    readonly preDeployCommand: {
                                                        readonly type: "string";
                                                    };
                                                    readonly registryCredential: {
                                                        readonly type: "object";
                                                        readonly required: readonly ["id", "name", "username", "registry", "updatedAt"];
                                                        readonly properties: {
                                                            readonly id: {
                                                                readonly type: "string";
                                                                readonly description: "Unique identifier for this credential";
                                                            };
                                                            readonly name: {
                                                                readonly type: "string";
                                                                readonly description: "Descriptive name for this credential";
                                                            };
                                                            readonly registry: {
                                                                readonly type: "string";
                                                                readonly enum: readonly ["GITHUB", "GITLAB", "DOCKER", "GOOGLE_ARTIFACT", "AWS_ECR"];
                                                                readonly description: "The registry to use this credential with\n\n`GITHUB` `GITLAB` `DOCKER` `GOOGLE_ARTIFACT` `AWS_ECR`";
                                                            };
                                                            readonly username: {
                                                                readonly type: "string";
                                                                readonly description: "The username associated with the credential";
                                                            };
                                                            readonly updatedAt: {
                                                                readonly type: "string";
                                                                readonly format: "date-time";
                                                                readonly description: "Last updated time for the credential";
                                                            };
                                                        };
                                                    };
                                                };
                                            }, {
                                                readonly type: "object";
                                                readonly required: readonly ["buildCommand", "startCommand"];
                                                readonly properties: {
                                                    readonly buildCommand: {
                                                        readonly type: "string";
                                                    };
                                                    readonly startCommand: {
                                                        readonly type: "string";
                                                    };
                                                    readonly preDeployCommand: {
                                                        readonly type: "string";
                                                    };
                                                };
                                            }];
                                        };
                                        readonly numInstances: {
                                            readonly type: "integer";
                                            readonly description: "For a *manually* scaled service, this is the number of instances the service is scaled to. DOES NOT indicate the number of running instances for an *autoscaled* service.";
                                        };
                                        readonly openPorts: {
                                            readonly type: "array";
                                            readonly items: {
                                                readonly type: "object";
                                                readonly required: readonly ["port", "protocol"];
                                                readonly properties: {
                                                    readonly port: {
                                                        readonly type: "integer";
                                                        readonly examples: readonly [10000];
                                                    };
                                                    readonly protocol: {
                                                        readonly type: "string";
                                                        readonly enum: readonly ["TCP", "UDP"];
                                                        readonly description: "`TCP` `UDP`";
                                                    };
                                                };
                                            };
                                        };
                                        readonly parentServer: {
                                            readonly required: readonly ["id", "name"];
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                };
                                                readonly name: {
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                        readonly plan: {
                                            readonly type: "string";
                                            readonly enum: readonly ["starter", "starter_plus", "standard", "standard_plus", "pro", "pro_plus", "pro_max", "pro_ultra", "free", "custom"];
                                            readonly description: "The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.\n\n`starter` `starter_plus` `standard` `standard_plus` `pro` `pro_plus` `pro_max` `pro_ultra` `free` `custom`";
                                            readonly examples: readonly ["starter"];
                                        };
                                        readonly pullRequestPreviewsEnabled: {
                                            readonly type: "string";
                                            readonly enum: readonly ["yes", "no"];
                                            readonly default: "no";
                                            readonly deprecated: true;
                                            readonly description: "This field has been deprecated. previews.generation should be used in its place.\n\n`yes` `no`";
                                        };
                                        readonly previews: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly generation: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["off", "manual", "automatic"];
                                                    readonly default: "off";
                                                    readonly description: "Defaults to \"off\"\n\n`off` `manual` `automatic`";
                                                };
                                            };
                                        };
                                        readonly region: {
                                            readonly type: "string";
                                            readonly enum: readonly ["frankfurt", "oregon", "ohio", "singapore", "virginia"];
                                            readonly default: "oregon";
                                            readonly description: "Defaults to \"oregon\"\n\n`frankfurt` `oregon` `ohio` `singapore` `virginia`";
                                        };
                                        readonly runtime: {
                                            readonly type: "string";
                                            readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                                            readonly description: "Runtime\n\n`docker` `elixir` `go` `node` `python` `ruby` `rust` `image`";
                                        };
                                        readonly sshAddress: {
                                            readonly type: "string";
                                            readonly description: "The SSH address for the service. Only present for services that have SSH enabled.";
                                        };
                                        readonly url: {
                                            readonly type: "string";
                                        };
                                        readonly buildPlan: {
                                            readonly type: "string";
                                            readonly enum: readonly ["starter", "performance"];
                                            readonly default: "starter";
                                            readonly description: "`starter` `performance`";
                                        };
                                        readonly maxShutdownDelaySeconds: {
                                            readonly type: "integer";
                                            readonly description: "The maximum amount of time (in seconds) that Render waits for your application process to exit gracefully after sending it a SIGTERM signal.";
                                            readonly minimum: 1;
                                            readonly maximum: 300;
                                            readonly default: 30;
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["env", "runtime", "envSpecificDetails", "plan", "region", "numInstances", "buildPlan"];
                                    readonly properties: {
                                        readonly autoscaling: {
                                            readonly type: "object";
                                            readonly required: readonly ["enabled", "min", "max", "criteria"];
                                            readonly properties: {
                                                readonly enabled: {
                                                    readonly type: "boolean";
                                                    readonly default: false;
                                                };
                                                readonly min: {
                                                    readonly type: "integer";
                                                    readonly description: "The minimum number of instances for the service";
                                                };
                                                readonly max: {
                                                    readonly type: "integer";
                                                    readonly description: "The maximum number of instances for the service";
                                                };
                                                readonly criteria: {
                                                    readonly type: "object";
                                                    readonly required: readonly ["cpu", "memory"];
                                                    readonly properties: {
                                                        readonly cpu: {
                                                            readonly type: "object";
                                                            readonly required: readonly ["enabled", "percentage"];
                                                            readonly properties: {
                                                                readonly enabled: {
                                                                    readonly type: "boolean";
                                                                    readonly default: false;
                                                                };
                                                                readonly percentage: {
                                                                    readonly type: "integer";
                                                                    readonly description: "Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.\n";
                                                                };
                                                            };
                                                        };
                                                        readonly memory: {
                                                            readonly type: "object";
                                                            readonly required: readonly ["enabled", "percentage"];
                                                            readonly properties: {
                                                                readonly enabled: {
                                                                    readonly type: "boolean";
                                                                    readonly default: false;
                                                                };
                                                                readonly percentage: {
                                                                    readonly type: "integer";
                                                                    readonly description: "Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.\n";
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                        readonly disk: {
                                            readonly type: "object";
                                            readonly required: readonly ["id", "name", "sizeGB", "mountPath"];
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                    readonly pattern: "^dsk-[0-9a-z]{20}$";
                                                    readonly examples: readonly ["dsk-cph1rs3idesc73a2b2mg"];
                                                };
                                                readonly name: {
                                                    readonly type: "string";
                                                };
                                                readonly sizeGB: {
                                                    readonly type: "integer";
                                                };
                                                readonly mountPath: {
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                        readonly env: {
                                            readonly type: "string";
                                            readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                                            readonly deprecated: true;
                                            readonly description: "This field has been deprecated, runtime should be used in its place.\n\n`docker` `elixir` `go` `node` `python` `ruby` `rust` `image`";
                                        };
                                        readonly envSpecificDetails: {
                                            readonly oneOf: readonly [{
                                                readonly type: "object";
                                                readonly required: readonly ["dockerCommand", "dockerContext", "dockerfilePath"];
                                                readonly properties: {
                                                    readonly dockerCommand: {
                                                        readonly type: "string";
                                                    };
                                                    readonly dockerContext: {
                                                        readonly type: "string";
                                                    };
                                                    readonly dockerfilePath: {
                                                        readonly type: "string";
                                                    };
                                                    readonly preDeployCommand: {
                                                        readonly type: "string";
                                                    };
                                                    readonly registryCredential: {
                                                        readonly type: "object";
                                                        readonly required: readonly ["id", "name", "username", "registry", "updatedAt"];
                                                        readonly properties: {
                                                            readonly id: {
                                                                readonly type: "string";
                                                                readonly description: "Unique identifier for this credential";
                                                            };
                                                            readonly name: {
                                                                readonly type: "string";
                                                                readonly description: "Descriptive name for this credential";
                                                            };
                                                            readonly registry: {
                                                                readonly type: "string";
                                                                readonly enum: readonly ["GITHUB", "GITLAB", "DOCKER", "GOOGLE_ARTIFACT", "AWS_ECR"];
                                                                readonly description: "The registry to use this credential with\n\n`GITHUB` `GITLAB` `DOCKER` `GOOGLE_ARTIFACT` `AWS_ECR`";
                                                            };
                                                            readonly username: {
                                                                readonly type: "string";
                                                                readonly description: "The username associated with the credential";
                                                            };
                                                            readonly updatedAt: {
                                                                readonly type: "string";
                                                                readonly format: "date-time";
                                                                readonly description: "Last updated time for the credential";
                                                            };
                                                        };
                                                    };
                                                };
                                            }, {
                                                readonly type: "object";
                                                readonly required: readonly ["buildCommand", "startCommand"];
                                                readonly properties: {
                                                    readonly buildCommand: {
                                                        readonly type: "string";
                                                    };
                                                    readonly startCommand: {
                                                        readonly type: "string";
                                                    };
                                                    readonly preDeployCommand: {
                                                        readonly type: "string";
                                                    };
                                                };
                                            }];
                                        };
                                        readonly numInstances: {
                                            readonly type: "integer";
                                            readonly description: "For a *manually* scaled service, this is the number of instances the service is scaled to. DOES NOT indicate the number of running instances for an *autoscaled* service.";
                                        };
                                        readonly parentServer: {
                                            readonly required: readonly ["id", "name"];
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                };
                                                readonly name: {
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                        readonly plan: {
                                            readonly type: "string";
                                            readonly enum: readonly ["starter", "starter_plus", "standard", "standard_plus", "pro", "pro_plus", "pro_max", "pro_ultra", "free", "custom"];
                                            readonly description: "The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.\n\n`starter` `starter_plus` `standard` `standard_plus` `pro` `pro_plus` `pro_max` `pro_ultra` `free` `custom`";
                                            readonly examples: readonly ["starter"];
                                        };
                                        readonly pullRequestPreviewsEnabled: {
                                            readonly type: "string";
                                            readonly enum: readonly ["yes", "no"];
                                            readonly default: "no";
                                            readonly deprecated: true;
                                            readonly description: "This field has been deprecated. previews.generation should be used in its place.\n\n`yes` `no`";
                                        };
                                        readonly previews: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly generation: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["off", "manual", "automatic"];
                                                    readonly default: "off";
                                                    readonly description: "Defaults to \"off\"\n\n`off` `manual` `automatic`";
                                                };
                                            };
                                        };
                                        readonly region: {
                                            readonly type: "string";
                                            readonly enum: readonly ["frankfurt", "oregon", "ohio", "singapore", "virginia"];
                                            readonly default: "oregon";
                                            readonly description: "Defaults to \"oregon\"\n\n`frankfurt` `oregon` `ohio` `singapore` `virginia`";
                                        };
                                        readonly runtime: {
                                            readonly type: "string";
                                            readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                                            readonly description: "Runtime\n\n`docker` `elixir` `go` `node` `python` `ruby` `rust` `image`";
                                        };
                                        readonly sshAddress: {
                                            readonly type: "string";
                                            readonly description: "The SSH address for the service. Only present for services that have SSH enabled.";
                                        };
                                        readonly buildPlan: {
                                            readonly type: "string";
                                            readonly enum: readonly ["starter", "performance"];
                                            readonly default: "starter";
                                            readonly description: "`starter` `performance`";
                                        };
                                        readonly maxShutdownDelaySeconds: {
                                            readonly type: "integer";
                                            readonly description: "The maximum amount of time (in seconds) that Render waits for your application process to exit gracefully after sending it a SIGTERM signal.";
                                            readonly minimum: 1;
                                            readonly maximum: 300;
                                            readonly default: 30;
                                        };
                                    };
                                }, {
                                    readonly required: readonly ["env", "runtime", "envSpecificDetails", "plan", "region", "schedule", "buildPlan"];
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly env: {
                                            readonly type: "string";
                                            readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                                            readonly deprecated: true;
                                            readonly description: "This field has been deprecated, runtime should be used in its place.\n\n`docker` `elixir` `go` `node` `python` `ruby` `rust` `image`";
                                        };
                                        readonly envSpecificDetails: {
                                            readonly oneOf: readonly [{
                                                readonly type: "object";
                                                readonly required: readonly ["dockerCommand", "dockerContext", "dockerfilePath"];
                                                readonly properties: {
                                                    readonly dockerCommand: {
                                                        readonly type: "string";
                                                    };
                                                    readonly dockerContext: {
                                                        readonly type: "string";
                                                    };
                                                    readonly dockerfilePath: {
                                                        readonly type: "string";
                                                    };
                                                    readonly preDeployCommand: {
                                                        readonly type: "string";
                                                    };
                                                    readonly registryCredential: {
                                                        readonly type: "object";
                                                        readonly required: readonly ["id", "name", "username", "registry", "updatedAt"];
                                                        readonly properties: {
                                                            readonly id: {
                                                                readonly type: "string";
                                                                readonly description: "Unique identifier for this credential";
                                                            };
                                                            readonly name: {
                                                                readonly type: "string";
                                                                readonly description: "Descriptive name for this credential";
                                                            };
                                                            readonly registry: {
                                                                readonly type: "string";
                                                                readonly enum: readonly ["GITHUB", "GITLAB", "DOCKER", "GOOGLE_ARTIFACT", "AWS_ECR"];
                                                                readonly description: "The registry to use this credential with\n\n`GITHUB` `GITLAB` `DOCKER` `GOOGLE_ARTIFACT` `AWS_ECR`";
                                                            };
                                                            readonly username: {
                                                                readonly type: "string";
                                                                readonly description: "The username associated with the credential";
                                                            };
                                                            readonly updatedAt: {
                                                                readonly type: "string";
                                                                readonly format: "date-time";
                                                                readonly description: "Last updated time for the credential";
                                                            };
                                                        };
                                                    };
                                                };
                                            }, {
                                                readonly type: "object";
                                                readonly required: readonly ["buildCommand", "startCommand"];
                                                readonly properties: {
                                                    readonly buildCommand: {
                                                        readonly type: "string";
                                                    };
                                                    readonly startCommand: {
                                                        readonly type: "string";
                                                    };
                                                    readonly preDeployCommand: {
                                                        readonly type: "string";
                                                    };
                                                };
                                            }];
                                        };
                                        readonly lastSuccessfulRunAt: {
                                            readonly type: "string";
                                            readonly format: "date-time";
                                        };
                                        readonly plan: {
                                            readonly type: "string";
                                            readonly enum: readonly ["starter", "starter_plus", "standard", "standard_plus", "pro", "pro_plus", "pro_max", "pro_ultra", "free", "custom"];
                                            readonly description: "The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.\n\n`starter` `starter_plus` `standard` `standard_plus` `pro` `pro_plus` `pro_max` `pro_ultra` `free` `custom`";
                                            readonly examples: readonly ["starter"];
                                        };
                                        readonly region: {
                                            readonly type: "string";
                                            readonly enum: readonly ["frankfurt", "oregon", "ohio", "singapore", "virginia"];
                                            readonly default: "oregon";
                                            readonly description: "Defaults to \"oregon\"\n\n`frankfurt` `oregon` `ohio` `singapore` `virginia`";
                                        };
                                        readonly runtime: {
                                            readonly type: "string";
                                            readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                                            readonly description: "Runtime\n\n`docker` `elixir` `go` `node` `python` `ruby` `rust` `image`";
                                        };
                                        readonly schedule: {
                                            readonly type: "string";
                                        };
                                        readonly buildPlan: {
                                            readonly type: "string";
                                            readonly enum: readonly ["starter", "performance"];
                                            readonly default: "starter";
                                            readonly description: "`starter` `performance`";
                                        };
                                    };
                                }];
                            };
                        };
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ListSnapshots: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly diskId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the disk";
                };
            };
            readonly required: readonly ["diskId"];
        }];
    };
    readonly response: {
        readonly "201": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly createdAt: {
                        readonly type: "string";
                        readonly format: "date-time";
                    };
                    readonly snapshotKey: {
                        readonly type: "string";
                    };
                    readonly instanceId: {
                        readonly description: "When a service with a disk is scaled, the instanceId is used to identify the instance that the disk is attached to. Each instance's disks get their own snapshots, and can be restored separately.";
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PatchOwnerNotificationSettings: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly emailEnabled: {
                readonly type: "boolean";
            };
            readonly previewNotificationsEnabled: {
                readonly type: "boolean";
            };
            readonly notificationsToSend: {
                readonly type: "string";
                readonly enum: readonly ["none", "failure", "all"];
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly ownerId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the owner (team or personal user) whose resources should be returned";
                };
            };
            readonly required: readonly ["ownerId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["ownerId", "slackEnabled", "emailEnabled", "previewNotificationsEnabled", "notificationsToSend"];
            readonly properties: {
                readonly ownerId: {
                    readonly type: "string";
                };
                readonly slackEnabled: {
                    readonly type: "boolean";
                };
                readonly emailEnabled: {
                    readonly type: "boolean";
                };
                readonly previewNotificationsEnabled: {
                    readonly type: "boolean";
                };
                readonly notificationsToSend: {
                    readonly type: "string";
                    readonly enum: readonly ["none", "failure", "all"];
                    readonly description: "`none` `failure` `all`";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PatchRoute: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["priority"];
        readonly properties: {
            readonly priority: {
                readonly "x-go-type": "*int";
                readonly type: "integer";
                readonly description: "Redirect and Rewrite Rules are applied in priority order starting at 0. Moves this route to the specified priority and adjusts other route priorities accordingly.";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly serviceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the service";
                };
            };
            readonly required: readonly ["serviceId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly headers: {
                    readonly type: "object";
                    readonly required: readonly ["id", "type", "source", "destination", "priority"];
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly enum: readonly ["redirect", "rewrite"];
                            readonly description: "`redirect` `rewrite`";
                        };
                        readonly source: {
                            readonly type: "string";
                        };
                        readonly destination: {
                            readonly type: "string";
                        };
                        readonly priority: {
                            readonly type: "integer";
                            readonly description: "Redirect and Rewrite Rules are applied in priority order starting at 0";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PatchServiceNotificationOverrides: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly previewNotificationsEnabled: {
                readonly type: "string";
                readonly enum: readonly ["default", "false", "true"];
            };
            readonly notificationsToSend: {
                readonly type: "string";
                readonly enum: readonly ["default", "none", "failure", "all"];
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly serviceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the service";
                };
            };
            readonly required: readonly ["serviceId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["serviceId", "previewNotificationsEnabled", "notificationsToSend"];
            readonly properties: {
                readonly serviceId: {
                    readonly type: "string";
                };
                readonly previewNotificationsEnabled: {
                    readonly type: "string";
                    readonly enum: readonly ["default", "false", "true"];
                    readonly description: "`default` `false` `true`";
                };
                readonly notificationsToSend: {
                    readonly type: "string";
                    readonly enum: readonly ["default", "none", "failure", "all"];
                    readonly description: "`default` `none` `failure` `all`";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PostJob: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["startCommand"];
        readonly properties: {
            readonly startCommand: {
                readonly type: "string";
            };
            readonly planId: {
                readonly type: "string";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly serviceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the service";
                };
            };
            readonly required: readonly ["serviceId"];
        }];
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "serviceId", "startCommand", "planId", "createdAt"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly pattern: "^job-[0-9a-z]{20}$";
                    readonly examples: readonly ["job-cph1rs3idesc73a2b2mg"];
                };
                readonly serviceId: {
                    readonly type: "string";
                    readonly examples: readonly ["srv-xxxxx"];
                };
                readonly startCommand: {
                    readonly type: "string";
                    readonly examples: readonly ["echo 'hello world'"];
                };
                readonly planId: {
                    readonly type: "string";
                    readonly examples: readonly ["plan-srv-004"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["succeeded", "failed", "canceled"];
                    readonly description: "`succeeded` `failed` `canceled`";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-07-15T07:20:05.777035-07:00"];
                };
                readonly startedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-07-15T07:20:05.777035-07:00"];
                };
                readonly finishedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-07-15T07:20:05.777035-07:00"];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PreviewService: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["imagePath"];
        readonly properties: {
            readonly imagePath: {
                readonly type: "string";
                readonly description: "Must be either a full URL or the relative path to an image. If a relative path, Render uses the base service's image URL as its root. For example, if the base service's image URL is `docker.io/library/nginx:latest`, then valid values are: `docker.io/library/nginx:<any tag or SHA>`, `library/nginx:<any tag or SHA>`, or `nginx:<any tag or SHA>`. Note that the path must match (only the tag or SHA can vary).";
                readonly examples: readonly ["docker.io/library/nginx:latest"];
            };
            readonly name: {
                readonly type: "string";
                readonly description: "A name for the service preview instance. If not specified, Render generates the name using the base service's name and the specified tag or SHA.";
                readonly examples: readonly ["preview"];
            };
            readonly plan: {
                readonly type: "string";
                readonly enum: readonly ["starter", "starter_plus", "standard", "standard_plus", "pro", "pro_plus", "pro_max", "pro_ultra", "free", "custom"];
                readonly description: "The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.";
                readonly examples: readonly ["starter"];
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly serviceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the service";
                };
            };
            readonly required: readonly ["serviceId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly service: {
                    readonly type: "object";
                    readonly required: readonly ["id", "name", "ownerId", "type", "createdAt", "dashboardUrl", "updatedAt", "suspended", "suspenders", "autoDeploy", "notifyOnFail", "slug", "serviceDetails", "rootDir"];
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly autoDeploy: {
                            readonly type: "string";
                            readonly enum: readonly ["yes", "no"];
                            readonly default: "yes";
                            readonly description: "`yes` `no`";
                        };
                        readonly branch: {
                            readonly type: "string";
                        };
                        readonly buildFilter: {
                            readonly type: "object";
                            readonly required: readonly ["paths", "ignoredPaths"];
                            readonly properties: {
                                readonly paths: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                };
                                readonly ignoredPaths: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                        readonly createdAt: {
                            readonly type: "string";
                            readonly format: "date-time";
                        };
                        readonly dashboardUrl: {
                            readonly type: "string";
                            readonly description: "The URL to view the service in the Render Dashboard";
                        };
                        readonly environmentId: {
                            readonly type: "string";
                        };
                        readonly imagePath: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly notifyOnFail: {
                            readonly type: "string";
                            readonly enum: readonly ["default", "notify", "ignore"];
                            readonly description: "`default` `notify` `ignore`";
                        };
                        readonly ownerId: {
                            readonly type: "string";
                        };
                        readonly registryCredential: {
                            readonly type: "object";
                            readonly required: readonly ["id", "name"];
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                                readonly name: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly repo: {
                            readonly type: "string";
                            readonly examples: readonly ["https://github.com/render-examples/flask-hello-world"];
                        };
                        readonly rootDir: {
                            readonly type: "string";
                        };
                        readonly slug: {
                            readonly type: "string";
                        };
                        readonly suspended: {
                            readonly type: "string";
                            readonly enum: readonly ["suspended", "not_suspended"];
                            readonly description: "`suspended` `not_suspended`";
                        };
                        readonly suspenders: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["admin", "billing", "user", "parent_service", "unknown"];
                                readonly description: "`admin` `billing` `user` `parent_service` `unknown`";
                            };
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly enum: readonly ["static_site", "web_service", "private_service", "background_worker", "cron_job"];
                            readonly description: "`static_site` `web_service` `private_service` `background_worker` `cron_job`";
                        };
                        readonly updatedAt: {
                            readonly type: "string";
                            readonly format: "date-time";
                        };
                        readonly serviceDetails: {
                            readonly oneOf: readonly [{
                                readonly type: "object";
                                readonly required: readonly ["buildCommand", "publishPath", "url", "buildPlan"];
                                readonly properties: {
                                    readonly buildCommand: {
                                        readonly type: "string";
                                    };
                                    readonly parentServer: {
                                        readonly required: readonly ["id", "name"];
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                    readonly publishPath: {
                                        readonly type: "string";
                                    };
                                    readonly pullRequestPreviewsEnabled: {
                                        readonly type: "string";
                                        readonly enum: readonly ["yes", "no"];
                                        readonly default: "no";
                                        readonly deprecated: true;
                                        readonly description: "This field has been deprecated. previews.generation should be used in its place.\n\n`yes` `no`";
                                    };
                                    readonly previews: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly generation: {
                                                readonly type: "string";
                                                readonly enum: readonly ["off", "manual", "automatic"];
                                                readonly default: "off";
                                                readonly description: "Defaults to \"off\"\n\n`off` `manual` `automatic`";
                                            };
                                        };
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                    };
                                    readonly buildPlan: {
                                        readonly type: "string";
                                        readonly enum: readonly ["starter", "performance"];
                                        readonly default: "starter";
                                        readonly description: "`starter` `performance`";
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["env", "runtime", "envSpecificDetails", "plan", "region", "numInstances", "buildPlan", "healthCheckPath", "openPorts", "url"];
                                readonly properties: {
                                    readonly autoscaling: {
                                        readonly type: "object";
                                        readonly required: readonly ["enabled", "min", "max", "criteria"];
                                        readonly properties: {
                                            readonly enabled: {
                                                readonly type: "boolean";
                                                readonly default: false;
                                            };
                                            readonly min: {
                                                readonly type: "integer";
                                                readonly description: "The minimum number of instances for the service";
                                            };
                                            readonly max: {
                                                readonly type: "integer";
                                                readonly description: "The maximum number of instances for the service";
                                            };
                                            readonly criteria: {
                                                readonly type: "object";
                                                readonly required: readonly ["cpu", "memory"];
                                                readonly properties: {
                                                    readonly cpu: {
                                                        readonly type: "object";
                                                        readonly required: readonly ["enabled", "percentage"];
                                                        readonly properties: {
                                                            readonly enabled: {
                                                                readonly type: "boolean";
                                                                readonly default: false;
                                                            };
                                                            readonly percentage: {
                                                                readonly type: "integer";
                                                                readonly description: "Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.\n";
                                                            };
                                                        };
                                                    };
                                                    readonly memory: {
                                                        readonly type: "object";
                                                        readonly required: readonly ["enabled", "percentage"];
                                                        readonly properties: {
                                                            readonly enabled: {
                                                                readonly type: "boolean";
                                                                readonly default: false;
                                                            };
                                                            readonly percentage: {
                                                                readonly type: "integer";
                                                                readonly description: "Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.\n";
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    readonly disk: {
                                        readonly type: "object";
                                        readonly required: readonly ["id", "name", "sizeGB", "mountPath"];
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                                readonly pattern: "^dsk-[0-9a-z]{20}$";
                                                readonly examples: readonly ["dsk-cph1rs3idesc73a2b2mg"];
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                            readonly sizeGB: {
                                                readonly type: "integer";
                                            };
                                            readonly mountPath: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                    readonly env: {
                                        readonly type: "string";
                                        readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                                        readonly deprecated: true;
                                        readonly description: "This field has been deprecated, runtime should be used in its place.\n\n`docker` `elixir` `go` `node` `python` `ruby` `rust` `image`";
                                    };
                                    readonly envSpecificDetails: {
                                        readonly oneOf: readonly [{
                                            readonly type: "object";
                                            readonly required: readonly ["dockerCommand", "dockerContext", "dockerfilePath"];
                                            readonly properties: {
                                                readonly dockerCommand: {
                                                    readonly type: "string";
                                                };
                                                readonly dockerContext: {
                                                    readonly type: "string";
                                                };
                                                readonly dockerfilePath: {
                                                    readonly type: "string";
                                                };
                                                readonly preDeployCommand: {
                                                    readonly type: "string";
                                                };
                                                readonly registryCredential: {
                                                    readonly type: "object";
                                                    readonly required: readonly ["id", "name", "username", "registry", "updatedAt"];
                                                    readonly properties: {
                                                        readonly id: {
                                                            readonly type: "string";
                                                            readonly description: "Unique identifier for this credential";
                                                        };
                                                        readonly name: {
                                                            readonly type: "string";
                                                            readonly description: "Descriptive name for this credential";
                                                        };
                                                        readonly registry: {
                                                            readonly type: "string";
                                                            readonly enum: readonly ["GITHUB", "GITLAB", "DOCKER", "GOOGLE_ARTIFACT", "AWS_ECR"];
                                                            readonly description: "The registry to use this credential with\n\n`GITHUB` `GITLAB` `DOCKER` `GOOGLE_ARTIFACT` `AWS_ECR`";
                                                        };
                                                        readonly username: {
                                                            readonly type: "string";
                                                            readonly description: "The username associated with the credential";
                                                        };
                                                        readonly updatedAt: {
                                                            readonly type: "string";
                                                            readonly format: "date-time";
                                                            readonly description: "Last updated time for the credential";
                                                        };
                                                    };
                                                };
                                            };
                                        }, {
                                            readonly type: "object";
                                            readonly required: readonly ["buildCommand", "startCommand"];
                                            readonly properties: {
                                                readonly buildCommand: {
                                                    readonly type: "string";
                                                };
                                                readonly startCommand: {
                                                    readonly type: "string";
                                                };
                                                readonly preDeployCommand: {
                                                    readonly type: "string";
                                                };
                                            };
                                        }];
                                    };
                                    readonly healthCheckPath: {
                                        readonly type: "string";
                                    };
                                    readonly maintenanceMode: {
                                        readonly type: "object";
                                        readonly required: readonly ["enabled", "uri"];
                                        readonly properties: {
                                            readonly enabled: {
                                                readonly type: "boolean";
                                            };
                                            readonly uri: {
                                                readonly type: "string";
                                                readonly description: "The page to be served when [maintenance mode](https://docs.render.com/maintenance-mode) is enabled. When empty, the default maintenance mode page is served.";
                                            };
                                        };
                                    };
                                    readonly numInstances: {
                                        readonly type: "integer";
                                        readonly description: "For a *manually* scaled service, this is the number of instances the service is scaled to. DOES NOT indicate the number of running instances for an *autoscaled* service.";
                                    };
                                    readonly openPorts: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly required: readonly ["port", "protocol"];
                                            readonly properties: {
                                                readonly port: {
                                                    readonly type: "integer";
                                                    readonly examples: readonly [10000];
                                                };
                                                readonly protocol: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["TCP", "UDP"];
                                                    readonly description: "`TCP` `UDP`";
                                                };
                                            };
                                        };
                                    };
                                    readonly parentServer: {
                                        readonly required: readonly ["id", "name"];
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                    readonly plan: {
                                        readonly type: "string";
                                        readonly enum: readonly ["starter", "starter_plus", "standard", "standard_plus", "pro", "pro_plus", "pro_max", "pro_ultra", "free", "custom"];
                                        readonly description: "The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.\n\n`starter` `starter_plus` `standard` `standard_plus` `pro` `pro_plus` `pro_max` `pro_ultra` `free` `custom`";
                                        readonly examples: readonly ["starter"];
                                    };
                                    readonly pullRequestPreviewsEnabled: {
                                        readonly type: "string";
                                        readonly enum: readonly ["yes", "no"];
                                        readonly default: "no";
                                        readonly deprecated: true;
                                        readonly description: "This field has been deprecated. previews.generation should be used in its place.\n\n`yes` `no`";
                                    };
                                    readonly previews: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly generation: {
                                                readonly type: "string";
                                                readonly enum: readonly ["off", "manual", "automatic"];
                                                readonly default: "off";
                                                readonly description: "Defaults to \"off\"\n\n`off` `manual` `automatic`";
                                            };
                                        };
                                    };
                                    readonly region: {
                                        readonly type: "string";
                                        readonly enum: readonly ["frankfurt", "oregon", "ohio", "singapore", "virginia"];
                                        readonly default: "oregon";
                                        readonly description: "Defaults to \"oregon\"\n\n`frankfurt` `oregon` `ohio` `singapore` `virginia`";
                                    };
                                    readonly runtime: {
                                        readonly type: "string";
                                        readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                                        readonly description: "Runtime\n\n`docker` `elixir` `go` `node` `python` `ruby` `rust` `image`";
                                    };
                                    readonly sshAddress: {
                                        readonly type: "string";
                                        readonly description: "The SSH address for the service. Only present for services that have SSH enabled.";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                    };
                                    readonly buildPlan: {
                                        readonly type: "string";
                                        readonly enum: readonly ["starter", "performance"];
                                        readonly default: "starter";
                                        readonly description: "`starter` `performance`";
                                    };
                                    readonly maxShutdownDelaySeconds: {
                                        readonly type: "integer";
                                        readonly description: "The maximum amount of time (in seconds) that Render waits for your application process to exit gracefully after sending it a SIGTERM signal.";
                                        readonly minimum: 1;
                                        readonly maximum: 300;
                                        readonly default: 30;
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["env", "runtime", "envSpecificDetails", "plan", "region", "numInstances", "buildPlan", "openPorts", "url"];
                                readonly properties: {
                                    readonly autoscaling: {
                                        readonly type: "object";
                                        readonly required: readonly ["enabled", "min", "max", "criteria"];
                                        readonly properties: {
                                            readonly enabled: {
                                                readonly type: "boolean";
                                                readonly default: false;
                                            };
                                            readonly min: {
                                                readonly type: "integer";
                                                readonly description: "The minimum number of instances for the service";
                                            };
                                            readonly max: {
                                                readonly type: "integer";
                                                readonly description: "The maximum number of instances for the service";
                                            };
                                            readonly criteria: {
                                                readonly type: "object";
                                                readonly required: readonly ["cpu", "memory"];
                                                readonly properties: {
                                                    readonly cpu: {
                                                        readonly type: "object";
                                                        readonly required: readonly ["enabled", "percentage"];
                                                        readonly properties: {
                                                            readonly enabled: {
                                                                readonly type: "boolean";
                                                                readonly default: false;
                                                            };
                                                            readonly percentage: {
                                                                readonly type: "integer";
                                                                readonly description: "Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.\n";
                                                            };
                                                        };
                                                    };
                                                    readonly memory: {
                                                        readonly type: "object";
                                                        readonly required: readonly ["enabled", "percentage"];
                                                        readonly properties: {
                                                            readonly enabled: {
                                                                readonly type: "boolean";
                                                                readonly default: false;
                                                            };
                                                            readonly percentage: {
                                                                readonly type: "integer";
                                                                readonly description: "Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.\n";
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    readonly disk: {
                                        readonly type: "object";
                                        readonly required: readonly ["id", "name", "sizeGB", "mountPath"];
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                                readonly pattern: "^dsk-[0-9a-z]{20}$";
                                                readonly examples: readonly ["dsk-cph1rs3idesc73a2b2mg"];
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                            readonly sizeGB: {
                                                readonly type: "integer";
                                            };
                                            readonly mountPath: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                    readonly env: {
                                        readonly type: "string";
                                        readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                                        readonly deprecated: true;
                                        readonly description: "This field has been deprecated, runtime should be used in its place.\n\n`docker` `elixir` `go` `node` `python` `ruby` `rust` `image`";
                                    };
                                    readonly envSpecificDetails: {
                                        readonly oneOf: readonly [{
                                            readonly type: "object";
                                            readonly required: readonly ["dockerCommand", "dockerContext", "dockerfilePath"];
                                            readonly properties: {
                                                readonly dockerCommand: {
                                                    readonly type: "string";
                                                };
                                                readonly dockerContext: {
                                                    readonly type: "string";
                                                };
                                                readonly dockerfilePath: {
                                                    readonly type: "string";
                                                };
                                                readonly preDeployCommand: {
                                                    readonly type: "string";
                                                };
                                                readonly registryCredential: {
                                                    readonly type: "object";
                                                    readonly required: readonly ["id", "name", "username", "registry", "updatedAt"];
                                                    readonly properties: {
                                                        readonly id: {
                                                            readonly type: "string";
                                                            readonly description: "Unique identifier for this credential";
                                                        };
                                                        readonly name: {
                                                            readonly type: "string";
                                                            readonly description: "Descriptive name for this credential";
                                                        };
                                                        readonly registry: {
                                                            readonly type: "string";
                                                            readonly enum: readonly ["GITHUB", "GITLAB", "DOCKER", "GOOGLE_ARTIFACT", "AWS_ECR"];
                                                            readonly description: "The registry to use this credential with\n\n`GITHUB` `GITLAB` `DOCKER` `GOOGLE_ARTIFACT` `AWS_ECR`";
                                                        };
                                                        readonly username: {
                                                            readonly type: "string";
                                                            readonly description: "The username associated with the credential";
                                                        };
                                                        readonly updatedAt: {
                                                            readonly type: "string";
                                                            readonly format: "date-time";
                                                            readonly description: "Last updated time for the credential";
                                                        };
                                                    };
                                                };
                                            };
                                        }, {
                                            readonly type: "object";
                                            readonly required: readonly ["buildCommand", "startCommand"];
                                            readonly properties: {
                                                readonly buildCommand: {
                                                    readonly type: "string";
                                                };
                                                readonly startCommand: {
                                                    readonly type: "string";
                                                };
                                                readonly preDeployCommand: {
                                                    readonly type: "string";
                                                };
                                            };
                                        }];
                                    };
                                    readonly numInstances: {
                                        readonly type: "integer";
                                        readonly description: "For a *manually* scaled service, this is the number of instances the service is scaled to. DOES NOT indicate the number of running instances for an *autoscaled* service.";
                                    };
                                    readonly openPorts: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly required: readonly ["port", "protocol"];
                                            readonly properties: {
                                                readonly port: {
                                                    readonly type: "integer";
                                                    readonly examples: readonly [10000];
                                                };
                                                readonly protocol: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["TCP", "UDP"];
                                                    readonly description: "`TCP` `UDP`";
                                                };
                                            };
                                        };
                                    };
                                    readonly parentServer: {
                                        readonly required: readonly ["id", "name"];
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                    readonly plan: {
                                        readonly type: "string";
                                        readonly enum: readonly ["starter", "starter_plus", "standard", "standard_plus", "pro", "pro_plus", "pro_max", "pro_ultra", "free", "custom"];
                                        readonly description: "The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.\n\n`starter` `starter_plus` `standard` `standard_plus` `pro` `pro_plus` `pro_max` `pro_ultra` `free` `custom`";
                                        readonly examples: readonly ["starter"];
                                    };
                                    readonly pullRequestPreviewsEnabled: {
                                        readonly type: "string";
                                        readonly enum: readonly ["yes", "no"];
                                        readonly default: "no";
                                        readonly deprecated: true;
                                        readonly description: "This field has been deprecated. previews.generation should be used in its place.\n\n`yes` `no`";
                                    };
                                    readonly previews: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly generation: {
                                                readonly type: "string";
                                                readonly enum: readonly ["off", "manual", "automatic"];
                                                readonly default: "off";
                                                readonly description: "Defaults to \"off\"\n\n`off` `manual` `automatic`";
                                            };
                                        };
                                    };
                                    readonly region: {
                                        readonly type: "string";
                                        readonly enum: readonly ["frankfurt", "oregon", "ohio", "singapore", "virginia"];
                                        readonly default: "oregon";
                                        readonly description: "Defaults to \"oregon\"\n\n`frankfurt` `oregon` `ohio` `singapore` `virginia`";
                                    };
                                    readonly runtime: {
                                        readonly type: "string";
                                        readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                                        readonly description: "Runtime\n\n`docker` `elixir` `go` `node` `python` `ruby` `rust` `image`";
                                    };
                                    readonly sshAddress: {
                                        readonly type: "string";
                                        readonly description: "The SSH address for the service. Only present for services that have SSH enabled.";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                    };
                                    readonly buildPlan: {
                                        readonly type: "string";
                                        readonly enum: readonly ["starter", "performance"];
                                        readonly default: "starter";
                                        readonly description: "`starter` `performance`";
                                    };
                                    readonly maxShutdownDelaySeconds: {
                                        readonly type: "integer";
                                        readonly description: "The maximum amount of time (in seconds) that Render waits for your application process to exit gracefully after sending it a SIGTERM signal.";
                                        readonly minimum: 1;
                                        readonly maximum: 300;
                                        readonly default: 30;
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["env", "runtime", "envSpecificDetails", "plan", "region", "numInstances", "buildPlan"];
                                readonly properties: {
                                    readonly autoscaling: {
                                        readonly type: "object";
                                        readonly required: readonly ["enabled", "min", "max", "criteria"];
                                        readonly properties: {
                                            readonly enabled: {
                                                readonly type: "boolean";
                                                readonly default: false;
                                            };
                                            readonly min: {
                                                readonly type: "integer";
                                                readonly description: "The minimum number of instances for the service";
                                            };
                                            readonly max: {
                                                readonly type: "integer";
                                                readonly description: "The maximum number of instances for the service";
                                            };
                                            readonly criteria: {
                                                readonly type: "object";
                                                readonly required: readonly ["cpu", "memory"];
                                                readonly properties: {
                                                    readonly cpu: {
                                                        readonly type: "object";
                                                        readonly required: readonly ["enabled", "percentage"];
                                                        readonly properties: {
                                                            readonly enabled: {
                                                                readonly type: "boolean";
                                                                readonly default: false;
                                                            };
                                                            readonly percentage: {
                                                                readonly type: "integer";
                                                                readonly description: "Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.\n";
                                                            };
                                                        };
                                                    };
                                                    readonly memory: {
                                                        readonly type: "object";
                                                        readonly required: readonly ["enabled", "percentage"];
                                                        readonly properties: {
                                                            readonly enabled: {
                                                                readonly type: "boolean";
                                                                readonly default: false;
                                                            };
                                                            readonly percentage: {
                                                                readonly type: "integer";
                                                                readonly description: "Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.\n";
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    readonly disk: {
                                        readonly type: "object";
                                        readonly required: readonly ["id", "name", "sizeGB", "mountPath"];
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                                readonly pattern: "^dsk-[0-9a-z]{20}$";
                                                readonly examples: readonly ["dsk-cph1rs3idesc73a2b2mg"];
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                            readonly sizeGB: {
                                                readonly type: "integer";
                                            };
                                            readonly mountPath: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                    readonly env: {
                                        readonly type: "string";
                                        readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                                        readonly deprecated: true;
                                        readonly description: "This field has been deprecated, runtime should be used in its place.\n\n`docker` `elixir` `go` `node` `python` `ruby` `rust` `image`";
                                    };
                                    readonly envSpecificDetails: {
                                        readonly oneOf: readonly [{
                                            readonly type: "object";
                                            readonly required: readonly ["dockerCommand", "dockerContext", "dockerfilePath"];
                                            readonly properties: {
                                                readonly dockerCommand: {
                                                    readonly type: "string";
                                                };
                                                readonly dockerContext: {
                                                    readonly type: "string";
                                                };
                                                readonly dockerfilePath: {
                                                    readonly type: "string";
                                                };
                                                readonly preDeployCommand: {
                                                    readonly type: "string";
                                                };
                                                readonly registryCredential: {
                                                    readonly type: "object";
                                                    readonly required: readonly ["id", "name", "username", "registry", "updatedAt"];
                                                    readonly properties: {
                                                        readonly id: {
                                                            readonly type: "string";
                                                            readonly description: "Unique identifier for this credential";
                                                        };
                                                        readonly name: {
                                                            readonly type: "string";
                                                            readonly description: "Descriptive name for this credential";
                                                        };
                                                        readonly registry: {
                                                            readonly type: "string";
                                                            readonly enum: readonly ["GITHUB", "GITLAB", "DOCKER", "GOOGLE_ARTIFACT", "AWS_ECR"];
                                                            readonly description: "The registry to use this credential with\n\n`GITHUB` `GITLAB` `DOCKER` `GOOGLE_ARTIFACT` `AWS_ECR`";
                                                        };
                                                        readonly username: {
                                                            readonly type: "string";
                                                            readonly description: "The username associated with the credential";
                                                        };
                                                        readonly updatedAt: {
                                                            readonly type: "string";
                                                            readonly format: "date-time";
                                                            readonly description: "Last updated time for the credential";
                                                        };
                                                    };
                                                };
                                            };
                                        }, {
                                            readonly type: "object";
                                            readonly required: readonly ["buildCommand", "startCommand"];
                                            readonly properties: {
                                                readonly buildCommand: {
                                                    readonly type: "string";
                                                };
                                                readonly startCommand: {
                                                    readonly type: "string";
                                                };
                                                readonly preDeployCommand: {
                                                    readonly type: "string";
                                                };
                                            };
                                        }];
                                    };
                                    readonly numInstances: {
                                        readonly type: "integer";
                                        readonly description: "For a *manually* scaled service, this is the number of instances the service is scaled to. DOES NOT indicate the number of running instances for an *autoscaled* service.";
                                    };
                                    readonly parentServer: {
                                        readonly required: readonly ["id", "name"];
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                    readonly plan: {
                                        readonly type: "string";
                                        readonly enum: readonly ["starter", "starter_plus", "standard", "standard_plus", "pro", "pro_plus", "pro_max", "pro_ultra", "free", "custom"];
                                        readonly description: "The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.\n\n`starter` `starter_plus` `standard` `standard_plus` `pro` `pro_plus` `pro_max` `pro_ultra` `free` `custom`";
                                        readonly examples: readonly ["starter"];
                                    };
                                    readonly pullRequestPreviewsEnabled: {
                                        readonly type: "string";
                                        readonly enum: readonly ["yes", "no"];
                                        readonly default: "no";
                                        readonly deprecated: true;
                                        readonly description: "This field has been deprecated. previews.generation should be used in its place.\n\n`yes` `no`";
                                    };
                                    readonly previews: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly generation: {
                                                readonly type: "string";
                                                readonly enum: readonly ["off", "manual", "automatic"];
                                                readonly default: "off";
                                                readonly description: "Defaults to \"off\"\n\n`off` `manual` `automatic`";
                                            };
                                        };
                                    };
                                    readonly region: {
                                        readonly type: "string";
                                        readonly enum: readonly ["frankfurt", "oregon", "ohio", "singapore", "virginia"];
                                        readonly default: "oregon";
                                        readonly description: "Defaults to \"oregon\"\n\n`frankfurt` `oregon` `ohio` `singapore` `virginia`";
                                    };
                                    readonly runtime: {
                                        readonly type: "string";
                                        readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                                        readonly description: "Runtime\n\n`docker` `elixir` `go` `node` `python` `ruby` `rust` `image`";
                                    };
                                    readonly sshAddress: {
                                        readonly type: "string";
                                        readonly description: "The SSH address for the service. Only present for services that have SSH enabled.";
                                    };
                                    readonly buildPlan: {
                                        readonly type: "string";
                                        readonly enum: readonly ["starter", "performance"];
                                        readonly default: "starter";
                                        readonly description: "`starter` `performance`";
                                    };
                                    readonly maxShutdownDelaySeconds: {
                                        readonly type: "integer";
                                        readonly description: "The maximum amount of time (in seconds) that Render waits for your application process to exit gracefully after sending it a SIGTERM signal.";
                                        readonly minimum: 1;
                                        readonly maximum: 300;
                                        readonly default: 30;
                                    };
                                };
                            }, {
                                readonly required: readonly ["env", "runtime", "envSpecificDetails", "plan", "region", "schedule", "buildPlan"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly env: {
                                        readonly type: "string";
                                        readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                                        readonly deprecated: true;
                                        readonly description: "This field has been deprecated, runtime should be used in its place.\n\n`docker` `elixir` `go` `node` `python` `ruby` `rust` `image`";
                                    };
                                    readonly envSpecificDetails: {
                                        readonly oneOf: readonly [{
                                            readonly type: "object";
                                            readonly required: readonly ["dockerCommand", "dockerContext", "dockerfilePath"];
                                            readonly properties: {
                                                readonly dockerCommand: {
                                                    readonly type: "string";
                                                };
                                                readonly dockerContext: {
                                                    readonly type: "string";
                                                };
                                                readonly dockerfilePath: {
                                                    readonly type: "string";
                                                };
                                                readonly preDeployCommand: {
                                                    readonly type: "string";
                                                };
                                                readonly registryCredential: {
                                                    readonly type: "object";
                                                    readonly required: readonly ["id", "name", "username", "registry", "updatedAt"];
                                                    readonly properties: {
                                                        readonly id: {
                                                            readonly type: "string";
                                                            readonly description: "Unique identifier for this credential";
                                                        };
                                                        readonly name: {
                                                            readonly type: "string";
                                                            readonly description: "Descriptive name for this credential";
                                                        };
                                                        readonly registry: {
                                                            readonly type: "string";
                                                            readonly enum: readonly ["GITHUB", "GITLAB", "DOCKER", "GOOGLE_ARTIFACT", "AWS_ECR"];
                                                            readonly description: "The registry to use this credential with\n\n`GITHUB` `GITLAB` `DOCKER` `GOOGLE_ARTIFACT` `AWS_ECR`";
                                                        };
                                                        readonly username: {
                                                            readonly type: "string";
                                                            readonly description: "The username associated with the credential";
                                                        };
                                                        readonly updatedAt: {
                                                            readonly type: "string";
                                                            readonly format: "date-time";
                                                            readonly description: "Last updated time for the credential";
                                                        };
                                                    };
                                                };
                                            };
                                        }, {
                                            readonly type: "object";
                                            readonly required: readonly ["buildCommand", "startCommand"];
                                            readonly properties: {
                                                readonly buildCommand: {
                                                    readonly type: "string";
                                                };
                                                readonly startCommand: {
                                                    readonly type: "string";
                                                };
                                                readonly preDeployCommand: {
                                                    readonly type: "string";
                                                };
                                            };
                                        }];
                                    };
                                    readonly lastSuccessfulRunAt: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                    };
                                    readonly plan: {
                                        readonly type: "string";
                                        readonly enum: readonly ["starter", "starter_plus", "standard", "standard_plus", "pro", "pro_plus", "pro_max", "pro_ultra", "free", "custom"];
                                        readonly description: "The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.\n\n`starter` `starter_plus` `standard` `standard_plus` `pro` `pro_plus` `pro_max` `pro_ultra` `free` `custom`";
                                        readonly examples: readonly ["starter"];
                                    };
                                    readonly region: {
                                        readonly type: "string";
                                        readonly enum: readonly ["frankfurt", "oregon", "ohio", "singapore", "virginia"];
                                        readonly default: "oregon";
                                        readonly description: "Defaults to \"oregon\"\n\n`frankfurt` `oregon` `ohio` `singapore` `virginia`";
                                    };
                                    readonly runtime: {
                                        readonly type: "string";
                                        readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                                        readonly description: "Runtime\n\n`docker` `elixir` `go` `node` `python` `ruby` `rust` `image`";
                                    };
                                    readonly schedule: {
                                        readonly type: "string";
                                    };
                                    readonly buildPlan: {
                                        readonly type: "string";
                                        readonly enum: readonly ["starter", "performance"];
                                        readonly default: "starter";
                                        readonly description: "`starter` `performance`";
                                    };
                                };
                            }];
                        };
                    };
                };
                readonly deployId: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PutRoutes: {
    readonly body: {
        readonly type: "array";
        readonly items: {
            readonly type: "object";
            readonly required: readonly ["type", "source", "destination"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["redirect", "rewrite"];
                };
                readonly source: {
                    readonly type: "string";
                    readonly examples: readonly ["/:bar/foo"];
                };
                readonly destination: {
                    readonly type: "string";
                    readonly examples: readonly ["/foo/:bar"];
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly serviceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the service";
                };
            };
            readonly required: readonly ["serviceId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "type", "source", "destination", "priority"];
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                    };
                    readonly type: {
                        readonly type: "string";
                        readonly enum: readonly ["redirect", "rewrite"];
                        readonly description: "`redirect` `rewrite`";
                    };
                    readonly source: {
                        readonly type: "string";
                    };
                    readonly destination: {
                        readonly type: "string";
                    };
                    readonly priority: {
                        readonly type: "integer";
                        readonly description: "Redirect and Rewrite Rules are applied in priority order starting at 0";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RecoverPostgres: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["restoreTime"];
        readonly properties: {
            readonly restoreName: {
                readonly description: "Name of the new database.";
                readonly type: "string";
            };
            readonly restoreTime: {
                readonly type: "string";
                readonly format: "date-time";
                readonly description: "The point in time to restore the database to. See `/recovery-info` for restore availability";
            };
            readonly datadogApiKey: {
                readonly type: "string";
                readonly description: "Datadog API key to use for monitoring the new database. Defaults to the API key of the original database. Use an empty string to prevent copying of the API key to the new database.";
            };
            readonly plan: {
                readonly type: "string";
                readonly description: "The plan to use for the new database. Defaults to the same plan as the original database. Cannot be a lower tier plan than the original database.";
            };
            readonly environmentId: {
                readonly type: "string";
                readonly description: "The environment to create the new database in. Defaults to the environment of the original database.";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly postgresId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["postgresId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "ipAllowList", "createdAt", "updatedAt", "dashboardUrl", "databaseName", "databaseUser", "highAvailabilityEnabled", "name", "owner", "project", "plan", "region", "readReplicas", "role", "status", "version", "suspended", "suspenders"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly ipAllowList: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["cidrBlock", "description"];
                        readonly properties: {
                            readonly cidrBlock: {
                                readonly type: "string";
                            };
                            readonly description: {
                                readonly description: "User-provided description of the CIDR block";
                                readonly type: "string";
                            };
                        };
                    };
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly updatedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly expiresAt: {
                    readonly description: "The time at which the database will be expire. Applies to free tier databases only.";
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly dashboardUrl: {
                    readonly type: "string";
                    readonly description: "The URL to view the PostgreSQL instance in the Render Dashboard";
                };
                readonly databaseName: {
                    readonly type: "string";
                };
                readonly databaseUser: {
                    readonly type: "string";
                };
                readonly environmentId: {
                    readonly type: "string";
                };
                readonly highAvailabilityEnabled: {
                    readonly type: "boolean";
                };
                readonly maintenance: {
                    readonly type: "object";
                    readonly required: readonly ["id", "type", "scheduledAt", "state"];
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly pattern: "^mrn-[0-9a-z]{20}$";
                            readonly examples: readonly ["mrn-cph1rs3idesc73a2b2mg"];
                        };
                        readonly type: {
                            readonly type: "string";
                        };
                        readonly scheduledAt: {
                            readonly type: "string";
                            readonly format: "date-time";
                        };
                        readonly pendingMaintenanceBy: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "If present, the maintenance run cannot be scheduled for later than this date-time.";
                        };
                        readonly state: {
                            readonly type: "string";
                            readonly enum: readonly ["scheduled", "in_progress", "user_fix_required", "cancelled", "succeeded", "failed"];
                            readonly description: "`scheduled` `in_progress` `user_fix_required` `cancelled` `succeeded` `failed`";
                        };
                    };
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly owner: {
                    readonly type: "object";
                    readonly required: readonly ["id", "name", "email", "type"];
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly email: {
                            readonly type: "string";
                        };
                        readonly twoFactorAuthEnabled: {
                            readonly type: "boolean";
                            readonly description: "Whether two-factor authentication is enabled for the owner. Only present for user owners.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly enum: readonly ["user", "team"];
                            readonly description: "`user` `team`";
                        };
                    };
                };
                readonly plan: {
                    readonly type: "string";
                    readonly enum: readonly ["free", "starter", "standard", "pro", "pro_plus", "custom", "basic_256mb", "basic_1gb", "basic_4gb", "pro_4gb", "pro_8gb", "pro_16gb", "pro_32gb", "pro_64gb", "pro_128gb", "pro_192gb", "pro_256gb", "pro_384gb", "pro_512gb", "accelerated_16gb", "accelerated_32gb", "accelerated_64gb", "accelerated_128gb", "accelerated_256gb", "accelerated_384gb", "accelerated_512gb", "accelerated_768gb", "accelerated_1024gb"];
                    readonly description: "`free` `starter` `standard` `pro` `pro_plus` `custom` `basic_256mb` `basic_1gb` `basic_4gb` `pro_4gb` `pro_8gb` `pro_16gb` `pro_32gb` `pro_64gb` `pro_128gb` `pro_192gb` `pro_256gb` `pro_384gb` `pro_512gb` `accelerated_16gb` `accelerated_32gb` `accelerated_64gb` `accelerated_128gb` `accelerated_256gb` `accelerated_384gb` `accelerated_512gb` `accelerated_768gb` `accelerated_1024gb`";
                };
                readonly diskSizeGB: {
                    readonly type: "integer";
                };
                readonly primaryPostgresID: {
                    readonly type: "string";
                };
                readonly region: {
                    readonly type: "string";
                    readonly enum: readonly ["frankfurt", "oregon", "ohio", "singapore", "virginia"];
                    readonly default: "oregon";
                    readonly description: "Defaults to \"oregon\"\n\n`frankfurt` `oregon` `ohio` `singapore` `virginia`";
                };
                readonly readReplicas: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "The replica instance identifier.";
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "The display name of the replica instance.";
                            };
                        };
                        readonly required: readonly ["id", "name"];
                    };
                };
                readonly role: {
                    readonly type: "string";
                    readonly enum: readonly ["primary", "replica"];
                    readonly description: "`primary` `replica`";
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["creating", "available", "unavailable", "config_restart", "suspended", "maintenance_scheduled", "maintenance_in_progress", "recovery_failed", "recovery_in_progress", "unknown", "updating_instance"];
                    readonly description: "`creating` `available` `unavailable` `config_restart` `suspended` `maintenance_scheduled` `maintenance_in_progress` `recovery_failed` `recovery_in_progress` `unknown` `updating_instance`";
                };
                readonly version: {
                    readonly type: "string";
                    readonly description: "The PostgreSQL version\n\n`11` `12` `13` `14` `15` `16`";
                    readonly enum: readonly ["11", "12", "13", "14", "15", "16"];
                };
                readonly suspended: {
                    readonly type: "string";
                    readonly enum: readonly ["suspended", "not_suspended"];
                    readonly description: "`suspended` `not_suspended`";
                };
                readonly suspenders: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["admin", "billing", "user", "parent_service", "unknown"];
                        readonly description: "`admin` `billing` `user` `parent_service` `unknown`";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RefreshCustomDomain: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly serviceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the service";
                };
                readonly customDomainIdOrName: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID or name of the custom domain";
                };
            };
            readonly required: readonly ["serviceId", "customDomainIdOrName"];
        }];
    };
    readonly response: {
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RemoveResourcesFromEnvironment: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly environmentId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["environmentId"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly resourceIds: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly description: "The ID of an env group, a service, a PostgreSQL database, or a Redis instance";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["resourceIds"];
        }];
    };
    readonly response: {
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RestartPostgres: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly postgresId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["postgresId"];
        }];
    };
    readonly response: {
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RestartService: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly serviceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the service";
                };
            };
            readonly required: readonly ["serviceId"];
        }];
    };
    readonly response: {
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RestoreSnapshot: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["snapshotKey"];
        readonly properties: {
            readonly snapshotKey: {
                readonly type: "string";
            };
            readonly instanceId: {
                readonly description: "When a service with a disk is scaled, the instanceId is used to identify the instance that the disk is attached to. Each instance's disks get their own snapshots, and can be restored separately.";
                readonly type: "string";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly diskId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the disk";
                };
            };
            readonly required: readonly ["diskId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "sizeGB", "mountPath", "createdAt", "updatedAt"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly pattern: "^dsk-[0-9a-z]{20}$";
                    readonly examples: readonly ["dsk-cph1rs3idesc73a2b2mg"];
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly sizeGB: {
                    readonly type: "integer";
                };
                readonly mountPath: {
                    readonly type: "string";
                };
                readonly serviceId: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly updatedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ResumePostgres: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly postgresId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["postgresId"];
        }];
    };
    readonly response: {
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ResumeService: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly serviceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the service";
                };
            };
            readonly required: readonly ["serviceId"];
        }];
    };
    readonly response: {
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RetrieveBlueprint: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly blueprintId: {
                    readonly type: "string";
                    readonly pattern: "^exs-[0-9a-z]{20}$";
                    readonly examples: readonly ["exs-cph1rs3idesc73a2b2mg"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the blueprint";
                };
            };
            readonly required: readonly ["blueprintId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "status", "autoSync", "repo", "branch", "resources"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly pattern: "^exs-[0-9a-z]{20}$";
                    readonly examples: readonly ["exs-cph1rs3idesc73a2b2mg"];
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["created", "paused", "in_sync", "syncing", "error"];
                    readonly description: "`created` `paused` `in_sync` `syncing` `error`";
                };
                readonly autoSync: {
                    readonly type: "boolean";
                    readonly description: "Automatically sync changes to render.yaml";
                };
                readonly repo: {
                    readonly type: "string";
                };
                readonly branch: {
                    readonly type: "string";
                };
                readonly lastSync: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly resources: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["id", "name", "type"];
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly description: "type of the resource (ex. web_service or postgres)\n\n`static_site` `web_service` `private_service` `background_worker` `cron_job` `redis` `postgres` `environment_group`";
                                readonly enum: readonly ["static_site", "web_service", "private_service", "background_worker", "cron_job", "redis", "postgres", "environment_group"];
                            };
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RetrieveCustomDomain: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly serviceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the service";
                };
                readonly customDomainIdOrName: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID or name of the custom domain";
                };
            };
            readonly required: readonly ["serviceId", "customDomainIdOrName"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "domainType", "publicSuffix", "verificationStatus", "createdAt", "redirectForName"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly domainType: {
                    readonly type: "string";
                    readonly enum: readonly ["apex", "subdomain"];
                    readonly description: "`apex` `subdomain`";
                };
                readonly publicSuffix: {
                    readonly type: "string";
                };
                readonly redirectForName: {
                    readonly type: "string";
                };
                readonly verificationStatus: {
                    readonly type: "string";
                    readonly enum: readonly ["verified", "unverified"];
                    readonly description: "`verified` `unverified`";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly server: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RetrieveDeploy: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly serviceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the service";
                };
                readonly deployId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the deploy";
                };
            };
            readonly required: readonly ["serviceId", "deployId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly commit: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly message: {
                            readonly type: "string";
                        };
                        readonly createdAt: {
                            readonly type: "string";
                            readonly format: "date-time";
                        };
                    };
                };
                readonly image: {
                    readonly description: "Image information used when creating the deploy. Not present for Git-backed deploys";
                    readonly type: "object";
                    readonly properties: {
                        readonly ref: {
                            readonly description: "Image reference used when creating the deploy";
                            readonly type: "string";
                        };
                        readonly sha: {
                            readonly description: "SHA that the image reference was resolved to when creating the deploy";
                            readonly type: "string";
                        };
                        readonly registryCredential: {
                            readonly description: "Name of credential used to pull the image, if provided";
                            readonly type: "string";
                        };
                    };
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["created", "build_in_progress", "update_in_progress", "live", "deactivated", "build_failed", "update_failed", "canceled", "pre_deploy_in_progress", "pre_deploy_failed"];
                    readonly description: "`created` `build_in_progress` `update_in_progress` `live` `deactivated` `build_failed` `update_failed` `canceled` `pre_deploy_in_progress` `pre_deploy_failed`";
                };
                readonly trigger: {
                    readonly type: "string";
                    readonly enum: readonly ["api", "blueprint_sync", "deploy_hook", "deployed_by_render", "manual", "other", "new_commit", "rollback", "service_resumed", "service_updated"];
                    readonly description: "`api` `blueprint_sync` `deploy_hook` `deployed_by_render` `manual` `other` `new_commit` `rollback` `service_resumed` `service_updated`";
                };
                readonly finishedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly updatedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RetrieveDisk: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly diskId: {
                    readonly type: "string";
                    readonly pattern: "^dsk-[0-9a-z]{20}$";
                    readonly examples: readonly ["dsk-cph1rs3idesc73a2b2mg"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the disk";
                };
            };
            readonly required: readonly ["diskId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "sizeGB", "mountPath", "createdAt", "updatedAt"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly pattern: "^dsk-[0-9a-z]{20}$";
                    readonly examples: readonly ["dsk-cph1rs3idesc73a2b2mg"];
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly sizeGB: {
                    readonly type: "integer";
                };
                readonly mountPath: {
                    readonly type: "string";
                };
                readonly serviceId: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly updatedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RetrieveEnvGroup: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly envGroupId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for resources that belong to an environment group";
                };
            };
            readonly required: readonly ["envGroupId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["createdAt", "envVars", "id", "name", "ownerId", "secretFiles", "serviceLinks", "updatedAt"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly ownerId: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly updatedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly serviceLinks: {
                    readonly description: "List of serviceIds linked to the envGroup";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["id", "name", "type"];
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["static", "web", "pserv", "worker", "cron"];
                                readonly description: "`static` `web` `pserv` `worker` `cron`";
                            };
                        };
                    };
                };
                readonly environmentId: {
                    readonly type: "string";
                };
                readonly envVars: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["key", "value"];
                        readonly properties: {
                            readonly key: {
                                readonly type: "string";
                            };
                            readonly value: {
                                readonly type: "string";
                            };
                        };
                    };
                };
                readonly secretFiles: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["name", "content"];
                        readonly properties: {
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly content: {
                                readonly type: "string";
                            };
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RetrieveEnvGroupEnvVar: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly envGroupId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for resources that belong to an environment group";
                };
                readonly envVarKey: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The name of the environment variable";
                };
            };
            readonly required: readonly ["envGroupId", "envVarKey"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["key", "value"];
            readonly properties: {
                readonly key: {
                    readonly type: "string";
                };
                readonly value: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RetrieveEnvGroupSecretFile: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly envGroupId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for resources that belong to an environment group";
                };
                readonly secretFileName: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The name of the secret file";
                };
            };
            readonly required: readonly ["envGroupId", "secretFileName"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["name", "content"];
            readonly properties: {
                readonly name: {
                    readonly type: "string";
                };
                readonly content: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RetrieveEnvVar: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly serviceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the service";
                };
                readonly envVarKey: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The name of the environment variable";
                };
            };
            readonly required: readonly ["serviceId", "envVarKey"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["key", "value"];
            readonly properties: {
                readonly key: {
                    readonly type: "string";
                };
                readonly value: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RetrieveEnvironment: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly environmentId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["environmentId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "projectId", "databasesIds", "redisIds", "serviceIds", "envGroupIds", "protectedStatus", "networkIsolationEnabled"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly projectId: {
                    readonly type: "string";
                };
                readonly databasesIds: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly redisIds: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly serviceIds: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly envGroupIds: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly protectedStatus: {
                    readonly type: "string";
                    readonly description: "Indicates whether an environment is `unprotected` or `protected`. Only admin users can perform destructive actions in `protected` environments.\n\n`unprotected` `protected`";
                    readonly enum: readonly ["unprotected", "protected"];
                };
                readonly networkIsolationEnabled: {
                    readonly type: "boolean";
                    readonly description: "Indicates whether network connections across environments are allowed.";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RetrieveJob: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly serviceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the service";
                };
                readonly jobId: {
                    readonly type: "string";
                    readonly pattern: "^job-[0-9a-z]{20}$";
                    readonly examples: readonly ["job-cph1rs3idesc73a2b2mg"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the job";
                };
            };
            readonly required: readonly ["serviceId", "jobId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "serviceId", "startCommand", "planId", "createdAt"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly pattern: "^job-[0-9a-z]{20}$";
                    readonly examples: readonly ["job-cph1rs3idesc73a2b2mg"];
                };
                readonly serviceId: {
                    readonly type: "string";
                    readonly examples: readonly ["srv-xxxxx"];
                };
                readonly startCommand: {
                    readonly type: "string";
                    readonly examples: readonly ["echo 'hello world'"];
                };
                readonly planId: {
                    readonly type: "string";
                    readonly examples: readonly ["plan-srv-004"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["succeeded", "failed", "canceled"];
                    readonly description: "`succeeded` `failed` `canceled`";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-07-15T07:20:05.777035-07:00"];
                };
                readonly startedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-07-15T07:20:05.777035-07:00"];
                };
                readonly finishedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-07-15T07:20:05.777035-07:00"];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RetrieveMaintenance: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly maintenanceRunParam: {
                    readonly type: "string";
                    readonly pattern: "^mrn-[0-9a-z]{20}$";
                    readonly examples: readonly ["mrn-cph1rs3idesc73a2b2mg"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["maintenanceRunParam"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "type", "scheduledAt", "state", "resourceId"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly pattern: "^mrn-[0-9a-z]{20}$";
                    readonly examples: readonly ["mrn-cph1rs3idesc73a2b2mg"];
                };
                readonly type: {
                    readonly type: "string";
                };
                readonly scheduledAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly pendingMaintenanceBy: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "If present, the maintenance run cannot be scheduled for later than this date-time.";
                };
                readonly state: {
                    readonly type: "string";
                    readonly enum: readonly ["scheduled", "in_progress", "user_fix_required", "cancelled", "succeeded", "failed"];
                    readonly description: "`scheduled` `in_progress` `user_fix_required` `cancelled` `succeeded` `failed`";
                };
                readonly resourceId: {
                    readonly type: "string";
                    readonly description: "The Id of a resource that can undergo maintenance (Id of a service, a Postgres instance, or a Redis instance)";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RetrieveOwner: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly ownerId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the user or team";
                };
            };
            readonly required: readonly ["ownerId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "email", "type"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly email: {
                    readonly type: "string";
                };
                readonly twoFactorAuthEnabled: {
                    readonly type: "boolean";
                    readonly description: "Whether two-factor authentication is enabled for the owner. Only present for user owners.";
                };
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["user", "team"];
                    readonly description: "`user` `team`";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RetrieveOwnerNotificationSettings: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly ownerId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the owner (team or personal user) whose resources should be returned";
                };
            };
            readonly required: readonly ["ownerId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["ownerId", "slackEnabled", "emailEnabled", "previewNotificationsEnabled", "notificationsToSend"];
            readonly properties: {
                readonly ownerId: {
                    readonly type: "string";
                };
                readonly slackEnabled: {
                    readonly type: "boolean";
                };
                readonly emailEnabled: {
                    readonly type: "boolean";
                };
                readonly previewNotificationsEnabled: {
                    readonly type: "boolean";
                };
                readonly notificationsToSend: {
                    readonly type: "string";
                    readonly enum: readonly ["none", "failure", "all"];
                    readonly description: "`none` `failure` `all`";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RetrievePostgres: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly postgresId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["postgresId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "ipAllowList", "createdAt", "updatedAt", "dashboardUrl", "databaseName", "databaseUser", "highAvailabilityEnabled", "name", "owner", "project", "plan", "region", "readReplicas", "role", "status", "version", "suspended", "suspenders"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly ipAllowList: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["cidrBlock", "description"];
                        readonly properties: {
                            readonly cidrBlock: {
                                readonly type: "string";
                            };
                            readonly description: {
                                readonly description: "User-provided description of the CIDR block";
                                readonly type: "string";
                            };
                        };
                    };
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly updatedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly expiresAt: {
                    readonly description: "The time at which the database will be expire. Applies to free tier databases only.";
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly dashboardUrl: {
                    readonly type: "string";
                    readonly description: "The URL to view the PostgreSQL instance in the Render Dashboard";
                };
                readonly databaseName: {
                    readonly type: "string";
                };
                readonly databaseUser: {
                    readonly type: "string";
                };
                readonly environmentId: {
                    readonly type: "string";
                };
                readonly highAvailabilityEnabled: {
                    readonly type: "boolean";
                };
                readonly maintenance: {
                    readonly type: "object";
                    readonly required: readonly ["id", "type", "scheduledAt", "state"];
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly pattern: "^mrn-[0-9a-z]{20}$";
                            readonly examples: readonly ["mrn-cph1rs3idesc73a2b2mg"];
                        };
                        readonly type: {
                            readonly type: "string";
                        };
                        readonly scheduledAt: {
                            readonly type: "string";
                            readonly format: "date-time";
                        };
                        readonly pendingMaintenanceBy: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "If present, the maintenance run cannot be scheduled for later than this date-time.";
                        };
                        readonly state: {
                            readonly type: "string";
                            readonly enum: readonly ["scheduled", "in_progress", "user_fix_required", "cancelled", "succeeded", "failed"];
                            readonly description: "`scheduled` `in_progress` `user_fix_required` `cancelled` `succeeded` `failed`";
                        };
                    };
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly owner: {
                    readonly type: "object";
                    readonly required: readonly ["id", "name", "email", "type"];
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly email: {
                            readonly type: "string";
                        };
                        readonly twoFactorAuthEnabled: {
                            readonly type: "boolean";
                            readonly description: "Whether two-factor authentication is enabled for the owner. Only present for user owners.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly enum: readonly ["user", "team"];
                            readonly description: "`user` `team`";
                        };
                    };
                };
                readonly plan: {
                    readonly type: "string";
                    readonly enum: readonly ["free", "starter", "standard", "pro", "pro_plus", "custom", "basic_256mb", "basic_1gb", "basic_4gb", "pro_4gb", "pro_8gb", "pro_16gb", "pro_32gb", "pro_64gb", "pro_128gb", "pro_192gb", "pro_256gb", "pro_384gb", "pro_512gb", "accelerated_16gb", "accelerated_32gb", "accelerated_64gb", "accelerated_128gb", "accelerated_256gb", "accelerated_384gb", "accelerated_512gb", "accelerated_768gb", "accelerated_1024gb"];
                    readonly description: "`free` `starter` `standard` `pro` `pro_plus` `custom` `basic_256mb` `basic_1gb` `basic_4gb` `pro_4gb` `pro_8gb` `pro_16gb` `pro_32gb` `pro_64gb` `pro_128gb` `pro_192gb` `pro_256gb` `pro_384gb` `pro_512gb` `accelerated_16gb` `accelerated_32gb` `accelerated_64gb` `accelerated_128gb` `accelerated_256gb` `accelerated_384gb` `accelerated_512gb` `accelerated_768gb` `accelerated_1024gb`";
                };
                readonly diskSizeGB: {
                    readonly type: "integer";
                };
                readonly primaryPostgresID: {
                    readonly type: "string";
                };
                readonly region: {
                    readonly type: "string";
                    readonly enum: readonly ["frankfurt", "oregon", "ohio", "singapore", "virginia"];
                    readonly default: "oregon";
                    readonly description: "Defaults to \"oregon\"\n\n`frankfurt` `oregon` `ohio` `singapore` `virginia`";
                };
                readonly readReplicas: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "The replica instance identifier.";
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "The display name of the replica instance.";
                            };
                        };
                        readonly required: readonly ["id", "name"];
                    };
                };
                readonly role: {
                    readonly type: "string";
                    readonly enum: readonly ["primary", "replica"];
                    readonly description: "`primary` `replica`";
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["creating", "available", "unavailable", "config_restart", "suspended", "maintenance_scheduled", "maintenance_in_progress", "recovery_failed", "recovery_in_progress", "unknown", "updating_instance"];
                    readonly description: "`creating` `available` `unavailable` `config_restart` `suspended` `maintenance_scheduled` `maintenance_in_progress` `recovery_failed` `recovery_in_progress` `unknown` `updating_instance`";
                };
                readonly version: {
                    readonly type: "string";
                    readonly description: "The PostgreSQL version\n\n`11` `12` `13` `14` `15` `16`";
                    readonly enum: readonly ["11", "12", "13", "14", "15", "16"];
                };
                readonly suspended: {
                    readonly type: "string";
                    readonly enum: readonly ["suspended", "not_suspended"];
                    readonly description: "`suspended` `not_suspended`";
                };
                readonly suspenders: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["admin", "billing", "user", "parent_service", "unknown"];
                        readonly description: "`admin` `billing` `user` `parent_service` `unknown`";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RetrievePostgresConnectionInfo: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly postgresId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["postgresId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["password", "internalConnectionString", "externalConnectionString", "psqlCommand"];
            readonly properties: {
                readonly password: {
                    readonly type: "string";
                    readonly format: "password";
                };
                readonly internalConnectionString: {
                    readonly type: "string";
                    readonly format: "password";
                };
                readonly externalConnectionString: {
                    readonly type: "string";
                    readonly format: "password";
                };
                readonly psqlCommand: {
                    readonly type: "string";
                    readonly format: "password";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RetrievePostgresRecoveryInfo: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly postgresId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["postgresId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["recoveryStatus"];
            readonly properties: {
                readonly recoveryStatus: {
                    readonly type: "string";
                    readonly description: "Availability of point-in-time recovery.\n\n`AVAILABLE` `BACKUP_NOT_READY` `NOT_AVAILABLE`";
                    readonly enum: readonly ["AVAILABLE", "BACKUP_NOT_READY", "NOT_AVAILABLE"];
                };
                readonly startsAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RetrieveProject: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly projectId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["projectId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly description: "A project is a collection of environments";
            readonly type: "object";
            readonly required: readonly ["id", "createdAt", "updatedAt", "name", "owner", "environmentIds"];
            readonly properties: {
                readonly id: {
                    readonly description: "The ID of the project";
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly updatedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly name: {
                    readonly description: "The name of the project";
                    readonly type: "string";
                };
                readonly owner: {
                    readonly type: "object";
                    readonly required: readonly ["id", "name", "email", "type"];
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly email: {
                            readonly type: "string";
                        };
                        readonly twoFactorAuthEnabled: {
                            readonly type: "boolean";
                            readonly description: "Whether two-factor authentication is enabled for the owner. Only present for user owners.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly enum: readonly ["user", "team"];
                            readonly description: "`user` `team`";
                        };
                    };
                };
                readonly environmentIds: {
                    readonly description: "The environments associated with the project";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly description: "The ID of the environment";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RetrieveRedis: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly redisId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["redisId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "A Redis instance";
            readonly required: readonly ["id", "createdAt", "updatedAt", "status", "region", "plan", "name", "owner", "options", "ipAllowList", "version"];
            readonly properties: {
                readonly id: {
                    readonly description: "The ID of the Redis instance";
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly description: "The creation time of the Redis instance";
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly updatedAt: {
                    readonly description: "The last updated time of the Redis instance";
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["creating", "available", "unavailable", "config_restart", "suspended", "maintenance_scheduled", "maintenance_in_progress", "recovery_failed", "recovery_in_progress", "unknown", "updating_instance"];
                    readonly description: "`creating` `available` `unavailable` `config_restart` `suspended` `maintenance_scheduled` `maintenance_in_progress` `recovery_failed` `recovery_in_progress` `unknown` `updating_instance`";
                };
                readonly region: {
                    readonly type: "string";
                    readonly enum: readonly ["frankfurt", "oregon", "ohio", "singapore", "virginia"];
                    readonly default: "oregon";
                    readonly description: "Defaults to \"oregon\"\n\n`frankfurt` `oregon` `ohio` `singapore` `virginia`";
                };
                readonly plan: {
                    readonly type: "string";
                    readonly enum: readonly ["free", "starter", "standard", "pro", "pro_plus", "custom"];
                    readonly "x-enum-varnames": readonly ["RedisPlanFree", "RedisPlanStarter", "RedisPlanStandard", "RedisPlanPro", "RedisPlanPro_plus", "RedisPlanCustom"];
                    readonly description: "`free` `starter` `standard` `pro` `pro_plus` `custom`";
                };
                readonly name: {
                    readonly description: "The name of the Redis instance";
                    readonly type: "string";
                };
                readonly owner: {
                    readonly type: "object";
                    readonly required: readonly ["id", "name", "email", "type"];
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly email: {
                            readonly type: "string";
                        };
                        readonly twoFactorAuthEnabled: {
                            readonly type: "boolean";
                            readonly description: "Whether two-factor authentication is enabled for the owner. Only present for user owners.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly enum: readonly ["user", "team"];
                            readonly description: "`user` `team`";
                        };
                    };
                };
                readonly options: {
                    readonly description: "Options for a Redis instance";
                    readonly type: "object";
                    readonly properties: {
                        readonly maxmemoryPolicy: {
                            readonly type: "string";
                        };
                    };
                };
                readonly ipAllowList: {
                    readonly description: "The IP allow list for the Redis instance";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["cidrBlock", "description"];
                        readonly properties: {
                            readonly cidrBlock: {
                                readonly type: "string";
                            };
                            readonly description: {
                                readonly description: "User-provided description of the CIDR block";
                                readonly type: "string";
                            };
                        };
                    };
                };
                readonly environmentId: {
                    readonly description: "The ID of the environment the Redis instance is associated with";
                    readonly type: "string";
                };
                readonly version: {
                    readonly description: "The version of Redis";
                    readonly type: "string";
                };
                readonly maintenance: {
                    readonly type: "object";
                    readonly required: readonly ["id", "type", "scheduledAt", "state"];
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly pattern: "^mrn-[0-9a-z]{20}$";
                            readonly examples: readonly ["mrn-cph1rs3idesc73a2b2mg"];
                        };
                        readonly type: {
                            readonly type: "string";
                        };
                        readonly scheduledAt: {
                            readonly type: "string";
                            readonly format: "date-time";
                        };
                        readonly pendingMaintenanceBy: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "If present, the maintenance run cannot be scheduled for later than this date-time.";
                        };
                        readonly state: {
                            readonly type: "string";
                            readonly enum: readonly ["scheduled", "in_progress", "user_fix_required", "cancelled", "succeeded", "failed"];
                            readonly description: "`scheduled` `in_progress` `user_fix_required` `cancelled` `succeeded` `failed`";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RetrieveRedisConnectionInfo: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly redisId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["redisId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "A Redis instance";
            readonly required: readonly ["internalConnectionString", "externalConnectionString", "redisCLICommand"];
            readonly properties: {
                readonly internalConnectionString: {
                    readonly description: "The connection string to use from within Render";
                    readonly type: "string";
                };
                readonly externalConnectionString: {
                    readonly description: "The connection string to use from outside Render";
                    readonly type: "string";
                    readonly format: "password";
                };
                readonly redisCLICommand: {
                    readonly description: "The Redis CLI command to connect to the Redis instance";
                    readonly type: "string";
                    readonly format: "password";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RetrieveRegistryCredential: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly registryCredentialId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the registry credential";
                };
            };
            readonly required: readonly ["registryCredentialId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "username", "registry", "updatedAt"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique identifier for this credential";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Descriptive name for this credential";
                };
                readonly registry: {
                    readonly type: "string";
                    readonly enum: readonly ["GITHUB", "GITLAB", "DOCKER", "GOOGLE_ARTIFACT", "AWS_ECR"];
                    readonly description: "The registry to use this credential with\n\n`GITHUB` `GITLAB` `DOCKER` `GOOGLE_ARTIFACT` `AWS_ECR`";
                };
                readonly username: {
                    readonly type: "string";
                    readonly description: "The username associated with the credential";
                };
                readonly updatedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Last updated time for the credential";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RetrieveSecretFile: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly serviceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the service";
                };
                readonly secretFileName: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The file name of the secret file";
                };
            };
            readonly required: readonly ["serviceId", "secretFileName"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["name", "content"];
            readonly properties: {
                readonly name: {
                    readonly type: "string";
                };
                readonly content: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RetrieveService: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly serviceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the service";
                };
            };
            readonly required: readonly ["serviceId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "ownerId", "type", "createdAt", "dashboardUrl", "updatedAt", "suspended", "suspenders", "autoDeploy", "notifyOnFail", "slug", "serviceDetails", "rootDir"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly autoDeploy: {
                    readonly type: "string";
                    readonly enum: readonly ["yes", "no"];
                    readonly default: "yes";
                    readonly description: "`yes` `no`";
                };
                readonly branch: {
                    readonly type: "string";
                };
                readonly buildFilter: {
                    readonly type: "object";
                    readonly required: readonly ["paths", "ignoredPaths"];
                    readonly properties: {
                        readonly paths: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly ignoredPaths: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                    };
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly dashboardUrl: {
                    readonly type: "string";
                    readonly description: "The URL to view the service in the Render Dashboard";
                };
                readonly environmentId: {
                    readonly type: "string";
                };
                readonly imagePath: {
                    readonly type: "string";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly notifyOnFail: {
                    readonly type: "string";
                    readonly enum: readonly ["default", "notify", "ignore"];
                    readonly description: "`default` `notify` `ignore`";
                };
                readonly ownerId: {
                    readonly type: "string";
                };
                readonly registryCredential: {
                    readonly type: "object";
                    readonly required: readonly ["id", "name"];
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                    };
                };
                readonly repo: {
                    readonly type: "string";
                    readonly examples: readonly ["https://github.com/render-examples/flask-hello-world"];
                };
                readonly rootDir: {
                    readonly type: "string";
                };
                readonly slug: {
                    readonly type: "string";
                };
                readonly suspended: {
                    readonly type: "string";
                    readonly enum: readonly ["suspended", "not_suspended"];
                    readonly description: "`suspended` `not_suspended`";
                };
                readonly suspenders: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["admin", "billing", "user", "parent_service", "unknown"];
                        readonly description: "`admin` `billing` `user` `parent_service` `unknown`";
                    };
                };
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["static_site", "web_service", "private_service", "background_worker", "cron_job"];
                    readonly description: "`static_site` `web_service` `private_service` `background_worker` `cron_job`";
                };
                readonly updatedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly serviceDetails: {
                    readonly oneOf: readonly [{
                        readonly type: "object";
                        readonly required: readonly ["buildCommand", "publishPath", "url", "buildPlan"];
                        readonly properties: {
                            readonly buildCommand: {
                                readonly type: "string";
                            };
                            readonly parentServer: {
                                readonly required: readonly ["id", "name"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly publishPath: {
                                readonly type: "string";
                            };
                            readonly pullRequestPreviewsEnabled: {
                                readonly type: "string";
                                readonly enum: readonly ["yes", "no"];
                                readonly default: "no";
                                readonly deprecated: true;
                                readonly description: "This field has been deprecated. previews.generation should be used in its place.\n\n`yes` `no`";
                            };
                            readonly previews: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly generation: {
                                        readonly type: "string";
                                        readonly enum: readonly ["off", "manual", "automatic"];
                                        readonly default: "off";
                                        readonly description: "Defaults to \"off\"\n\n`off` `manual` `automatic`";
                                    };
                                };
                            };
                            readonly url: {
                                readonly type: "string";
                            };
                            readonly buildPlan: {
                                readonly type: "string";
                                readonly enum: readonly ["starter", "performance"];
                                readonly default: "starter";
                                readonly description: "`starter` `performance`";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly required: readonly ["env", "runtime", "envSpecificDetails", "plan", "region", "numInstances", "buildPlan", "healthCheckPath", "openPorts", "url"];
                        readonly properties: {
                            readonly autoscaling: {
                                readonly type: "object";
                                readonly required: readonly ["enabled", "min", "max", "criteria"];
                                readonly properties: {
                                    readonly enabled: {
                                        readonly type: "boolean";
                                        readonly default: false;
                                    };
                                    readonly min: {
                                        readonly type: "integer";
                                        readonly description: "The minimum number of instances for the service";
                                    };
                                    readonly max: {
                                        readonly type: "integer";
                                        readonly description: "The maximum number of instances for the service";
                                    };
                                    readonly criteria: {
                                        readonly type: "object";
                                        readonly required: readonly ["cpu", "memory"];
                                        readonly properties: {
                                            readonly cpu: {
                                                readonly type: "object";
                                                readonly required: readonly ["enabled", "percentage"];
                                                readonly properties: {
                                                    readonly enabled: {
                                                        readonly type: "boolean";
                                                        readonly default: false;
                                                    };
                                                    readonly percentage: {
                                                        readonly type: "integer";
                                                        readonly description: "Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.\n";
                                                    };
                                                };
                                            };
                                            readonly memory: {
                                                readonly type: "object";
                                                readonly required: readonly ["enabled", "percentage"];
                                                readonly properties: {
                                                    readonly enabled: {
                                                        readonly type: "boolean";
                                                        readonly default: false;
                                                    };
                                                    readonly percentage: {
                                                        readonly type: "integer";
                                                        readonly description: "Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.\n";
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                            readonly disk: {
                                readonly type: "object";
                                readonly required: readonly ["id", "name", "sizeGB", "mountPath"];
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly pattern: "^dsk-[0-9a-z]{20}$";
                                        readonly examples: readonly ["dsk-cph1rs3idesc73a2b2mg"];
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly sizeGB: {
                                        readonly type: "integer";
                                    };
                                    readonly mountPath: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly env: {
                                readonly type: "string";
                                readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                                readonly deprecated: true;
                                readonly description: "This field has been deprecated, runtime should be used in its place.\n\n`docker` `elixir` `go` `node` `python` `ruby` `rust` `image`";
                            };
                            readonly envSpecificDetails: {
                                readonly oneOf: readonly [{
                                    readonly type: "object";
                                    readonly required: readonly ["dockerCommand", "dockerContext", "dockerfilePath"];
                                    readonly properties: {
                                        readonly dockerCommand: {
                                            readonly type: "string";
                                        };
                                        readonly dockerContext: {
                                            readonly type: "string";
                                        };
                                        readonly dockerfilePath: {
                                            readonly type: "string";
                                        };
                                        readonly preDeployCommand: {
                                            readonly type: "string";
                                        };
                                        readonly registryCredential: {
                                            readonly type: "object";
                                            readonly required: readonly ["id", "name", "username", "registry", "updatedAt"];
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                    readonly description: "Unique identifier for this credential";
                                                };
                                                readonly name: {
                                                    readonly type: "string";
                                                    readonly description: "Descriptive name for this credential";
                                                };
                                                readonly registry: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["GITHUB", "GITLAB", "DOCKER", "GOOGLE_ARTIFACT", "AWS_ECR"];
                                                    readonly description: "The registry to use this credential with\n\n`GITHUB` `GITLAB` `DOCKER` `GOOGLE_ARTIFACT` `AWS_ECR`";
                                                };
                                                readonly username: {
                                                    readonly type: "string";
                                                    readonly description: "The username associated with the credential";
                                                };
                                                readonly updatedAt: {
                                                    readonly type: "string";
                                                    readonly format: "date-time";
                                                    readonly description: "Last updated time for the credential";
                                                };
                                            };
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["buildCommand", "startCommand"];
                                    readonly properties: {
                                        readonly buildCommand: {
                                            readonly type: "string";
                                        };
                                        readonly startCommand: {
                                            readonly type: "string";
                                        };
                                        readonly preDeployCommand: {
                                            readonly type: "string";
                                        };
                                    };
                                }];
                            };
                            readonly healthCheckPath: {
                                readonly type: "string";
                            };
                            readonly maintenanceMode: {
                                readonly type: "object";
                                readonly required: readonly ["enabled", "uri"];
                                readonly properties: {
                                    readonly enabled: {
                                        readonly type: "boolean";
                                    };
                                    readonly uri: {
                                        readonly type: "string";
                                        readonly description: "The page to be served when [maintenance mode](https://docs.render.com/maintenance-mode) is enabled. When empty, the default maintenance mode page is served.";
                                    };
                                };
                            };
                            readonly numInstances: {
                                readonly type: "integer";
                                readonly description: "For a *manually* scaled service, this is the number of instances the service is scaled to. DOES NOT indicate the number of running instances for an *autoscaled* service.";
                            };
                            readonly openPorts: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly required: readonly ["port", "protocol"];
                                    readonly properties: {
                                        readonly port: {
                                            readonly type: "integer";
                                            readonly examples: readonly [10000];
                                        };
                                        readonly protocol: {
                                            readonly type: "string";
                                            readonly enum: readonly ["TCP", "UDP"];
                                            readonly description: "`TCP` `UDP`";
                                        };
                                    };
                                };
                            };
                            readonly parentServer: {
                                readonly required: readonly ["id", "name"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly plan: {
                                readonly type: "string";
                                readonly enum: readonly ["starter", "starter_plus", "standard", "standard_plus", "pro", "pro_plus", "pro_max", "pro_ultra", "free", "custom"];
                                readonly description: "The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.\n\n`starter` `starter_plus` `standard` `standard_plus` `pro` `pro_plus` `pro_max` `pro_ultra` `free` `custom`";
                                readonly examples: readonly ["starter"];
                            };
                            readonly pullRequestPreviewsEnabled: {
                                readonly type: "string";
                                readonly enum: readonly ["yes", "no"];
                                readonly default: "no";
                                readonly deprecated: true;
                                readonly description: "This field has been deprecated. previews.generation should be used in its place.\n\n`yes` `no`";
                            };
                            readonly previews: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly generation: {
                                        readonly type: "string";
                                        readonly enum: readonly ["off", "manual", "automatic"];
                                        readonly default: "off";
                                        readonly description: "Defaults to \"off\"\n\n`off` `manual` `automatic`";
                                    };
                                };
                            };
                            readonly region: {
                                readonly type: "string";
                                readonly enum: readonly ["frankfurt", "oregon", "ohio", "singapore", "virginia"];
                                readonly default: "oregon";
                                readonly description: "Defaults to \"oregon\"\n\n`frankfurt` `oregon` `ohio` `singapore` `virginia`";
                            };
                            readonly runtime: {
                                readonly type: "string";
                                readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                                readonly description: "Runtime\n\n`docker` `elixir` `go` `node` `python` `ruby` `rust` `image`";
                            };
                            readonly sshAddress: {
                                readonly type: "string";
                                readonly description: "The SSH address for the service. Only present for services that have SSH enabled.";
                            };
                            readonly url: {
                                readonly type: "string";
                            };
                            readonly buildPlan: {
                                readonly type: "string";
                                readonly enum: readonly ["starter", "performance"];
                                readonly default: "starter";
                                readonly description: "`starter` `performance`";
                            };
                            readonly maxShutdownDelaySeconds: {
                                readonly type: "integer";
                                readonly description: "The maximum amount of time (in seconds) that Render waits for your application process to exit gracefully after sending it a SIGTERM signal.";
                                readonly minimum: 1;
                                readonly maximum: 300;
                                readonly default: 30;
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly required: readonly ["env", "runtime", "envSpecificDetails", "plan", "region", "numInstances", "buildPlan", "openPorts", "url"];
                        readonly properties: {
                            readonly autoscaling: {
                                readonly type: "object";
                                readonly required: readonly ["enabled", "min", "max", "criteria"];
                                readonly properties: {
                                    readonly enabled: {
                                        readonly type: "boolean";
                                        readonly default: false;
                                    };
                                    readonly min: {
                                        readonly type: "integer";
                                        readonly description: "The minimum number of instances for the service";
                                    };
                                    readonly max: {
                                        readonly type: "integer";
                                        readonly description: "The maximum number of instances for the service";
                                    };
                                    readonly criteria: {
                                        readonly type: "object";
                                        readonly required: readonly ["cpu", "memory"];
                                        readonly properties: {
                                            readonly cpu: {
                                                readonly type: "object";
                                                readonly required: readonly ["enabled", "percentage"];
                                                readonly properties: {
                                                    readonly enabled: {
                                                        readonly type: "boolean";
                                                        readonly default: false;
                                                    };
                                                    readonly percentage: {
                                                        readonly type: "integer";
                                                        readonly description: "Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.\n";
                                                    };
                                                };
                                            };
                                            readonly memory: {
                                                readonly type: "object";
                                                readonly required: readonly ["enabled", "percentage"];
                                                readonly properties: {
                                                    readonly enabled: {
                                                        readonly type: "boolean";
                                                        readonly default: false;
                                                    };
                                                    readonly percentage: {
                                                        readonly type: "integer";
                                                        readonly description: "Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.\n";
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                            readonly disk: {
                                readonly type: "object";
                                readonly required: readonly ["id", "name", "sizeGB", "mountPath"];
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly pattern: "^dsk-[0-9a-z]{20}$";
                                        readonly examples: readonly ["dsk-cph1rs3idesc73a2b2mg"];
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly sizeGB: {
                                        readonly type: "integer";
                                    };
                                    readonly mountPath: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly env: {
                                readonly type: "string";
                                readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                                readonly deprecated: true;
                                readonly description: "This field has been deprecated, runtime should be used in its place.\n\n`docker` `elixir` `go` `node` `python` `ruby` `rust` `image`";
                            };
                            readonly envSpecificDetails: {
                                readonly oneOf: readonly [{
                                    readonly type: "object";
                                    readonly required: readonly ["dockerCommand", "dockerContext", "dockerfilePath"];
                                    readonly properties: {
                                        readonly dockerCommand: {
                                            readonly type: "string";
                                        };
                                        readonly dockerContext: {
                                            readonly type: "string";
                                        };
                                        readonly dockerfilePath: {
                                            readonly type: "string";
                                        };
                                        readonly preDeployCommand: {
                                            readonly type: "string";
                                        };
                                        readonly registryCredential: {
                                            readonly type: "object";
                                            readonly required: readonly ["id", "name", "username", "registry", "updatedAt"];
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                    readonly description: "Unique identifier for this credential";
                                                };
                                                readonly name: {
                                                    readonly type: "string";
                                                    readonly description: "Descriptive name for this credential";
                                                };
                                                readonly registry: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["GITHUB", "GITLAB", "DOCKER", "GOOGLE_ARTIFACT", "AWS_ECR"];
                                                    readonly description: "The registry to use this credential with\n\n`GITHUB` `GITLAB` `DOCKER` `GOOGLE_ARTIFACT` `AWS_ECR`";
                                                };
                                                readonly username: {
                                                    readonly type: "string";
                                                    readonly description: "The username associated with the credential";
                                                };
                                                readonly updatedAt: {
                                                    readonly type: "string";
                                                    readonly format: "date-time";
                                                    readonly description: "Last updated time for the credential";
                                                };
                                            };
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["buildCommand", "startCommand"];
                                    readonly properties: {
                                        readonly buildCommand: {
                                            readonly type: "string";
                                        };
                                        readonly startCommand: {
                                            readonly type: "string";
                                        };
                                        readonly preDeployCommand: {
                                            readonly type: "string";
                                        };
                                    };
                                }];
                            };
                            readonly numInstances: {
                                readonly type: "integer";
                                readonly description: "For a *manually* scaled service, this is the number of instances the service is scaled to. DOES NOT indicate the number of running instances for an *autoscaled* service.";
                            };
                            readonly openPorts: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly required: readonly ["port", "protocol"];
                                    readonly properties: {
                                        readonly port: {
                                            readonly type: "integer";
                                            readonly examples: readonly [10000];
                                        };
                                        readonly protocol: {
                                            readonly type: "string";
                                            readonly enum: readonly ["TCP", "UDP"];
                                            readonly description: "`TCP` `UDP`";
                                        };
                                    };
                                };
                            };
                            readonly parentServer: {
                                readonly required: readonly ["id", "name"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly plan: {
                                readonly type: "string";
                                readonly enum: readonly ["starter", "starter_plus", "standard", "standard_plus", "pro", "pro_plus", "pro_max", "pro_ultra", "free", "custom"];
                                readonly description: "The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.\n\n`starter` `starter_plus` `standard` `standard_plus` `pro` `pro_plus` `pro_max` `pro_ultra` `free` `custom`";
                                readonly examples: readonly ["starter"];
                            };
                            readonly pullRequestPreviewsEnabled: {
                                readonly type: "string";
                                readonly enum: readonly ["yes", "no"];
                                readonly default: "no";
                                readonly deprecated: true;
                                readonly description: "This field has been deprecated. previews.generation should be used in its place.\n\n`yes` `no`";
                            };
                            readonly previews: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly generation: {
                                        readonly type: "string";
                                        readonly enum: readonly ["off", "manual", "automatic"];
                                        readonly default: "off";
                                        readonly description: "Defaults to \"off\"\n\n`off` `manual` `automatic`";
                                    };
                                };
                            };
                            readonly region: {
                                readonly type: "string";
                                readonly enum: readonly ["frankfurt", "oregon", "ohio", "singapore", "virginia"];
                                readonly default: "oregon";
                                readonly description: "Defaults to \"oregon\"\n\n`frankfurt` `oregon` `ohio` `singapore` `virginia`";
                            };
                            readonly runtime: {
                                readonly type: "string";
                                readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                                readonly description: "Runtime\n\n`docker` `elixir` `go` `node` `python` `ruby` `rust` `image`";
                            };
                            readonly sshAddress: {
                                readonly type: "string";
                                readonly description: "The SSH address for the service. Only present for services that have SSH enabled.";
                            };
                            readonly url: {
                                readonly type: "string";
                            };
                            readonly buildPlan: {
                                readonly type: "string";
                                readonly enum: readonly ["starter", "performance"];
                                readonly default: "starter";
                                readonly description: "`starter` `performance`";
                            };
                            readonly maxShutdownDelaySeconds: {
                                readonly type: "integer";
                                readonly description: "The maximum amount of time (in seconds) that Render waits for your application process to exit gracefully after sending it a SIGTERM signal.";
                                readonly minimum: 1;
                                readonly maximum: 300;
                                readonly default: 30;
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly required: readonly ["env", "runtime", "envSpecificDetails", "plan", "region", "numInstances", "buildPlan"];
                        readonly properties: {
                            readonly autoscaling: {
                                readonly type: "object";
                                readonly required: readonly ["enabled", "min", "max", "criteria"];
                                readonly properties: {
                                    readonly enabled: {
                                        readonly type: "boolean";
                                        readonly default: false;
                                    };
                                    readonly min: {
                                        readonly type: "integer";
                                        readonly description: "The minimum number of instances for the service";
                                    };
                                    readonly max: {
                                        readonly type: "integer";
                                        readonly description: "The maximum number of instances for the service";
                                    };
                                    readonly criteria: {
                                        readonly type: "object";
                                        readonly required: readonly ["cpu", "memory"];
                                        readonly properties: {
                                            readonly cpu: {
                                                readonly type: "object";
                                                readonly required: readonly ["enabled", "percentage"];
                                                readonly properties: {
                                                    readonly enabled: {
                                                        readonly type: "boolean";
                                                        readonly default: false;
                                                    };
                                                    readonly percentage: {
                                                        readonly type: "integer";
                                                        readonly description: "Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.\n";
                                                    };
                                                };
                                            };
                                            readonly memory: {
                                                readonly type: "object";
                                                readonly required: readonly ["enabled", "percentage"];
                                                readonly properties: {
                                                    readonly enabled: {
                                                        readonly type: "boolean";
                                                        readonly default: false;
                                                    };
                                                    readonly percentage: {
                                                        readonly type: "integer";
                                                        readonly description: "Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.\n";
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                            readonly disk: {
                                readonly type: "object";
                                readonly required: readonly ["id", "name", "sizeGB", "mountPath"];
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly pattern: "^dsk-[0-9a-z]{20}$";
                                        readonly examples: readonly ["dsk-cph1rs3idesc73a2b2mg"];
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly sizeGB: {
                                        readonly type: "integer";
                                    };
                                    readonly mountPath: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly env: {
                                readonly type: "string";
                                readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                                readonly deprecated: true;
                                readonly description: "This field has been deprecated, runtime should be used in its place.\n\n`docker` `elixir` `go` `node` `python` `ruby` `rust` `image`";
                            };
                            readonly envSpecificDetails: {
                                readonly oneOf: readonly [{
                                    readonly type: "object";
                                    readonly required: readonly ["dockerCommand", "dockerContext", "dockerfilePath"];
                                    readonly properties: {
                                        readonly dockerCommand: {
                                            readonly type: "string";
                                        };
                                        readonly dockerContext: {
                                            readonly type: "string";
                                        };
                                        readonly dockerfilePath: {
                                            readonly type: "string";
                                        };
                                        readonly preDeployCommand: {
                                            readonly type: "string";
                                        };
                                        readonly registryCredential: {
                                            readonly type: "object";
                                            readonly required: readonly ["id", "name", "username", "registry", "updatedAt"];
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                    readonly description: "Unique identifier for this credential";
                                                };
                                                readonly name: {
                                                    readonly type: "string";
                                                    readonly description: "Descriptive name for this credential";
                                                };
                                                readonly registry: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["GITHUB", "GITLAB", "DOCKER", "GOOGLE_ARTIFACT", "AWS_ECR"];
                                                    readonly description: "The registry to use this credential with\n\n`GITHUB` `GITLAB` `DOCKER` `GOOGLE_ARTIFACT` `AWS_ECR`";
                                                };
                                                readonly username: {
                                                    readonly type: "string";
                                                    readonly description: "The username associated with the credential";
                                                };
                                                readonly updatedAt: {
                                                    readonly type: "string";
                                                    readonly format: "date-time";
                                                    readonly description: "Last updated time for the credential";
                                                };
                                            };
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["buildCommand", "startCommand"];
                                    readonly properties: {
                                        readonly buildCommand: {
                                            readonly type: "string";
                                        };
                                        readonly startCommand: {
                                            readonly type: "string";
                                        };
                                        readonly preDeployCommand: {
                                            readonly type: "string";
                                        };
                                    };
                                }];
                            };
                            readonly numInstances: {
                                readonly type: "integer";
                                readonly description: "For a *manually* scaled service, this is the number of instances the service is scaled to. DOES NOT indicate the number of running instances for an *autoscaled* service.";
                            };
                            readonly parentServer: {
                                readonly required: readonly ["id", "name"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly plan: {
                                readonly type: "string";
                                readonly enum: readonly ["starter", "starter_plus", "standard", "standard_plus", "pro", "pro_plus", "pro_max", "pro_ultra", "free", "custom"];
                                readonly description: "The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.\n\n`starter` `starter_plus` `standard` `standard_plus` `pro` `pro_plus` `pro_max` `pro_ultra` `free` `custom`";
                                readonly examples: readonly ["starter"];
                            };
                            readonly pullRequestPreviewsEnabled: {
                                readonly type: "string";
                                readonly enum: readonly ["yes", "no"];
                                readonly default: "no";
                                readonly deprecated: true;
                                readonly description: "This field has been deprecated. previews.generation should be used in its place.\n\n`yes` `no`";
                            };
                            readonly previews: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly generation: {
                                        readonly type: "string";
                                        readonly enum: readonly ["off", "manual", "automatic"];
                                        readonly default: "off";
                                        readonly description: "Defaults to \"off\"\n\n`off` `manual` `automatic`";
                                    };
                                };
                            };
                            readonly region: {
                                readonly type: "string";
                                readonly enum: readonly ["frankfurt", "oregon", "ohio", "singapore", "virginia"];
                                readonly default: "oregon";
                                readonly description: "Defaults to \"oregon\"\n\n`frankfurt` `oregon` `ohio` `singapore` `virginia`";
                            };
                            readonly runtime: {
                                readonly type: "string";
                                readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                                readonly description: "Runtime\n\n`docker` `elixir` `go` `node` `python` `ruby` `rust` `image`";
                            };
                            readonly sshAddress: {
                                readonly type: "string";
                                readonly description: "The SSH address for the service. Only present for services that have SSH enabled.";
                            };
                            readonly buildPlan: {
                                readonly type: "string";
                                readonly enum: readonly ["starter", "performance"];
                                readonly default: "starter";
                                readonly description: "`starter` `performance`";
                            };
                            readonly maxShutdownDelaySeconds: {
                                readonly type: "integer";
                                readonly description: "The maximum amount of time (in seconds) that Render waits for your application process to exit gracefully after sending it a SIGTERM signal.";
                                readonly minimum: 1;
                                readonly maximum: 300;
                                readonly default: 30;
                            };
                        };
                    }, {
                        readonly required: readonly ["env", "runtime", "envSpecificDetails", "plan", "region", "schedule", "buildPlan"];
                        readonly type: "object";
                        readonly properties: {
                            readonly env: {
                                readonly type: "string";
                                readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                                readonly deprecated: true;
                                readonly description: "This field has been deprecated, runtime should be used in its place.\n\n`docker` `elixir` `go` `node` `python` `ruby` `rust` `image`";
                            };
                            readonly envSpecificDetails: {
                                readonly oneOf: readonly [{
                                    readonly type: "object";
                                    readonly required: readonly ["dockerCommand", "dockerContext", "dockerfilePath"];
                                    readonly properties: {
                                        readonly dockerCommand: {
                                            readonly type: "string";
                                        };
                                        readonly dockerContext: {
                                            readonly type: "string";
                                        };
                                        readonly dockerfilePath: {
                                            readonly type: "string";
                                        };
                                        readonly preDeployCommand: {
                                            readonly type: "string";
                                        };
                                        readonly registryCredential: {
                                            readonly type: "object";
                                            readonly required: readonly ["id", "name", "username", "registry", "updatedAt"];
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                    readonly description: "Unique identifier for this credential";
                                                };
                                                readonly name: {
                                                    readonly type: "string";
                                                    readonly description: "Descriptive name for this credential";
                                                };
                                                readonly registry: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["GITHUB", "GITLAB", "DOCKER", "GOOGLE_ARTIFACT", "AWS_ECR"];
                                                    readonly description: "The registry to use this credential with\n\n`GITHUB` `GITLAB` `DOCKER` `GOOGLE_ARTIFACT` `AWS_ECR`";
                                                };
                                                readonly username: {
                                                    readonly type: "string";
                                                    readonly description: "The username associated with the credential";
                                                };
                                                readonly updatedAt: {
                                                    readonly type: "string";
                                                    readonly format: "date-time";
                                                    readonly description: "Last updated time for the credential";
                                                };
                                            };
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["buildCommand", "startCommand"];
                                    readonly properties: {
                                        readonly buildCommand: {
                                            readonly type: "string";
                                        };
                                        readonly startCommand: {
                                            readonly type: "string";
                                        };
                                        readonly preDeployCommand: {
                                            readonly type: "string";
                                        };
                                    };
                                }];
                            };
                            readonly lastSuccessfulRunAt: {
                                readonly type: "string";
                                readonly format: "date-time";
                            };
                            readonly plan: {
                                readonly type: "string";
                                readonly enum: readonly ["starter", "starter_plus", "standard", "standard_plus", "pro", "pro_plus", "pro_max", "pro_ultra", "free", "custom"];
                                readonly description: "The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.\n\n`starter` `starter_plus` `standard` `standard_plus` `pro` `pro_plus` `pro_max` `pro_ultra` `free` `custom`";
                                readonly examples: readonly ["starter"];
                            };
                            readonly region: {
                                readonly type: "string";
                                readonly enum: readonly ["frankfurt", "oregon", "ohio", "singapore", "virginia"];
                                readonly default: "oregon";
                                readonly description: "Defaults to \"oregon\"\n\n`frankfurt` `oregon` `ohio` `singapore` `virginia`";
                            };
                            readonly runtime: {
                                readonly type: "string";
                                readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                                readonly description: "Runtime\n\n`docker` `elixir` `go` `node` `python` `ruby` `rust` `image`";
                            };
                            readonly schedule: {
                                readonly type: "string";
                            };
                            readonly buildPlan: {
                                readonly type: "string";
                                readonly enum: readonly ["starter", "performance"];
                                readonly default: "starter";
                                readonly description: "`starter` `performance`";
                            };
                        };
                    }];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RetrieveServiceNotificationOverrides: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly serviceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the service";
                };
            };
            readonly required: readonly ["serviceId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["serviceId", "previewNotificationsEnabled", "notificationsToSend"];
            readonly properties: {
                readonly serviceId: {
                    readonly type: "string";
                };
                readonly previewNotificationsEnabled: {
                    readonly type: "string";
                    readonly enum: readonly ["default", "false", "true"];
                    readonly description: "`default` `false` `true`";
                };
                readonly notificationsToSend: {
                    readonly type: "string";
                    readonly enum: readonly ["default", "none", "failure", "all"];
                    readonly description: "`default` `none` `failure` `all`";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RollbackDeploy: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["deployId"];
        readonly properties: {
            readonly deployId: {
                readonly type: "string";
                readonly description: "The ID of the deploy to roll back to";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly serviceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the service";
                };
            };
            readonly required: readonly ["serviceId"];
        }];
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly commit: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly message: {
                            readonly type: "string";
                        };
                        readonly createdAt: {
                            readonly type: "string";
                            readonly format: "date-time";
                        };
                    };
                };
                readonly image: {
                    readonly description: "Image information used when creating the deploy. Not present for Git-backed deploys";
                    readonly type: "object";
                    readonly properties: {
                        readonly ref: {
                            readonly description: "Image reference used when creating the deploy";
                            readonly type: "string";
                        };
                        readonly sha: {
                            readonly description: "SHA that the image reference was resolved to when creating the deploy";
                            readonly type: "string";
                        };
                        readonly registryCredential: {
                            readonly description: "Name of credential used to pull the image, if provided";
                            readonly type: "string";
                        };
                    };
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["created", "build_in_progress", "update_in_progress", "live", "deactivated", "build_failed", "update_failed", "canceled", "pre_deploy_in_progress", "pre_deploy_failed"];
                    readonly description: "`created` `build_in_progress` `update_in_progress` `live` `deactivated` `build_failed` `update_failed` `canceled` `pre_deploy_in_progress` `pre_deploy_failed`";
                };
                readonly trigger: {
                    readonly type: "string";
                    readonly enum: readonly ["api", "blueprint_sync", "deploy_hook", "deployed_by_render", "manual", "other", "new_commit", "rollback", "service_resumed", "service_updated"];
                    readonly description: "`api` `blueprint_sync` `deploy_hook` `deployed_by_render` `manual` `other` `new_commit` `rollback` `service_resumed` `service_updated`";
                };
                readonly finishedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly updatedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RunCronJob: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly cronJobId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the cron job";
                };
            };
            readonly required: readonly ["cronJobId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "A run of a cron job";
            readonly required: readonly ["id", "status"];
            readonly properties: {
                readonly id: {
                    readonly description: "The ID of the run";
                    readonly type: "string";
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["pending", "successful", "unsuccessful", "canceled"];
                    readonly description: "`pending` `successful` `unsuccessful` `canceled`";
                };
                readonly startedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-07-15T07:20:05.777035-07:00"];
                };
                readonly finishedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-07-15T07:20:05.777035-07:00"];
                };
                readonly triggeredBy: {
                    readonly type: "string";
                    readonly description: "user who triggered the cron job run";
                };
                readonly canceledBy: {
                    readonly type: "string";
                    readonly description: "user who cancelled the cron job run";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ScaleService: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["numInstances"];
        readonly properties: {
            readonly numInstances: {
                readonly type: "integer";
                readonly examples: readonly [3];
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly serviceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the service";
                };
            };
            readonly required: readonly ["serviceId"];
        }];
    };
    readonly response: {
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const SubscribeLogs: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly ownerId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the owner (team or personal user) whose resources should be returned";
                };
                readonly startTime: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:15:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Epoch/Unix timestamp of end of time range to return. Defaults to `now() - 1 hour`.";
                };
                readonly endTime: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2021-06-17T08:30:30Z"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Epoch/Unix timestamp of end of time range to return. Defaults to `now()`.";
                };
                readonly direction: {
                    readonly default: "backward";
                    readonly type: "string";
                    readonly enum: readonly ["forward", "backward"];
                    readonly description: "The direction to query logs for. Backward will return most recent logs first.\nForward will start with the oldest logs in the time range.\n";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly resource: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter logs by their resource. A resource is the id of a server, cronjob, job, postgres, or redis.";
                };
                readonly instance: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter logs by the instance they were emitted from. An instance is the id of a specific running server.";
                };
                readonly host: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter request logs by their host. [Wildcards and regex](https://docs.render.com/logging#wildcards-and-regular-expressions) are supported.";
                };
                readonly statusCode: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter request logs by their status code. [Wildcards and regex](https://docs.render.com/logging#wildcards-and-regular-expressions) are supported.";
                };
                readonly method: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter request logs by their requests method. [Wildcards and regex](https://docs.render.com/logging#wildcards-and-regular-expressions) are supported.";
                };
                readonly level: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter logs by their severity level. [Wildcards and regex](https://docs.render.com/logging#wildcards-and-regular-expressions) are supported.";
                };
                readonly type: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter logs by their type. Types include `app` for application logs, `request` for request logs, and `build` for build logs. You can find the full set of types available for a query by using the `GET /logs/values` endpoint.";
                };
                readonly text: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter by the text of the logs. [Wildcards and regex](https://docs.render.com/logging#wildcards-and-regular-expressions) are supported.";
                };
                readonly path: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter request logs by their path. [Wildcards and regex](https://docs.render.com/logging#wildcards-and-regular-expressions) are supported.";
                };
                readonly limit: {
                    readonly type: "integer";
                    readonly default: 20;
                    readonly minimum: 1;
                    readonly maximum: 100;
                    readonly description: "The maximum number of items to return. For details, see [Pagination](https://api-docs.render.com/reference/pagination).";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["ownerId", "resource"];
        }];
    };
    readonly response: {
        readonly "101": {
            readonly type: "object";
            readonly description: "A log entry with metadata";
            readonly required: readonly ["id", "message", "timestamp", "labels"];
            readonly properties: {
                readonly id: {
                    readonly description: "A unique ID of the log entry";
                    readonly type: "string";
                };
                readonly message: {
                    readonly description: "The message of the log entry";
                    readonly type: "string";
                };
                readonly timestamp: {
                    readonly description: "The timestamp of the log entry";
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly labels: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly description: "A log label";
                        readonly required: readonly ["name", "value"];
                        readonly properties: {
                            readonly name: {
                                readonly description: "The name of the log label\n\n`resource` `instance` `host` `statusCode` `method` `level` `type` `text` `path`";
                                readonly type: "string";
                                readonly enum: readonly ["resource", "instance", "host", "statusCode", "method", "level", "type", "text", "path"];
                            };
                            readonly value: {
                                readonly description: "The value of the log label";
                                readonly type: "string";
                            };
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const SuspendPostgres: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly postgresId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["postgresId"];
        }];
    };
    readonly response: {
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const SuspendService: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly serviceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the service";
                };
            };
            readonly required: readonly ["serviceId"];
        }];
    };
    readonly response: {
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const TriggerMaintenance: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly maintenanceRunParam: {
                    readonly type: "string";
                    readonly pattern: "^mrn-[0-9a-z]{20}$";
                    readonly examples: readonly ["mrn-cph1rs3idesc73a2b2mg"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["maintenanceRunParam"];
        }];
    };
    readonly response: {
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UnlinkServiceFromEnvGroup: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly envGroupId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly serviceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["envGroupId", "serviceId"];
        }];
    };
    readonly response: {
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UpdateBlueprint: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
            };
            readonly autoSync: {
                readonly type: "boolean";
                readonly description: "Automatically sync changes to render.yaml";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly blueprintId: {
                    readonly type: "string";
                    readonly pattern: "^exs-[0-9a-z]{20}$";
                    readonly examples: readonly ["exs-cph1rs3idesc73a2b2mg"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the blueprint";
                };
            };
            readonly required: readonly ["blueprintId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "status", "autoSync", "repo", "branch"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly pattern: "^exs-[0-9a-z]{20}$";
                    readonly examples: readonly ["exs-cph1rs3idesc73a2b2mg"];
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["created", "paused", "in_sync", "syncing", "error"];
                    readonly description: "`created` `paused` `in_sync` `syncing` `error`";
                };
                readonly autoSync: {
                    readonly type: "boolean";
                    readonly description: "Automatically sync changes to render.yaml";
                };
                readonly repo: {
                    readonly type: "string";
                };
                readonly branch: {
                    readonly type: "string";
                };
                readonly lastSync: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UpdateDisk: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
            };
            readonly sizeGB: {
                readonly type: "integer";
            };
            readonly mountPath: {
                readonly type: "string";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly diskId: {
                    readonly type: "string";
                    readonly pattern: "^dsk-[0-9a-z]{20}$";
                    readonly examples: readonly ["dsk-cph1rs3idesc73a2b2mg"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the disk";
                };
            };
            readonly required: readonly ["diskId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "sizeGB", "mountPath", "createdAt", "updatedAt"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly pattern: "^dsk-[0-9a-z]{20}$";
                    readonly examples: readonly ["dsk-cph1rs3idesc73a2b2mg"];
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly sizeGB: {
                    readonly type: "integer";
                };
                readonly mountPath: {
                    readonly type: "string";
                };
                readonly serviceId: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly updatedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UpdateEnvGroup: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["name"];
        readonly properties: {
            readonly name: {
                readonly type: "string";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly envGroupId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["envGroupId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["createdAt", "envVars", "id", "name", "ownerId", "secretFiles", "serviceLinks", "updatedAt"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly ownerId: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly updatedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly serviceLinks: {
                    readonly description: "List of serviceIds linked to the envGroup";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["id", "name", "type"];
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["static", "web", "pserv", "worker", "cron"];
                                readonly description: "`static` `web` `pserv` `worker` `cron`";
                            };
                        };
                    };
                };
                readonly environmentId: {
                    readonly type: "string";
                };
                readonly envVars: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["key", "value"];
                        readonly properties: {
                            readonly key: {
                                readonly type: "string";
                            };
                            readonly value: {
                                readonly type: "string";
                            };
                        };
                    };
                };
                readonly secretFiles: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["name", "content"];
                        readonly properties: {
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly content: {
                                readonly type: "string";
                            };
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UpdateEnvGroupEnvVar: {
    readonly body: {
        readonly type: "object";
        readonly oneOf: readonly [{
            readonly type: "object";
            readonly required: readonly ["value"];
            readonly properties: {
                readonly value: {
                    readonly type: "string";
                };
            };
        }, {
            readonly type: "object";
            readonly required: readonly ["generateValue"];
            readonly properties: {
                readonly generateValue: {
                    readonly type: "boolean";
                };
            };
        }];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly envGroupId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter for resources that belong to an environment group";
                };
                readonly envVarKey: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The name of the environment variable";
                };
            };
            readonly required: readonly ["envGroupId", "envVarKey"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["createdAt", "envVars", "id", "name", "ownerId", "secretFiles", "serviceLinks", "updatedAt"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly ownerId: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly updatedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly serviceLinks: {
                    readonly description: "List of serviceIds linked to the envGroup";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["id", "name", "type"];
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["static", "web", "pserv", "worker", "cron"];
                                readonly description: "`static` `web` `pserv` `worker` `cron`";
                            };
                        };
                    };
                };
                readonly environmentId: {
                    readonly type: "string";
                };
                readonly envVars: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["key", "value"];
                        readonly properties: {
                            readonly key: {
                                readonly type: "string";
                            };
                            readonly value: {
                                readonly type: "string";
                            };
                        };
                    };
                };
                readonly secretFiles: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["name", "content"];
                        readonly properties: {
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly content: {
                                readonly type: "string";
                            };
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UpdateEnvGroupSecretFile: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly content: {
                readonly type: "string";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly envGroupId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly secretFileName: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["envGroupId", "secretFileName"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["createdAt", "envVars", "id", "name", "ownerId", "secretFiles", "serviceLinks", "updatedAt"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly ownerId: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly updatedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly serviceLinks: {
                    readonly description: "List of serviceIds linked to the envGroup";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["id", "name", "type"];
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["static", "web", "pserv", "worker", "cron"];
                                readonly description: "`static` `web` `pserv` `worker` `cron`";
                            };
                        };
                    };
                };
                readonly environmentId: {
                    readonly type: "string";
                };
                readonly envVars: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["key", "value"];
                        readonly properties: {
                            readonly key: {
                                readonly type: "string";
                            };
                            readonly value: {
                                readonly type: "string";
                            };
                        };
                    };
                };
                readonly secretFiles: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["name", "content"];
                        readonly properties: {
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly content: {
                                readonly type: "string";
                            };
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UpdateEnvVar: {
    readonly body: {
        readonly type: "object";
        readonly oneOf: readonly [{
            readonly type: "object";
            readonly required: readonly ["value"];
            readonly properties: {
                readonly value: {
                    readonly type: "string";
                };
            };
        }, {
            readonly type: "object";
            readonly required: readonly ["generateValue"];
            readonly properties: {
                readonly generateValue: {
                    readonly type: "boolean";
                };
            };
        }];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly serviceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the service";
                };
                readonly envVarKey: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The name of the environment variable";
                };
            };
            readonly required: readonly ["serviceId", "envVarKey"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["key", "value"];
            readonly properties: {
                readonly key: {
                    readonly type: "string";
                };
                readonly value: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UpdateEnvVarsForService: {
    readonly body: {
        readonly type: "array";
        readonly items: {
            readonly type: "object";
            readonly oneOf: readonly [{
                readonly type: "object";
                readonly required: readonly ["key", "value"];
                readonly properties: {
                    readonly key: {
                        readonly type: "string";
                    };
                    readonly value: {
                        readonly type: "string";
                    };
                };
            }, {
                readonly type: "object";
                readonly required: readonly ["key", "generateValue"];
                readonly properties: {
                    readonly key: {
                        readonly type: "string";
                    };
                    readonly generateValue: {
                        readonly type: "boolean";
                    };
                };
            }];
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly serviceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the service";
                };
            };
            readonly required: readonly ["serviceId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["envVar", "cursor"];
                readonly properties: {
                    readonly envVar: {
                        readonly type: "object";
                        readonly required: readonly ["key", "value"];
                        readonly properties: {
                            readonly key: {
                                readonly type: "string";
                            };
                            readonly value: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UpdateEnvironment: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
            };
            readonly networkIsolationEnabled: {
                readonly type: "boolean";
                readonly description: "Indicates whether network connections across environments are allowed.";
            };
            readonly protectedStatus: {
                readonly type: "string";
                readonly description: "Indicates whether an environment is `unprotected` or `protected`. Only admin users can perform destructive actions in `protected` environments.";
                readonly enum: readonly ["unprotected", "protected"];
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly environmentId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["environmentId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "projectId", "databasesIds", "redisIds", "serviceIds", "envGroupIds", "protectedStatus", "networkIsolationEnabled"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly projectId: {
                    readonly type: "string";
                };
                readonly databasesIds: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly redisIds: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly serviceIds: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly envGroupIds: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly protectedStatus: {
                    readonly type: "string";
                    readonly description: "Indicates whether an environment is `unprotected` or `protected`. Only admin users can perform destructive actions in `protected` environments.\n\n`unprotected` `protected`";
                    readonly enum: readonly ["unprotected", "protected"];
                };
                readonly networkIsolationEnabled: {
                    readonly type: "boolean";
                    readonly description: "Indicates whether network connections across environments are allowed.";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UpdateHeaders: {
    readonly body: {
        readonly type: "array";
        readonly items: {
            readonly type: "object";
            readonly required: readonly ["path", "name", "value"];
            readonly properties: {
                readonly path: {
                    readonly type: "string";
                    readonly description: "The request path to add the header to. Wildcards will cause headers to be applied to all matching paths.";
                    readonly examples: readonly ["/static/*"];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Header name";
                    readonly examples: readonly ["Cache-Control"];
                };
                readonly value: {
                    readonly type: "string";
                    readonly description: "Header value";
                    readonly examples: readonly ["public, max-age=604800"];
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly serviceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the service";
                };
            };
            readonly required: readonly ["serviceId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "path", "name", "value"];
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                    };
                    readonly path: {
                        readonly type: "string";
                    };
                    readonly name: {
                        readonly type: "string";
                    };
                    readonly value: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UpdateMaintenance: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly scheduledAt: {
                readonly description: "The date-time at which the maintenance is scheduled to start. This must be before the pendingMaintenanceBy date-time.";
                readonly type: "string";
                readonly format: "date-time";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly maintenanceRunParam: {
                    readonly type: "string";
                    readonly pattern: "^mrn-[0-9a-z]{20}$";
                    readonly examples: readonly ["mrn-cph1rs3idesc73a2b2mg"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["maintenanceRunParam"];
        }];
    };
    readonly response: {
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UpdateOwnerLogStream: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["preview"];
        readonly properties: {
            readonly endpoint: {
                readonly description: "The endpoint to stream logs to.";
                readonly type: "string";
            };
            readonly token: {
                readonly description: "The optional token to authenticate the log stream.";
                readonly type: "string";
            };
            readonly preview: {
                readonly type: "string";
                readonly description: "Whether to send logs or drop them.";
                readonly enum: readonly ["send", "drop"];
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly ownerId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the owner (team or personal user) whose log streams should be returned";
                };
            };
            readonly required: readonly ["ownerId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Owner log stream settings";
            readonly properties: {
                readonly ownerId: {
                    readonly description: "The ID of the owner.";
                    readonly type: "string";
                };
                readonly endpoint: {
                    readonly description: "The endpoint to stream logs to.";
                    readonly type: "string";
                };
                readonly preview: {
                    readonly type: "string";
                    readonly description: "Whether to send logs or drop them.\n\n`send` `drop`";
                    readonly enum: readonly ["send", "drop"];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UpdatePostgres: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
            };
            readonly plan: {
                readonly type: "string";
                readonly enum: readonly ["free", "starter", "standard", "pro", "pro_plus", "custom", "basic_256mb", "basic_1gb", "basic_4gb", "pro_4gb", "pro_8gb", "pro_16gb", "pro_32gb", "pro_64gb", "pro_128gb", "pro_192gb", "pro_256gb", "pro_384gb", "pro_512gb", "accelerated_16gb", "accelerated_32gb", "accelerated_64gb", "accelerated_128gb", "accelerated_256gb", "accelerated_384gb", "accelerated_512gb", "accelerated_768gb", "accelerated_1024gb"];
            };
            readonly diskSizeGB: {
                readonly type: "integer";
                readonly description: "The number of gigabytes of disk space to allocate for the database";
            };
            readonly enableHighAvailability: {
                readonly type: "boolean";
            };
            readonly datadogAPIKey: {
                readonly type: "string";
            };
            readonly ipAllowList: {
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly required: readonly ["cidrBlock", "description"];
                    readonly properties: {
                        readonly cidrBlock: {
                            readonly type: "string";
                        };
                        readonly description: {
                            readonly description: "User-provided description of the CIDR block";
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly readReplicas: {
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                            readonly description: "The display name of the replica instance.";
                        };
                    };
                    readonly required: readonly ["name"];
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly postgresId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["postgresId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "ipAllowList", "createdAt", "updatedAt", "dashboardUrl", "databaseName", "databaseUser", "highAvailabilityEnabled", "name", "owner", "project", "plan", "region", "readReplicas", "role", "status", "version", "suspended", "suspenders"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly ipAllowList: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["cidrBlock", "description"];
                        readonly properties: {
                            readonly cidrBlock: {
                                readonly type: "string";
                            };
                            readonly description: {
                                readonly description: "User-provided description of the CIDR block";
                                readonly type: "string";
                            };
                        };
                    };
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly updatedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly expiresAt: {
                    readonly description: "The time at which the database will be expire. Applies to free tier databases only.";
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly dashboardUrl: {
                    readonly type: "string";
                    readonly description: "The URL to view the PostgreSQL instance in the Render Dashboard";
                };
                readonly databaseName: {
                    readonly type: "string";
                };
                readonly databaseUser: {
                    readonly type: "string";
                };
                readonly environmentId: {
                    readonly type: "string";
                };
                readonly highAvailabilityEnabled: {
                    readonly type: "boolean";
                };
                readonly maintenance: {
                    readonly type: "object";
                    readonly required: readonly ["id", "type", "scheduledAt", "state"];
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly pattern: "^mrn-[0-9a-z]{20}$";
                            readonly examples: readonly ["mrn-cph1rs3idesc73a2b2mg"];
                        };
                        readonly type: {
                            readonly type: "string";
                        };
                        readonly scheduledAt: {
                            readonly type: "string";
                            readonly format: "date-time";
                        };
                        readonly pendingMaintenanceBy: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "If present, the maintenance run cannot be scheduled for later than this date-time.";
                        };
                        readonly state: {
                            readonly type: "string";
                            readonly enum: readonly ["scheduled", "in_progress", "user_fix_required", "cancelled", "succeeded", "failed"];
                            readonly description: "`scheduled` `in_progress` `user_fix_required` `cancelled` `succeeded` `failed`";
                        };
                    };
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly owner: {
                    readonly type: "object";
                    readonly required: readonly ["id", "name", "email", "type"];
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly email: {
                            readonly type: "string";
                        };
                        readonly twoFactorAuthEnabled: {
                            readonly type: "boolean";
                            readonly description: "Whether two-factor authentication is enabled for the owner. Only present for user owners.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly enum: readonly ["user", "team"];
                            readonly description: "`user` `team`";
                        };
                    };
                };
                readonly plan: {
                    readonly type: "string";
                    readonly enum: readonly ["free", "starter", "standard", "pro", "pro_plus", "custom", "basic_256mb", "basic_1gb", "basic_4gb", "pro_4gb", "pro_8gb", "pro_16gb", "pro_32gb", "pro_64gb", "pro_128gb", "pro_192gb", "pro_256gb", "pro_384gb", "pro_512gb", "accelerated_16gb", "accelerated_32gb", "accelerated_64gb", "accelerated_128gb", "accelerated_256gb", "accelerated_384gb", "accelerated_512gb", "accelerated_768gb", "accelerated_1024gb"];
                    readonly description: "`free` `starter` `standard` `pro` `pro_plus` `custom` `basic_256mb` `basic_1gb` `basic_4gb` `pro_4gb` `pro_8gb` `pro_16gb` `pro_32gb` `pro_64gb` `pro_128gb` `pro_192gb` `pro_256gb` `pro_384gb` `pro_512gb` `accelerated_16gb` `accelerated_32gb` `accelerated_64gb` `accelerated_128gb` `accelerated_256gb` `accelerated_384gb` `accelerated_512gb` `accelerated_768gb` `accelerated_1024gb`";
                };
                readonly diskSizeGB: {
                    readonly type: "integer";
                };
                readonly primaryPostgresID: {
                    readonly type: "string";
                };
                readonly region: {
                    readonly type: "string";
                    readonly enum: readonly ["frankfurt", "oregon", "ohio", "singapore", "virginia"];
                    readonly default: "oregon";
                    readonly description: "Defaults to \"oregon\"\n\n`frankfurt` `oregon` `ohio` `singapore` `virginia`";
                };
                readonly readReplicas: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "The replica instance identifier.";
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "The display name of the replica instance.";
                            };
                        };
                        readonly required: readonly ["id", "name"];
                    };
                };
                readonly role: {
                    readonly type: "string";
                    readonly enum: readonly ["primary", "replica"];
                    readonly description: "`primary` `replica`";
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["creating", "available", "unavailable", "config_restart", "suspended", "maintenance_scheduled", "maintenance_in_progress", "recovery_failed", "recovery_in_progress", "unknown", "updating_instance"];
                    readonly description: "`creating` `available` `unavailable` `config_restart` `suspended` `maintenance_scheduled` `maintenance_in_progress` `recovery_failed` `recovery_in_progress` `unknown` `updating_instance`";
                };
                readonly version: {
                    readonly type: "string";
                    readonly description: "The PostgreSQL version\n\n`11` `12` `13` `14` `15` `16`";
                    readonly enum: readonly ["11", "12", "13", "14", "15", "16"];
                };
                readonly suspended: {
                    readonly type: "string";
                    readonly enum: readonly ["suspended", "not_suspended"];
                    readonly description: "`suspended` `not_suspended`";
                };
                readonly suspenders: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["admin", "billing", "user", "parent_service", "unknown"];
                        readonly description: "`admin` `billing` `user` `parent_service` `unknown`";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "409": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UpdateProject: {
    readonly body: {
        readonly description: "Input type for updating a project";
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly projectId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["projectId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly description: "A project is a collection of environments";
            readonly type: "object";
            readonly required: readonly ["id", "createdAt", "updatedAt", "name", "owner", "environmentIds"];
            readonly properties: {
                readonly id: {
                    readonly description: "The ID of the project";
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly updatedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly name: {
                    readonly description: "The name of the project";
                    readonly type: "string";
                };
                readonly owner: {
                    readonly type: "object";
                    readonly required: readonly ["id", "name", "email", "type"];
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly email: {
                            readonly type: "string";
                        };
                        readonly twoFactorAuthEnabled: {
                            readonly type: "boolean";
                            readonly description: "Whether two-factor authentication is enabled for the owner. Only present for user owners.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly enum: readonly ["user", "team"];
                            readonly description: "`user` `team`";
                        };
                    };
                };
                readonly environmentIds: {
                    readonly description: "The environments associated with the project";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly description: "The ID of the environment";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UpdateRedis: {
    readonly body: {
        readonly type: "object";
        readonly description: "Input type for updating a Redis instance";
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly description: "The name of the Redis instance";
            };
            readonly plan: {
                readonly type: "string";
                readonly enum: readonly ["free", "starter", "standard", "pro", "pro_plus", "custom"];
                readonly "x-enum-varnames": readonly ["RedisPlanFree", "RedisPlanStarter", "RedisPlanStandard", "RedisPlanPro", "RedisPlanPro_plus", "RedisPlanCustom"];
            };
            readonly maxmemoryPolicy: {
                readonly type: "string";
                readonly description: "The eviction policy for the Key / Value instance";
                readonly enum: readonly ["noeviction", "allkeys_lfu", "allkeys_lru", "allkeys_random", "volatile_lfu", "volatile_lru", "volatile_random", "volatile_ttl"];
            };
            readonly ipAllowList: {
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly required: readonly ["cidrBlock", "description"];
                    readonly properties: {
                        readonly cidrBlock: {
                            readonly type: "string";
                        };
                        readonly description: {
                            readonly description: "User-provided description of the CIDR block";
                            readonly type: "string";
                        };
                    };
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly redisId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["redisId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "A Redis instance";
            readonly required: readonly ["id", "createdAt", "updatedAt", "status", "region", "plan", "name", "owner", "options", "ipAllowList", "version"];
            readonly properties: {
                readonly id: {
                    readonly description: "The ID of the Redis instance";
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly description: "The creation time of the Redis instance";
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly updatedAt: {
                    readonly description: "The last updated time of the Redis instance";
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["creating", "available", "unavailable", "config_restart", "suspended", "maintenance_scheduled", "maintenance_in_progress", "recovery_failed", "recovery_in_progress", "unknown", "updating_instance"];
                    readonly description: "`creating` `available` `unavailable` `config_restart` `suspended` `maintenance_scheduled` `maintenance_in_progress` `recovery_failed` `recovery_in_progress` `unknown` `updating_instance`";
                };
                readonly region: {
                    readonly type: "string";
                    readonly enum: readonly ["frankfurt", "oregon", "ohio", "singapore", "virginia"];
                    readonly default: "oregon";
                    readonly description: "Defaults to \"oregon\"\n\n`frankfurt` `oregon` `ohio` `singapore` `virginia`";
                };
                readonly plan: {
                    readonly type: "string";
                    readonly enum: readonly ["free", "starter", "standard", "pro", "pro_plus", "custom"];
                    readonly "x-enum-varnames": readonly ["RedisPlanFree", "RedisPlanStarter", "RedisPlanStandard", "RedisPlanPro", "RedisPlanPro_plus", "RedisPlanCustom"];
                    readonly description: "`free` `starter` `standard` `pro` `pro_plus` `custom`";
                };
                readonly name: {
                    readonly description: "The name of the Redis instance";
                    readonly type: "string";
                };
                readonly owner: {
                    readonly type: "object";
                    readonly required: readonly ["id", "name", "email", "type"];
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly email: {
                            readonly type: "string";
                        };
                        readonly twoFactorAuthEnabled: {
                            readonly type: "boolean";
                            readonly description: "Whether two-factor authentication is enabled for the owner. Only present for user owners.";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly enum: readonly ["user", "team"];
                            readonly description: "`user` `team`";
                        };
                    };
                };
                readonly options: {
                    readonly description: "Options for a Redis instance";
                    readonly type: "object";
                    readonly properties: {
                        readonly maxmemoryPolicy: {
                            readonly type: "string";
                        };
                    };
                };
                readonly ipAllowList: {
                    readonly description: "The IP allow list for the Redis instance";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["cidrBlock", "description"];
                        readonly properties: {
                            readonly cidrBlock: {
                                readonly type: "string";
                            };
                            readonly description: {
                                readonly description: "User-provided description of the CIDR block";
                                readonly type: "string";
                            };
                        };
                    };
                };
                readonly environmentId: {
                    readonly description: "The ID of the environment the Redis instance is associated with";
                    readonly type: "string";
                };
                readonly version: {
                    readonly description: "The version of Redis";
                    readonly type: "string";
                };
                readonly maintenance: {
                    readonly type: "object";
                    readonly required: readonly ["id", "type", "scheduledAt", "state"];
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly pattern: "^mrn-[0-9a-z]{20}$";
                            readonly examples: readonly ["mrn-cph1rs3idesc73a2b2mg"];
                        };
                        readonly type: {
                            readonly type: "string";
                        };
                        readonly scheduledAt: {
                            readonly type: "string";
                            readonly format: "date-time";
                        };
                        readonly pendingMaintenanceBy: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "If present, the maintenance run cannot be scheduled for later than this date-time.";
                        };
                        readonly state: {
                            readonly type: "string";
                            readonly enum: readonly ["scheduled", "in_progress", "user_fix_required", "cancelled", "succeeded", "failed"];
                            readonly description: "`scheduled` `in_progress` `user_fix_required` `cancelled` `succeeded` `failed`";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "409": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UpdateRegistryCredential: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["name", "registry", "username", "authToken"];
        readonly properties: {
            readonly registry: {
                readonly type: "string";
                readonly enum: readonly ["GITHUB", "GITLAB", "DOCKER", "GOOGLE_ARTIFACT", "AWS_ECR"];
                readonly description: "The registry to use this credential with";
            };
            readonly name: {
                readonly type: "string";
            };
            readonly username: {
                readonly type: "string";
            };
            readonly authToken: {
                readonly type: "string";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly registryCredentialId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the registry credential";
                };
            };
            readonly required: readonly ["registryCredentialId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "username", "registry", "updatedAt"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique identifier for this credential";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Descriptive name for this credential";
                };
                readonly registry: {
                    readonly type: "string";
                    readonly enum: readonly ["GITHUB", "GITLAB", "DOCKER", "GOOGLE_ARTIFACT", "AWS_ECR"];
                    readonly description: "The registry to use this credential with\n\n`GITHUB` `GITLAB` `DOCKER` `GOOGLE_ARTIFACT` `AWS_ECR`";
                };
                readonly username: {
                    readonly type: "string";
                    readonly description: "The username associated with the credential";
                };
                readonly updatedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly description: "Last updated time for the credential";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "402": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "409": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UpdateResourceLogStream: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["setting"];
        readonly properties: {
            readonly endpoint: {
                readonly description: "The endpoint to stream logs to.";
                readonly type: "string";
            };
            readonly token: {
                readonly description: "The optional token to authenticate the log stream.";
                readonly type: "string";
            };
            readonly setting: {
                readonly type: "string";
                readonly description: "Whether to send logs or drop them.";
                readonly enum: readonly ["send", "drop"];
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly resourceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the resource (server, cron job, postgres, or redis) whose log streams should be returned";
                };
            };
            readonly required: readonly ["resourceId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Resource log stream overrides";
            readonly properties: {
                readonly resourceId: {
                    readonly description: "The ID of the resource.";
                    readonly type: "string";
                };
                readonly endpoint: {
                    readonly description: "The endpoint to stream logs to. Must be present if setting is send. Cannot be present if setting is drop.";
                    readonly type: "string";
                };
                readonly setting: {
                    readonly type: "string";
                    readonly description: "Whether to send logs or drop them.\n\n`send` `drop`";
                    readonly enum: readonly ["send", "drop"];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UpdateSecretFilesForService: {
    readonly body: {
        readonly type: "array";
        readonly items: {
            readonly type: "object";
            readonly required: readonly ["name", "content"];
            readonly properties: {
                readonly name: {
                    readonly type: "string";
                };
                readonly content: {
                    readonly type: "string";
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly serviceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the service";
                };
            };
            readonly required: readonly ["serviceId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["secretFile", "cursor"];
                readonly properties: {
                    readonly secretFile: {
                        readonly type: "object";
                        readonly required: readonly ["name", "content"];
                        readonly properties: {
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly content: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UpdateService: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly autoDeploy: {
                readonly type: "string";
                readonly enum: readonly ["yes", "no"];
                readonly default: "yes";
                readonly description: "Default: yes";
            };
            readonly repo: {
                readonly type: "string";
            };
            readonly branch: {
                readonly type: "string";
            };
            readonly image: {
                readonly type: "object";
                readonly required: readonly ["imagePath", "ownerId"];
                readonly properties: {
                    readonly ownerId: {
                        readonly type: "string";
                        readonly description: "The ID of the owner for this image. This should match the owner of the service as well as the owner of any specified registry credential.";
                    };
                    readonly registryCredentialId: {
                        readonly type: "string";
                        readonly description: "Optional reference to the registry credential passed to the image repository to retrieve this image.";
                    };
                    readonly imagePath: {
                        readonly type: "string";
                        readonly description: "Path to the image used for this server (e.g docker.io/library/nginx:latest).";
                    };
                };
            };
            readonly name: {
                readonly type: "string";
            };
            readonly buildFilter: {
                readonly type: "object";
                readonly required: readonly ["paths", "ignoredPaths"];
                readonly properties: {
                    readonly paths: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                    };
                    readonly ignoredPaths: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly rootDir: {
                readonly type: "string";
            };
            readonly serviceDetails: {
                readonly oneOf: readonly [{
                    readonly type: "object";
                    readonly properties: {
                        readonly buildCommand: {
                            readonly type: "string";
                        };
                        readonly publishPath: {
                            readonly type: "string";
                        };
                        readonly pullRequestPreviewsEnabled: {
                            readonly type: "string";
                            readonly enum: readonly ["yes", "no"];
                            readonly default: "no";
                            readonly deprecated: true;
                            readonly description: "This field has been deprecated. previews.generation should be used in its place.\n\nDefault: `no`";
                        };
                        readonly previews: {
                            readonly type: "object";
                            readonly properties: {
                                readonly generation: {
                                    readonly type: "string";
                                    readonly enum: readonly ["off", "manual", "automatic"];
                                    readonly default: "off";
                                    readonly description: "Defaults to \"off\"\n\nDefault: `off`";
                                };
                            };
                        };
                    };
                }, {
                    readonly type: "object";
                    readonly properties: {
                        readonly envSpecificDetails: {
                            readonly oneOf: readonly [{
                                readonly type: "object";
                                readonly properties: {
                                    readonly dockerCommand: {
                                        readonly type: "string";
                                    };
                                    readonly dockerContext: {
                                        readonly type: "string";
                                    };
                                    readonly dockerfilePath: {
                                        readonly type: "string";
                                    };
                                    readonly registryCredentialId: {
                                        readonly type: "string";
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly properties: {
                                    readonly buildCommand: {
                                        readonly type: "string";
                                    };
                                    readonly startCommand: {
                                        readonly type: "string";
                                    };
                                };
                            }];
                        };
                        readonly healthCheckPath: {
                            readonly type: "string";
                        };
                        readonly maintenanceMode: {
                            readonly type: "object";
                            readonly required: readonly ["enabled", "uri"];
                            readonly properties: {
                                readonly enabled: {
                                    readonly type: "boolean";
                                };
                                readonly uri: {
                                    readonly type: "string";
                                    readonly description: "The page to be served when [maintenance mode](https://docs.render.com/maintenance-mode) is enabled. When empty, the default maintenance mode page is served.";
                                };
                            };
                        };
                        readonly plan: {
                            readonly type: "string";
                            readonly enum: readonly ["starter", "standard", "pro", "pro_plus", "pro_max", "pro_ultra"];
                            readonly default: "starter";
                            readonly description: "Defaults to \"starter\"\n\nDefault: `starter`";
                        };
                        readonly preDeployCommand: {
                            readonly type: "string";
                        };
                        readonly pullRequestPreviewsEnabled: {
                            readonly type: "string";
                            readonly enum: readonly ["yes", "no"];
                            readonly default: "no";
                            readonly deprecated: true;
                            readonly description: "This field has been deprecated. previews.generation should be used in its place.\n\nDefault: `no`";
                        };
                        readonly previews: {
                            readonly type: "object";
                            readonly properties: {
                                readonly generation: {
                                    readonly type: "string";
                                    readonly enum: readonly ["off", "manual", "automatic"];
                                    readonly default: "off";
                                    readonly description: "Defaults to \"off\"\n\nDefault: `off`";
                                };
                            };
                        };
                        readonly runtime: {
                            readonly type: "string";
                            readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                            readonly description: "Runtime";
                        };
                        readonly maxShutdownDelaySeconds: {
                            readonly type: "integer";
                            readonly description: "The maximum amount of time (in seconds) that Render waits for your application process to exit gracefully after sending it a SIGTERM signal.";
                            readonly minimum: 1;
                            readonly maximum: 300;
                            readonly default: 30;
                        };
                    };
                }, {
                    readonly type: "object";
                    readonly properties: {
                        readonly envSpecificDetails: {
                            readonly oneOf: readonly [{
                                readonly type: "object";
                                readonly properties: {
                                    readonly dockerCommand: {
                                        readonly type: "string";
                                    };
                                    readonly dockerContext: {
                                        readonly type: "string";
                                    };
                                    readonly dockerfilePath: {
                                        readonly type: "string";
                                    };
                                    readonly registryCredentialId: {
                                        readonly type: "string";
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly properties: {
                                    readonly buildCommand: {
                                        readonly type: "string";
                                    };
                                    readonly startCommand: {
                                        readonly type: "string";
                                    };
                                };
                            }];
                        };
                        readonly plan: {
                            readonly type: "string";
                            readonly enum: readonly ["starter", "standard", "pro", "pro_plus", "pro_max", "pro_ultra"];
                            readonly default: "starter";
                            readonly description: "Defaults to \"starter\"\n\nDefault: `starter`";
                        };
                        readonly preDeployCommand: {
                            readonly type: "string";
                        };
                        readonly pullRequestPreviewsEnabled: {
                            readonly type: "string";
                            readonly enum: readonly ["yes", "no"];
                            readonly default: "no";
                            readonly deprecated: true;
                            readonly description: "This field has been deprecated. previews.generation should be used in its place.\n\nDefault: `no`";
                        };
                        readonly previews: {
                            readonly type: "object";
                            readonly properties: {
                                readonly generation: {
                                    readonly type: "string";
                                    readonly enum: readonly ["off", "manual", "automatic"];
                                    readonly default: "off";
                                    readonly description: "Defaults to \"off\"\n\nDefault: `off`";
                                };
                            };
                        };
                        readonly runtime: {
                            readonly type: "string";
                            readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                            readonly description: "Runtime";
                        };
                        readonly maxShutdownDelaySeconds: {
                            readonly type: "integer";
                            readonly description: "The maximum amount of time (in seconds) that Render waits for your application process to exit gracefully after sending it a SIGTERM signal.";
                            readonly minimum: 1;
                            readonly maximum: 300;
                            readonly default: 30;
                        };
                    };
                }, {
                    readonly type: "object";
                    readonly properties: {
                        readonly envSpecificDetails: {
                            readonly oneOf: readonly [{
                                readonly type: "object";
                                readonly properties: {
                                    readonly dockerCommand: {
                                        readonly type: "string";
                                    };
                                    readonly dockerContext: {
                                        readonly type: "string";
                                    };
                                    readonly dockerfilePath: {
                                        readonly type: "string";
                                    };
                                    readonly registryCredentialId: {
                                        readonly type: "string";
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly properties: {
                                    readonly buildCommand: {
                                        readonly type: "string";
                                    };
                                    readonly startCommand: {
                                        readonly type: "string";
                                    };
                                };
                            }];
                        };
                        readonly plan: {
                            readonly type: "string";
                            readonly enum: readonly ["starter", "standard", "pro", "pro_plus", "pro_max", "pro_ultra"];
                            readonly default: "starter";
                            readonly description: "Defaults to \"starter\"\n\nDefault: `starter`";
                        };
                        readonly preDeployCommand: {
                            readonly type: "string";
                        };
                        readonly pullRequestPreviewsEnabled: {
                            readonly type: "string";
                            readonly enum: readonly ["yes", "no"];
                            readonly default: "no";
                            readonly deprecated: true;
                            readonly description: "This field has been deprecated. previews.generation should be used in its place.\n\nDefault: `no`";
                        };
                        readonly previews: {
                            readonly type: "object";
                            readonly properties: {
                                readonly generation: {
                                    readonly type: "string";
                                    readonly enum: readonly ["off", "manual", "automatic"];
                                    readonly default: "off";
                                    readonly description: "Defaults to \"off\"\n\nDefault: `off`";
                                };
                            };
                        };
                        readonly runtime: {
                            readonly type: "string";
                            readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                            readonly description: "Runtime";
                        };
                        readonly maxShutdownDelaySeconds: {
                            readonly type: "integer";
                            readonly description: "The maximum amount of time (in seconds) that Render waits for your application process to exit gracefully after sending it a SIGTERM signal.";
                            readonly minimum: 1;
                            readonly maximum: 300;
                            readonly default: 30;
                        };
                    };
                }, {
                    readonly type: "object";
                    readonly properties: {
                        readonly envSpecificDetails: {
                            readonly oneOf: readonly [{
                                readonly type: "object";
                                readonly properties: {
                                    readonly dockerCommand: {
                                        readonly type: "string";
                                    };
                                    readonly dockerContext: {
                                        readonly type: "string";
                                    };
                                    readonly dockerfilePath: {
                                        readonly type: "string";
                                    };
                                    readonly registryCredentialId: {
                                        readonly type: "string";
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly properties: {
                                    readonly buildCommand: {
                                        readonly type: "string";
                                    };
                                    readonly startCommand: {
                                        readonly type: "string";
                                    };
                                };
                            }];
                        };
                        readonly plan: {
                            readonly type: "string";
                            readonly enum: readonly ["starter", "standard", "pro", "pro_plus", "pro_max", "pro_ultra"];
                            readonly default: "starter";
                            readonly description: "Defaults to \"starter\"\n\nDefault: `starter`";
                        };
                        readonly schedule: {
                            readonly type: "string";
                        };
                        readonly runtime: {
                            readonly type: "string";
                            readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                            readonly description: "Runtime";
                        };
                    };
                }];
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly serviceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the service";
                };
            };
            readonly required: readonly ["serviceId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "ownerId", "type", "createdAt", "dashboardUrl", "updatedAt", "suspended", "suspenders", "autoDeploy", "notifyOnFail", "slug", "serviceDetails", "rootDir"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly autoDeploy: {
                    readonly type: "string";
                    readonly enum: readonly ["yes", "no"];
                    readonly default: "yes";
                    readonly description: "`yes` `no`";
                };
                readonly branch: {
                    readonly type: "string";
                };
                readonly buildFilter: {
                    readonly type: "object";
                    readonly required: readonly ["paths", "ignoredPaths"];
                    readonly properties: {
                        readonly paths: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly ignoredPaths: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                    };
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly dashboardUrl: {
                    readonly type: "string";
                    readonly description: "The URL to view the service in the Render Dashboard";
                };
                readonly environmentId: {
                    readonly type: "string";
                };
                readonly imagePath: {
                    readonly type: "string";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly notifyOnFail: {
                    readonly type: "string";
                    readonly enum: readonly ["default", "notify", "ignore"];
                    readonly description: "`default` `notify` `ignore`";
                };
                readonly ownerId: {
                    readonly type: "string";
                };
                readonly registryCredential: {
                    readonly type: "object";
                    readonly required: readonly ["id", "name"];
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                    };
                };
                readonly repo: {
                    readonly type: "string";
                    readonly examples: readonly ["https://github.com/render-examples/flask-hello-world"];
                };
                readonly rootDir: {
                    readonly type: "string";
                };
                readonly slug: {
                    readonly type: "string";
                };
                readonly suspended: {
                    readonly type: "string";
                    readonly enum: readonly ["suspended", "not_suspended"];
                    readonly description: "`suspended` `not_suspended`";
                };
                readonly suspenders: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["admin", "billing", "user", "parent_service", "unknown"];
                        readonly description: "`admin` `billing` `user` `parent_service` `unknown`";
                    };
                };
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["static_site", "web_service", "private_service", "background_worker", "cron_job"];
                    readonly description: "`static_site` `web_service` `private_service` `background_worker` `cron_job`";
                };
                readonly updatedAt: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly serviceDetails: {
                    readonly oneOf: readonly [{
                        readonly type: "object";
                        readonly required: readonly ["buildCommand", "publishPath", "url", "buildPlan"];
                        readonly properties: {
                            readonly buildCommand: {
                                readonly type: "string";
                            };
                            readonly parentServer: {
                                readonly required: readonly ["id", "name"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly publishPath: {
                                readonly type: "string";
                            };
                            readonly pullRequestPreviewsEnabled: {
                                readonly type: "string";
                                readonly enum: readonly ["yes", "no"];
                                readonly default: "no";
                                readonly deprecated: true;
                                readonly description: "This field has been deprecated. previews.generation should be used in its place.\n\n`yes` `no`";
                            };
                            readonly previews: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly generation: {
                                        readonly type: "string";
                                        readonly enum: readonly ["off", "manual", "automatic"];
                                        readonly default: "off";
                                        readonly description: "Defaults to \"off\"\n\n`off` `manual` `automatic`";
                                    };
                                };
                            };
                            readonly url: {
                                readonly type: "string";
                            };
                            readonly buildPlan: {
                                readonly type: "string";
                                readonly enum: readonly ["starter", "performance"];
                                readonly default: "starter";
                                readonly description: "`starter` `performance`";
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly required: readonly ["env", "runtime", "envSpecificDetails", "plan", "region", "numInstances", "buildPlan", "healthCheckPath", "openPorts", "url"];
                        readonly properties: {
                            readonly autoscaling: {
                                readonly type: "object";
                                readonly required: readonly ["enabled", "min", "max", "criteria"];
                                readonly properties: {
                                    readonly enabled: {
                                        readonly type: "boolean";
                                        readonly default: false;
                                    };
                                    readonly min: {
                                        readonly type: "integer";
                                        readonly description: "The minimum number of instances for the service";
                                    };
                                    readonly max: {
                                        readonly type: "integer";
                                        readonly description: "The maximum number of instances for the service";
                                    };
                                    readonly criteria: {
                                        readonly type: "object";
                                        readonly required: readonly ["cpu", "memory"];
                                        readonly properties: {
                                            readonly cpu: {
                                                readonly type: "object";
                                                readonly required: readonly ["enabled", "percentage"];
                                                readonly properties: {
                                                    readonly enabled: {
                                                        readonly type: "boolean";
                                                        readonly default: false;
                                                    };
                                                    readonly percentage: {
                                                        readonly type: "integer";
                                                        readonly description: "Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.\n";
                                                    };
                                                };
                                            };
                                            readonly memory: {
                                                readonly type: "object";
                                                readonly required: readonly ["enabled", "percentage"];
                                                readonly properties: {
                                                    readonly enabled: {
                                                        readonly type: "boolean";
                                                        readonly default: false;
                                                    };
                                                    readonly percentage: {
                                                        readonly type: "integer";
                                                        readonly description: "Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.\n";
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                            readonly disk: {
                                readonly type: "object";
                                readonly required: readonly ["id", "name", "sizeGB", "mountPath"];
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly pattern: "^dsk-[0-9a-z]{20}$";
                                        readonly examples: readonly ["dsk-cph1rs3idesc73a2b2mg"];
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly sizeGB: {
                                        readonly type: "integer";
                                    };
                                    readonly mountPath: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly env: {
                                readonly type: "string";
                                readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                                readonly deprecated: true;
                                readonly description: "This field has been deprecated, runtime should be used in its place.\n\n`docker` `elixir` `go` `node` `python` `ruby` `rust` `image`";
                            };
                            readonly envSpecificDetails: {
                                readonly oneOf: readonly [{
                                    readonly type: "object";
                                    readonly required: readonly ["dockerCommand", "dockerContext", "dockerfilePath"];
                                    readonly properties: {
                                        readonly dockerCommand: {
                                            readonly type: "string";
                                        };
                                        readonly dockerContext: {
                                            readonly type: "string";
                                        };
                                        readonly dockerfilePath: {
                                            readonly type: "string";
                                        };
                                        readonly preDeployCommand: {
                                            readonly type: "string";
                                        };
                                        readonly registryCredential: {
                                            readonly type: "object";
                                            readonly required: readonly ["id", "name", "username", "registry", "updatedAt"];
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                    readonly description: "Unique identifier for this credential";
                                                };
                                                readonly name: {
                                                    readonly type: "string";
                                                    readonly description: "Descriptive name for this credential";
                                                };
                                                readonly registry: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["GITHUB", "GITLAB", "DOCKER", "GOOGLE_ARTIFACT", "AWS_ECR"];
                                                    readonly description: "The registry to use this credential with\n\n`GITHUB` `GITLAB` `DOCKER` `GOOGLE_ARTIFACT` `AWS_ECR`";
                                                };
                                                readonly username: {
                                                    readonly type: "string";
                                                    readonly description: "The username associated with the credential";
                                                };
                                                readonly updatedAt: {
                                                    readonly type: "string";
                                                    readonly format: "date-time";
                                                    readonly description: "Last updated time for the credential";
                                                };
                                            };
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["buildCommand", "startCommand"];
                                    readonly properties: {
                                        readonly buildCommand: {
                                            readonly type: "string";
                                        };
                                        readonly startCommand: {
                                            readonly type: "string";
                                        };
                                        readonly preDeployCommand: {
                                            readonly type: "string";
                                        };
                                    };
                                }];
                            };
                            readonly healthCheckPath: {
                                readonly type: "string";
                            };
                            readonly maintenanceMode: {
                                readonly type: "object";
                                readonly required: readonly ["enabled", "uri"];
                                readonly properties: {
                                    readonly enabled: {
                                        readonly type: "boolean";
                                    };
                                    readonly uri: {
                                        readonly type: "string";
                                        readonly description: "The page to be served when [maintenance mode](https://docs.render.com/maintenance-mode) is enabled. When empty, the default maintenance mode page is served.";
                                    };
                                };
                            };
                            readonly numInstances: {
                                readonly type: "integer";
                                readonly description: "For a *manually* scaled service, this is the number of instances the service is scaled to. DOES NOT indicate the number of running instances for an *autoscaled* service.";
                            };
                            readonly openPorts: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly required: readonly ["port", "protocol"];
                                    readonly properties: {
                                        readonly port: {
                                            readonly type: "integer";
                                            readonly examples: readonly [10000];
                                        };
                                        readonly protocol: {
                                            readonly type: "string";
                                            readonly enum: readonly ["TCP", "UDP"];
                                            readonly description: "`TCP` `UDP`";
                                        };
                                    };
                                };
                            };
                            readonly parentServer: {
                                readonly required: readonly ["id", "name"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly plan: {
                                readonly type: "string";
                                readonly enum: readonly ["starter", "starter_plus", "standard", "standard_plus", "pro", "pro_plus", "pro_max", "pro_ultra", "free", "custom"];
                                readonly description: "The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.\n\n`starter` `starter_plus` `standard` `standard_plus` `pro` `pro_plus` `pro_max` `pro_ultra` `free` `custom`";
                                readonly examples: readonly ["starter"];
                            };
                            readonly pullRequestPreviewsEnabled: {
                                readonly type: "string";
                                readonly enum: readonly ["yes", "no"];
                                readonly default: "no";
                                readonly deprecated: true;
                                readonly description: "This field has been deprecated. previews.generation should be used in its place.\n\n`yes` `no`";
                            };
                            readonly previews: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly generation: {
                                        readonly type: "string";
                                        readonly enum: readonly ["off", "manual", "automatic"];
                                        readonly default: "off";
                                        readonly description: "Defaults to \"off\"\n\n`off` `manual` `automatic`";
                                    };
                                };
                            };
                            readonly region: {
                                readonly type: "string";
                                readonly enum: readonly ["frankfurt", "oregon", "ohio", "singapore", "virginia"];
                                readonly default: "oregon";
                                readonly description: "Defaults to \"oregon\"\n\n`frankfurt` `oregon` `ohio` `singapore` `virginia`";
                            };
                            readonly runtime: {
                                readonly type: "string";
                                readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                                readonly description: "Runtime\n\n`docker` `elixir` `go` `node` `python` `ruby` `rust` `image`";
                            };
                            readonly sshAddress: {
                                readonly type: "string";
                                readonly description: "The SSH address for the service. Only present for services that have SSH enabled.";
                            };
                            readonly url: {
                                readonly type: "string";
                            };
                            readonly buildPlan: {
                                readonly type: "string";
                                readonly enum: readonly ["starter", "performance"];
                                readonly default: "starter";
                                readonly description: "`starter` `performance`";
                            };
                            readonly maxShutdownDelaySeconds: {
                                readonly type: "integer";
                                readonly description: "The maximum amount of time (in seconds) that Render waits for your application process to exit gracefully after sending it a SIGTERM signal.";
                                readonly minimum: 1;
                                readonly maximum: 300;
                                readonly default: 30;
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly required: readonly ["env", "runtime", "envSpecificDetails", "plan", "region", "numInstances", "buildPlan", "openPorts", "url"];
                        readonly properties: {
                            readonly autoscaling: {
                                readonly type: "object";
                                readonly required: readonly ["enabled", "min", "max", "criteria"];
                                readonly properties: {
                                    readonly enabled: {
                                        readonly type: "boolean";
                                        readonly default: false;
                                    };
                                    readonly min: {
                                        readonly type: "integer";
                                        readonly description: "The minimum number of instances for the service";
                                    };
                                    readonly max: {
                                        readonly type: "integer";
                                        readonly description: "The maximum number of instances for the service";
                                    };
                                    readonly criteria: {
                                        readonly type: "object";
                                        readonly required: readonly ["cpu", "memory"];
                                        readonly properties: {
                                            readonly cpu: {
                                                readonly type: "object";
                                                readonly required: readonly ["enabled", "percentage"];
                                                readonly properties: {
                                                    readonly enabled: {
                                                        readonly type: "boolean";
                                                        readonly default: false;
                                                    };
                                                    readonly percentage: {
                                                        readonly type: "integer";
                                                        readonly description: "Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.\n";
                                                    };
                                                };
                                            };
                                            readonly memory: {
                                                readonly type: "object";
                                                readonly required: readonly ["enabled", "percentage"];
                                                readonly properties: {
                                                    readonly enabled: {
                                                        readonly type: "boolean";
                                                        readonly default: false;
                                                    };
                                                    readonly percentage: {
                                                        readonly type: "integer";
                                                        readonly description: "Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.\n";
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                            readonly disk: {
                                readonly type: "object";
                                readonly required: readonly ["id", "name", "sizeGB", "mountPath"];
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly pattern: "^dsk-[0-9a-z]{20}$";
                                        readonly examples: readonly ["dsk-cph1rs3idesc73a2b2mg"];
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly sizeGB: {
                                        readonly type: "integer";
                                    };
                                    readonly mountPath: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly env: {
                                readonly type: "string";
                                readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                                readonly deprecated: true;
                                readonly description: "This field has been deprecated, runtime should be used in its place.\n\n`docker` `elixir` `go` `node` `python` `ruby` `rust` `image`";
                            };
                            readonly envSpecificDetails: {
                                readonly oneOf: readonly [{
                                    readonly type: "object";
                                    readonly required: readonly ["dockerCommand", "dockerContext", "dockerfilePath"];
                                    readonly properties: {
                                        readonly dockerCommand: {
                                            readonly type: "string";
                                        };
                                        readonly dockerContext: {
                                            readonly type: "string";
                                        };
                                        readonly dockerfilePath: {
                                            readonly type: "string";
                                        };
                                        readonly preDeployCommand: {
                                            readonly type: "string";
                                        };
                                        readonly registryCredential: {
                                            readonly type: "object";
                                            readonly required: readonly ["id", "name", "username", "registry", "updatedAt"];
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                    readonly description: "Unique identifier for this credential";
                                                };
                                                readonly name: {
                                                    readonly type: "string";
                                                    readonly description: "Descriptive name for this credential";
                                                };
                                                readonly registry: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["GITHUB", "GITLAB", "DOCKER", "GOOGLE_ARTIFACT", "AWS_ECR"];
                                                    readonly description: "The registry to use this credential with\n\n`GITHUB` `GITLAB` `DOCKER` `GOOGLE_ARTIFACT` `AWS_ECR`";
                                                };
                                                readonly username: {
                                                    readonly type: "string";
                                                    readonly description: "The username associated with the credential";
                                                };
                                                readonly updatedAt: {
                                                    readonly type: "string";
                                                    readonly format: "date-time";
                                                    readonly description: "Last updated time for the credential";
                                                };
                                            };
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["buildCommand", "startCommand"];
                                    readonly properties: {
                                        readonly buildCommand: {
                                            readonly type: "string";
                                        };
                                        readonly startCommand: {
                                            readonly type: "string";
                                        };
                                        readonly preDeployCommand: {
                                            readonly type: "string";
                                        };
                                    };
                                }];
                            };
                            readonly numInstances: {
                                readonly type: "integer";
                                readonly description: "For a *manually* scaled service, this is the number of instances the service is scaled to. DOES NOT indicate the number of running instances for an *autoscaled* service.";
                            };
                            readonly openPorts: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly required: readonly ["port", "protocol"];
                                    readonly properties: {
                                        readonly port: {
                                            readonly type: "integer";
                                            readonly examples: readonly [10000];
                                        };
                                        readonly protocol: {
                                            readonly type: "string";
                                            readonly enum: readonly ["TCP", "UDP"];
                                            readonly description: "`TCP` `UDP`";
                                        };
                                    };
                                };
                            };
                            readonly parentServer: {
                                readonly required: readonly ["id", "name"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly plan: {
                                readonly type: "string";
                                readonly enum: readonly ["starter", "starter_plus", "standard", "standard_plus", "pro", "pro_plus", "pro_max", "pro_ultra", "free", "custom"];
                                readonly description: "The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.\n\n`starter` `starter_plus` `standard` `standard_plus` `pro` `pro_plus` `pro_max` `pro_ultra` `free` `custom`";
                                readonly examples: readonly ["starter"];
                            };
                            readonly pullRequestPreviewsEnabled: {
                                readonly type: "string";
                                readonly enum: readonly ["yes", "no"];
                                readonly default: "no";
                                readonly deprecated: true;
                                readonly description: "This field has been deprecated. previews.generation should be used in its place.\n\n`yes` `no`";
                            };
                            readonly previews: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly generation: {
                                        readonly type: "string";
                                        readonly enum: readonly ["off", "manual", "automatic"];
                                        readonly default: "off";
                                        readonly description: "Defaults to \"off\"\n\n`off` `manual` `automatic`";
                                    };
                                };
                            };
                            readonly region: {
                                readonly type: "string";
                                readonly enum: readonly ["frankfurt", "oregon", "ohio", "singapore", "virginia"];
                                readonly default: "oregon";
                                readonly description: "Defaults to \"oregon\"\n\n`frankfurt` `oregon` `ohio` `singapore` `virginia`";
                            };
                            readonly runtime: {
                                readonly type: "string";
                                readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                                readonly description: "Runtime\n\n`docker` `elixir` `go` `node` `python` `ruby` `rust` `image`";
                            };
                            readonly sshAddress: {
                                readonly type: "string";
                                readonly description: "The SSH address for the service. Only present for services that have SSH enabled.";
                            };
                            readonly url: {
                                readonly type: "string";
                            };
                            readonly buildPlan: {
                                readonly type: "string";
                                readonly enum: readonly ["starter", "performance"];
                                readonly default: "starter";
                                readonly description: "`starter` `performance`";
                            };
                            readonly maxShutdownDelaySeconds: {
                                readonly type: "integer";
                                readonly description: "The maximum amount of time (in seconds) that Render waits for your application process to exit gracefully after sending it a SIGTERM signal.";
                                readonly minimum: 1;
                                readonly maximum: 300;
                                readonly default: 30;
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly required: readonly ["env", "runtime", "envSpecificDetails", "plan", "region", "numInstances", "buildPlan"];
                        readonly properties: {
                            readonly autoscaling: {
                                readonly type: "object";
                                readonly required: readonly ["enabled", "min", "max", "criteria"];
                                readonly properties: {
                                    readonly enabled: {
                                        readonly type: "boolean";
                                        readonly default: false;
                                    };
                                    readonly min: {
                                        readonly type: "integer";
                                        readonly description: "The minimum number of instances for the service";
                                    };
                                    readonly max: {
                                        readonly type: "integer";
                                        readonly description: "The maximum number of instances for the service";
                                    };
                                    readonly criteria: {
                                        readonly type: "object";
                                        readonly required: readonly ["cpu", "memory"];
                                        readonly properties: {
                                            readonly cpu: {
                                                readonly type: "object";
                                                readonly required: readonly ["enabled", "percentage"];
                                                readonly properties: {
                                                    readonly enabled: {
                                                        readonly type: "boolean";
                                                        readonly default: false;
                                                    };
                                                    readonly percentage: {
                                                        readonly type: "integer";
                                                        readonly description: "Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.\n";
                                                    };
                                                };
                                            };
                                            readonly memory: {
                                                readonly type: "object";
                                                readonly required: readonly ["enabled", "percentage"];
                                                readonly properties: {
                                                    readonly enabled: {
                                                        readonly type: "boolean";
                                                        readonly default: false;
                                                    };
                                                    readonly percentage: {
                                                        readonly type: "integer";
                                                        readonly description: "Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.\n";
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                            readonly disk: {
                                readonly type: "object";
                                readonly required: readonly ["id", "name", "sizeGB", "mountPath"];
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly pattern: "^dsk-[0-9a-z]{20}$";
                                        readonly examples: readonly ["dsk-cph1rs3idesc73a2b2mg"];
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly sizeGB: {
                                        readonly type: "integer";
                                    };
                                    readonly mountPath: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly env: {
                                readonly type: "string";
                                readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                                readonly deprecated: true;
                                readonly description: "This field has been deprecated, runtime should be used in its place.\n\n`docker` `elixir` `go` `node` `python` `ruby` `rust` `image`";
                            };
                            readonly envSpecificDetails: {
                                readonly oneOf: readonly [{
                                    readonly type: "object";
                                    readonly required: readonly ["dockerCommand", "dockerContext", "dockerfilePath"];
                                    readonly properties: {
                                        readonly dockerCommand: {
                                            readonly type: "string";
                                        };
                                        readonly dockerContext: {
                                            readonly type: "string";
                                        };
                                        readonly dockerfilePath: {
                                            readonly type: "string";
                                        };
                                        readonly preDeployCommand: {
                                            readonly type: "string";
                                        };
                                        readonly registryCredential: {
                                            readonly type: "object";
                                            readonly required: readonly ["id", "name", "username", "registry", "updatedAt"];
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                    readonly description: "Unique identifier for this credential";
                                                };
                                                readonly name: {
                                                    readonly type: "string";
                                                    readonly description: "Descriptive name for this credential";
                                                };
                                                readonly registry: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["GITHUB", "GITLAB", "DOCKER", "GOOGLE_ARTIFACT", "AWS_ECR"];
                                                    readonly description: "The registry to use this credential with\n\n`GITHUB` `GITLAB` `DOCKER` `GOOGLE_ARTIFACT` `AWS_ECR`";
                                                };
                                                readonly username: {
                                                    readonly type: "string";
                                                    readonly description: "The username associated with the credential";
                                                };
                                                readonly updatedAt: {
                                                    readonly type: "string";
                                                    readonly format: "date-time";
                                                    readonly description: "Last updated time for the credential";
                                                };
                                            };
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["buildCommand", "startCommand"];
                                    readonly properties: {
                                        readonly buildCommand: {
                                            readonly type: "string";
                                        };
                                        readonly startCommand: {
                                            readonly type: "string";
                                        };
                                        readonly preDeployCommand: {
                                            readonly type: "string";
                                        };
                                    };
                                }];
                            };
                            readonly numInstances: {
                                readonly type: "integer";
                                readonly description: "For a *manually* scaled service, this is the number of instances the service is scaled to. DOES NOT indicate the number of running instances for an *autoscaled* service.";
                            };
                            readonly parentServer: {
                                readonly required: readonly ["id", "name"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly plan: {
                                readonly type: "string";
                                readonly enum: readonly ["starter", "starter_plus", "standard", "standard_plus", "pro", "pro_plus", "pro_max", "pro_ultra", "free", "custom"];
                                readonly description: "The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.\n\n`starter` `starter_plus` `standard` `standard_plus` `pro` `pro_plus` `pro_max` `pro_ultra` `free` `custom`";
                                readonly examples: readonly ["starter"];
                            };
                            readonly pullRequestPreviewsEnabled: {
                                readonly type: "string";
                                readonly enum: readonly ["yes", "no"];
                                readonly default: "no";
                                readonly deprecated: true;
                                readonly description: "This field has been deprecated. previews.generation should be used in its place.\n\n`yes` `no`";
                            };
                            readonly previews: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly generation: {
                                        readonly type: "string";
                                        readonly enum: readonly ["off", "manual", "automatic"];
                                        readonly default: "off";
                                        readonly description: "Defaults to \"off\"\n\n`off` `manual` `automatic`";
                                    };
                                };
                            };
                            readonly region: {
                                readonly type: "string";
                                readonly enum: readonly ["frankfurt", "oregon", "ohio", "singapore", "virginia"];
                                readonly default: "oregon";
                                readonly description: "Defaults to \"oregon\"\n\n`frankfurt` `oregon` `ohio` `singapore` `virginia`";
                            };
                            readonly runtime: {
                                readonly type: "string";
                                readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                                readonly description: "Runtime\n\n`docker` `elixir` `go` `node` `python` `ruby` `rust` `image`";
                            };
                            readonly sshAddress: {
                                readonly type: "string";
                                readonly description: "The SSH address for the service. Only present for services that have SSH enabled.";
                            };
                            readonly buildPlan: {
                                readonly type: "string";
                                readonly enum: readonly ["starter", "performance"];
                                readonly default: "starter";
                                readonly description: "`starter` `performance`";
                            };
                            readonly maxShutdownDelaySeconds: {
                                readonly type: "integer";
                                readonly description: "The maximum amount of time (in seconds) that Render waits for your application process to exit gracefully after sending it a SIGTERM signal.";
                                readonly minimum: 1;
                                readonly maximum: 300;
                                readonly default: 30;
                            };
                        };
                    }, {
                        readonly required: readonly ["env", "runtime", "envSpecificDetails", "plan", "region", "schedule", "buildPlan"];
                        readonly type: "object";
                        readonly properties: {
                            readonly env: {
                                readonly type: "string";
                                readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                                readonly deprecated: true;
                                readonly description: "This field has been deprecated, runtime should be used in its place.\n\n`docker` `elixir` `go` `node` `python` `ruby` `rust` `image`";
                            };
                            readonly envSpecificDetails: {
                                readonly oneOf: readonly [{
                                    readonly type: "object";
                                    readonly required: readonly ["dockerCommand", "dockerContext", "dockerfilePath"];
                                    readonly properties: {
                                        readonly dockerCommand: {
                                            readonly type: "string";
                                        };
                                        readonly dockerContext: {
                                            readonly type: "string";
                                        };
                                        readonly dockerfilePath: {
                                            readonly type: "string";
                                        };
                                        readonly preDeployCommand: {
                                            readonly type: "string";
                                        };
                                        readonly registryCredential: {
                                            readonly type: "object";
                                            readonly required: readonly ["id", "name", "username", "registry", "updatedAt"];
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                    readonly description: "Unique identifier for this credential";
                                                };
                                                readonly name: {
                                                    readonly type: "string";
                                                    readonly description: "Descriptive name for this credential";
                                                };
                                                readonly registry: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["GITHUB", "GITLAB", "DOCKER", "GOOGLE_ARTIFACT", "AWS_ECR"];
                                                    readonly description: "The registry to use this credential with\n\n`GITHUB` `GITLAB` `DOCKER` `GOOGLE_ARTIFACT` `AWS_ECR`";
                                                };
                                                readonly username: {
                                                    readonly type: "string";
                                                    readonly description: "The username associated with the credential";
                                                };
                                                readonly updatedAt: {
                                                    readonly type: "string";
                                                    readonly format: "date-time";
                                                    readonly description: "Last updated time for the credential";
                                                };
                                            };
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["buildCommand", "startCommand"];
                                    readonly properties: {
                                        readonly buildCommand: {
                                            readonly type: "string";
                                        };
                                        readonly startCommand: {
                                            readonly type: "string";
                                        };
                                        readonly preDeployCommand: {
                                            readonly type: "string";
                                        };
                                    };
                                }];
                            };
                            readonly lastSuccessfulRunAt: {
                                readonly type: "string";
                                readonly format: "date-time";
                            };
                            readonly plan: {
                                readonly type: "string";
                                readonly enum: readonly ["starter", "starter_plus", "standard", "standard_plus", "pro", "pro_plus", "pro_max", "pro_ultra", "free", "custom"];
                                readonly description: "The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.\n\n`starter` `starter_plus` `standard` `standard_plus` `pro` `pro_plus` `pro_max` `pro_ultra` `free` `custom`";
                                readonly examples: readonly ["starter"];
                            };
                            readonly region: {
                                readonly type: "string";
                                readonly enum: readonly ["frankfurt", "oregon", "ohio", "singapore", "virginia"];
                                readonly default: "oregon";
                                readonly description: "Defaults to \"oregon\"\n\n`frankfurt` `oregon` `ohio` `singapore` `virginia`";
                            };
                            readonly runtime: {
                                readonly type: "string";
                                readonly enum: readonly ["docker", "elixir", "go", "node", "python", "ruby", "rust", "image"];
                                readonly description: "Runtime\n\n`docker` `elixir` `go` `node` `python` `ruby` `rust` `image`";
                            };
                            readonly schedule: {
                                readonly type: "string";
                            };
                            readonly buildPlan: {
                                readonly type: "string";
                                readonly enum: readonly ["starter", "performance"];
                                readonly default: "starter";
                                readonly description: "`starter` `performance`";
                            };
                        };
                    }];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "402": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "403": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "404": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "406": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "409": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "410": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "429": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "503": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
export { AddDisk, AddHeaders, AddOrUpdateSecretFile, AddResourcesToEnvironment, AddRoute, AutoscaleService, CancelCronJobRun, CancelDeploy, CancelJob, CreateCustomDomain, CreateDeploy, CreateEnvGroup, CreateEnvironment, CreatePostgres, CreatePostgresBackup, CreateProject, CreateRedis, CreateRegistryCredential, CreateService, DeleteAutoscalingConfig, DeleteCustomDomain, DeleteDisk, DeleteEnvGroup, DeleteEnvGroupEnvVar, DeleteEnvGroupSecretFile, DeleteEnvVar, DeleteEnvironment, DeleteHeader, DeleteOwnerLogStream, DeletePostgres, DeleteProject, DeleteRedis, DeleteRegistryCredential, DeleteResourceLogStream, DeleteRoute, DeleteSecretFile, DeleteService, DisconnectBlueprint, FailoverPostgres, GetActiveConnections, GetBandwidth, GetCpu, GetCpuLimit, GetCpuTarget, GetDiskCapacity, GetDiskUsage, GetEnvVarsForService, GetHttpLatency, GetHttpRequests, GetInstanceCount, GetMemory, GetMemoryLimit, GetMemoryTarget, GetOwnerLogStream, GetReplicationLag, GetResourceLogStream, GetUser, LinkServiceToEnvGroup, ListApplicationFilterValues, ListBlueprintSyncs, ListBlueprints, ListCustomDomains, ListDeploys, ListDisks, ListEnvGroups, ListEnvironments, ListEvents, ListHeaders, ListHttpFilterValues, ListJob, ListLogs, ListLogsValues, ListMaintenance, ListNotificationOverrides, ListOwners, ListPathFilterValues, ListPostgres, ListPostgresBackup, ListProjects, ListRedis, ListRegistryCredentials, ListResourceLogStreams, ListRoutes, ListSecretFilesForService, ListServices, ListSnapshots, PatchOwnerNotificationSettings, PatchRoute, PatchServiceNotificationOverrides, PostJob, PreviewService, PutRoutes, RecoverPostgres, RefreshCustomDomain, RemoveResourcesFromEnvironment, RestartPostgres, RestartService, RestoreSnapshot, ResumePostgres, ResumeService, RetrieveBlueprint, RetrieveCustomDomain, RetrieveDeploy, RetrieveDisk, RetrieveEnvGroup, RetrieveEnvGroupEnvVar, RetrieveEnvGroupSecretFile, RetrieveEnvVar, RetrieveEnvironment, RetrieveJob, RetrieveMaintenance, RetrieveOwner, RetrieveOwnerNotificationSettings, RetrievePostgres, RetrievePostgresConnectionInfo, RetrievePostgresRecoveryInfo, RetrieveProject, RetrieveRedis, RetrieveRedisConnectionInfo, RetrieveRegistryCredential, RetrieveSecretFile, RetrieveService, RetrieveServiceNotificationOverrides, RollbackDeploy, RunCronJob, ScaleService, SubscribeLogs, SuspendPostgres, SuspendService, TriggerMaintenance, UnlinkServiceFromEnvGroup, UpdateBlueprint, UpdateDisk, UpdateEnvGroup, UpdateEnvGroupEnvVar, UpdateEnvGroupSecretFile, UpdateEnvVar, UpdateEnvVarsForService, UpdateEnvironment, UpdateHeaders, UpdateMaintenance, UpdateOwnerLogStream, UpdatePostgres, UpdateProject, UpdateRedis, UpdateRegistryCredential, UpdateResourceLogStream, UpdateSecretFilesForService, UpdateService };
